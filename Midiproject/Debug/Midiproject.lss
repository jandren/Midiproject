
Midiproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  00000492  00000526  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000492  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000508  00800204  00800204  0000052a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000052a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  0000055a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c8  00000000  00000000  0000064a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003e7  00000000  00000000  00000e12  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b55  00000000  00000000  000011f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000022c  00000000  00000000  00001d50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00008bbd  00000000  00000000  00001f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006ab  00000000  00000000  0000ab39  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  0000b1e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000037d9  00000000  00000000  0000b2a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	e5 c1       	rjmp	.+970    	; 0x410 <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ce c1       	rjmp	.+924    	; 0x3fa <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	73 c0       	rjmp	.+230    	; 0x14c <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	9d c1       	rjmp	.+826    	; 0x3b0 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e9       	ldi	r30, 0x92	; 146
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 30       	cpi	r26, 0x04	; 4
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	27 e0       	ldi	r18, 0x07	; 7
 110:	a4 e0       	ldi	r26, 0x04	; 4
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 30       	cpi	r26, 0x0C	; 12
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e d1       	rcall	.+540    	; 0x33c <main>
 120:	b6 c1       	rjmp	.+876    	; 0x48e <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <Init_ports>:
void Init_ports(void)
{
	// Hard coded setup
	
	// Set up port B LEDS
	DDRB = 0xFF; // No inputs, all ports as outputs
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	84 b9       	out	0x04, r24	; 4
	PORTB = 0xFF; // All LEDS are off
 128:	85 b9       	out	0x05, r24	; 5
	
	// Set up port D Buttons
	DDRD = 0x00;
 12a:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0xFF; // Set pull up on the inputs
 12c:	8b b9       	out	0x0b, r24	; 11
 12e:	08 95       	ret

00000130 <Init_UART0>:
void Init_UART0(uint16_t BAUDRATE)
{
	//ubrr = F_CPU/16uL/BAUDRATE;
	
	// Set baud rate to 9600 @ 8MHz
	UBRR0L = 51;
 130:	83 e3       	ldi	r24, 0x33	; 51
 132:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0;
 136:	10 92 c5 00 	sts	0x00C5, r1
	
	// No parity bit, 8 bit char, one stop bit
	UCSR0A = 0x00;
 13a:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0b10011000;
 13e:	88 e9       	ldi	r24, 0x98	; 152
 140:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = 0b00000110;
 144:	86 e0       	ldi	r24, 0x06	; 6
 146:	80 93 c2 00 	sts	0x00C2, r24
 14a:	08 95       	ret

0000014c <__vector_25>:
}

ISR(USART0_RX_vect)
{
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
	rx_ch = UDR0;             //read UART register into value
 15a:	80 91 c6 00 	lds	r24, 0x00C6
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	90 93 01 02 	sts	0x0201, r25
 164:	80 93 00 02 	sts	0x0200, r24
}
 168:	9f 91       	pop	r25
 16a:	8f 91       	pop	r24
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <UART_out>:

void UART_out(uint8_t ch)
{
	while((UCSR0A & (1<<UDRE0)) == 0); // Wait until empty
 176:	e0 ec       	ldi	r30, 0xC0	; 192
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	90 81       	ld	r25, Z
 17c:	95 ff       	sbrs	r25, 5
 17e:	fd cf       	rjmp	.-6      	; 0x17a <UART_out+0x4>
	
	UDR0 = ch; // Put character to be sent in the output register
 180:	80 93 c6 00 	sts	0x00C6, r24
 184:	08 95       	ret

00000186 <MIDI_send>:
}

void MIDI_send(uint8_t command, uint8_t tone, uint8_t volume)
// Send the Midi command, not much really but abstracts the code a little.
{
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	d6 2f       	mov	r29, r22
 18c:	c4 2f       	mov	r28, r20
	UART_out(command); // Command 7-bit
 18e:	f3 df       	rcall	.-26     	; 0x176 <UART_out>
	UART_out(tone); // Note 7bit
 190:	8d 2f       	mov	r24, r29
 192:	f1 df       	rcall	.-30     	; 0x176 <UART_out>
	UART_out(volume >> 1); // Velocity 7 bit from 8 bit volume
 194:	8c 2f       	mov	r24, r28
 196:	86 95       	lsr	r24
 198:	ee df       	rcall	.-36     	; 0x176 <UART_out>
	
	// See Midi command table for exact bits to input.
}
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <MIDI_Conversion>:

uint8_t MIDI_Conversion(uint8_t pressed)
{
	uint8_t converted = 0;
	uint8_t offset = 48;
	uint8_t pitch = switches & 0x03;		// mask with two far right switches
 1a0:	90 91 04 02 	lds	r25, 0x0204
 1a4:	93 70       	andi	r25, 0x03	; 3
		 			// B4 = 59 or B5 = 71 or B6 = 83
	if( pressed &  0x80) converted = offset + 12 + 12 * pitch;
		 			// C5 = 60 or C6 = 72 or C7 = 84
*/

	switch(pressed)
 1a6:	88 30       	cpi	r24, 0x08	; 8
 1a8:	49 f1       	breq	.+82     	; 0x1fc <MIDI_Conversion+0x5c>
 1aa:	40 f4       	brcc	.+16     	; 0x1bc <MIDI_Conversion+0x1c>
 1ac:	82 30       	cpi	r24, 0x02	; 2
 1ae:	c1 f0       	breq	.+48     	; 0x1e0 <MIDI_Conversion+0x40>
 1b0:	84 30       	cpi	r24, 0x04	; 4
 1b2:	e9 f0       	breq	.+58     	; 0x1ee <MIDI_Conversion+0x4e>
 1b4:	81 30       	cpi	r24, 0x01	; 1
 1b6:	09 f0       	breq	.+2      	; 0x1ba <MIDI_Conversion+0x1a>
 1b8:	44 c0       	rjmp	.+136    	; 0x242 <MIDI_Conversion+0xa2>
 1ba:	0b c0       	rjmp	.+22     	; 0x1d2 <MIDI_Conversion+0x32>
 1bc:	80 32       	cpi	r24, 0x20	; 32
 1be:	61 f1       	breq	.+88     	; 0x218 <MIDI_Conversion+0x78>
 1c0:	18 f4       	brcc	.+6      	; 0x1c8 <MIDI_Conversion+0x28>
 1c2:	80 31       	cpi	r24, 0x10	; 16
 1c4:	11 f1       	breq	.+68     	; 0x20a <MIDI_Conversion+0x6a>
 1c6:	3d c0       	rjmp	.+122    	; 0x242 <MIDI_Conversion+0xa2>
 1c8:	80 34       	cpi	r24, 0x40	; 64
 1ca:	69 f1       	breq	.+90     	; 0x226 <MIDI_Conversion+0x86>
 1cc:	80 38       	cpi	r24, 0x80	; 128
 1ce:	91 f1       	breq	.+100    	; 0x234 <MIDI_Conversion+0x94>
 1d0:	38 c0       	rjmp	.+112    	; 0x242 <MIDI_Conversion+0xa2>
	{
		case 0x01:
		converted = 48 + 12 * pitch;
 1d2:	89 2f       	mov	r24, r25
 1d4:	88 0f       	add	r24, r24
 1d6:	89 0f       	add	r24, r25
 1d8:	88 0f       	add	r24, r24
 1da:	88 0f       	add	r24, r24
 1dc:	80 5d       	subi	r24, 0xD0	; 208
		break;				// C4 = 48 or C5 = 60 or C6 = 72
 1de:	08 95       	ret
		case 0x02:
		converted = 50 + 12 * pitch;
 1e0:	89 2f       	mov	r24, r25
 1e2:	88 0f       	add	r24, r24
 1e4:	89 0f       	add	r24, r25
 1e6:	88 0f       	add	r24, r24
 1e8:	88 0f       	add	r24, r24
 1ea:	8e 5c       	subi	r24, 0xCE	; 206
		break;				// D4 = 50 or D5 = 62 or D6 = 74
 1ec:	08 95       	ret
		case 0x04:
		converted = 52 + 12 * pitch;
 1ee:	89 2f       	mov	r24, r25
 1f0:	88 0f       	add	r24, r24
 1f2:	89 0f       	add	r24, r25
 1f4:	88 0f       	add	r24, r24
 1f6:	88 0f       	add	r24, r24
 1f8:	8c 5c       	subi	r24, 0xCC	; 204
		break;				// E4 = 52 or E5 = 64 or E6 = 76
 1fa:	08 95       	ret
		case 0x08:
		converted = 53 + 12 * pitch;
 1fc:	89 2f       	mov	r24, r25
 1fe:	88 0f       	add	r24, r24
 200:	89 0f       	add	r24, r25
 202:	88 0f       	add	r24, r24
 204:	88 0f       	add	r24, r24
 206:	8b 5c       	subi	r24, 0xCB	; 203
		break;				// F4 = 53 or F5 = 65 or F6 = 77
 208:	08 95       	ret
		case 0x10:
		converted = 55 + 12 * pitch;
 20a:	89 2f       	mov	r24, r25
 20c:	88 0f       	add	r24, r24
 20e:	89 0f       	add	r24, r25
 210:	88 0f       	add	r24, r24
 212:	88 0f       	add	r24, r24
 214:	89 5c       	subi	r24, 0xC9	; 201
		break;				// G4 = 55 or G5 = 67 or G6 = 79
 216:	08 95       	ret
		case 0x20:
		converted = 57 + 12 * pitch;
 218:	89 2f       	mov	r24, r25
 21a:	88 0f       	add	r24, r24
 21c:	89 0f       	add	r24, r25
 21e:	88 0f       	add	r24, r24
 220:	88 0f       	add	r24, r24
 222:	87 5c       	subi	r24, 0xC7	; 199
		break;				// A4 = 57 or A5 = 69 or A6 = 81
 224:	08 95       	ret
		case 0x40:
		converted = 59 + 12 * pitch;
 226:	89 2f       	mov	r24, r25
 228:	88 0f       	add	r24, r24
 22a:	89 0f       	add	r24, r25
 22c:	88 0f       	add	r24, r24
 22e:	88 0f       	add	r24, r24
 230:	85 5c       	subi	r24, 0xC5	; 197
		break;				// B4 = 59 or B5 = 71 or B6 = 83
 232:	08 95       	ret
		case 0x80:
		converted = 60 + 12 * pitch;
 234:	89 2f       	mov	r24, r25
 236:	88 0f       	add	r24, r24
 238:	89 0f       	add	r24, r25
 23a:	88 0f       	add	r24, r24
 23c:	88 0f       	add	r24, r24
 23e:	84 5c       	subi	r24, 0xC4	; 196
		break;				// C5 = 60 or C6 = 72 or C7 = 84
 240:	08 95       	ret
	// See Midi command table for exact bits to input.
}

uint8_t MIDI_Conversion(uint8_t pressed)
{
	uint8_t converted = 0;
 242:	80 e0       	ldi	r24, 0x00	; 0
		default:
		break;
	}
	
	return converted;
 244:	08 95       	ret

00000246 <REC_ISR>:
 246:	80 91 05 02 	lds	r24, 0x0205
 24a:	88 23       	and	r24, r24
 24c:	09 f1       	breq	.+66     	; 0x290 <REC_ISR+0x4a>
 24e:	e0 91 07 02 	lds	r30, 0x0207
 252:	ef 5f       	subi	r30, 0xFF	; 255
 254:	e0 93 07 02 	sts	0x0207, r30
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	ee 0f       	add	r30, r30
 25c:	ff 1f       	adc	r31, r31
 25e:	e4 5f       	subi	r30, 0xF4	; 244
 260:	fb 4f       	sbci	r31, 0xFB	; 251
 262:	80 81       	ld	r24, Z
 264:	91 81       	ldd	r25, Z+1	; 0x01
 266:	89 2b       	or	r24, r25
 268:	31 f4       	brne	.+12     	; 0x276 <REC_ISR+0x30>
 26a:	10 92 07 02 	sts	0x0207, r1
 26e:	10 92 0b 02 	sts	0x020B, r1
 272:	10 92 0a 02 	sts	0x020A, r1
 276:	e0 91 07 02 	lds	r30, 0x0207
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	ee 0f       	add	r30, r30
 27e:	ff 1f       	adc	r31, r31
 280:	e4 5f       	subi	r30, 0xF4	; 244
 282:	fb 4f       	sbci	r31, 0xFB	; 251
 284:	80 81       	ld	r24, Z
 286:	91 81       	ldd	r25, Z+1	; 0x01
 288:	90 93 09 02 	sts	0x0209, r25
 28c:	80 93 08 02 	sts	0x0208, r24
 290:	08 95       	ret

00000292 <REC_add>:
 292:	90 91 07 02 	lds	r25, 0x0207
 296:	29 2f       	mov	r18, r25
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	f9 01       	movw	r30, r18
 29c:	e4 5f       	subi	r30, 0xF4	; 244
 29e:	fd 4f       	sbci	r31, 0xFD	; 253
 2a0:	80 83       	st	Z, r24
 2a2:	f9 01       	movw	r30, r18
 2a4:	e4 5f       	subi	r30, 0xF4	; 244
 2a6:	fc 4f       	sbci	r31, 0xFC	; 252
 2a8:	60 83       	st	Z, r22
 2aa:	80 91 02 02 	lds	r24, 0x0202
 2ae:	f9 01       	movw	r30, r18
 2b0:	e4 5f       	subi	r30, 0xF4	; 244
 2b2:	f9 4f       	sbci	r31, 0xF9	; 249
 2b4:	80 83       	st	Z, r24
 2b6:	f9 01       	movw	r30, r18
 2b8:	ee 0f       	add	r30, r30
 2ba:	ff 1f       	adc	r31, r31
 2bc:	e4 5f       	subi	r30, 0xF4	; 244
 2be:	fb 4f       	sbci	r31, 0xFB	; 251
 2c0:	11 82       	std	Z+1, r1	; 0x01
 2c2:	10 82       	st	Z, r1
 2c4:	9f 5f       	subi	r25, 0xFF	; 255
 2c6:	90 93 07 02 	sts	0x0207, r25
 2ca:	08 95       	ret

000002cc <REC_start>:
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	80 93 06 02 	sts	0x0206, r24
 2d2:	10 92 07 02 	sts	0x0207, r1
 2d6:	08 95       	ret

000002d8 <REC_stop>:
 2d8:	80 91 07 02 	lds	r24, 0x0207
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	fc 01       	movw	r30, r24
 2e0:	e4 5f       	subi	r30, 0xF4	; 244
 2e2:	fd 4f       	sbci	r31, 0xFD	; 253
 2e4:	10 82       	st	Z, r1
 2e6:	fc 01       	movw	r30, r24
 2e8:	e4 5f       	subi	r30, 0xF4	; 244
 2ea:	fc 4f       	sbci	r31, 0xFC	; 252
 2ec:	10 82       	st	Z, r1
 2ee:	fc 01       	movw	r30, r24
 2f0:	e4 5f       	subi	r30, 0xF4	; 244
 2f2:	f9 4f       	sbci	r31, 0xF9	; 249
 2f4:	10 82       	st	Z, r1
 2f6:	fc 01       	movw	r30, r24
 2f8:	ee 0f       	add	r30, r30
 2fa:	ff 1f       	adc	r31, r31
 2fc:	e4 5f       	subi	r30, 0xF4	; 244
 2fe:	fb 4f       	sbci	r31, 0xFB	; 251
 300:	11 82       	std	Z+1, r1	; 0x01
 302:	10 82       	st	Z, r1
 304:	10 92 06 02 	sts	0x0206, r1
 308:	08 95       	ret

0000030a <REC_process>:
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	c6 2f       	mov	r28, r22
 310:	d4 2f       	mov	r29, r20
 312:	90 91 06 02 	lds	r25, 0x0206
 316:	91 30       	cpi	r25, 0x01	; 1
 318:	41 f4       	brne	.+16     	; 0x32a <REC_process+0x20>
 31a:	88 23       	and	r24, r24
 31c:	24 f4       	brge	.+8      	; 0x326 <REC_process+0x1c>
 31e:	64 2f       	mov	r22, r20
 320:	8c 2f       	mov	r24, r28
 322:	b7 df       	rcall	.-146    	; 0x292 <REC_add>
 324:	08 c0       	rjmp	.+16     	; 0x336 <REC_process+0x2c>
 326:	d8 df       	rcall	.-80     	; 0x2d8 <REC_stop>
 328:	06 c0       	rjmp	.+12     	; 0x336 <REC_process+0x2c>
 32a:	88 23       	and	r24, r24
 32c:	24 f4       	brge	.+8      	; 0x336 <REC_process+0x2c>
 32e:	ce df       	rcall	.-100    	; 0x2cc <REC_start>
 330:	6d 2f       	mov	r22, r29
 332:	8c 2f       	mov	r24, r28
 334:	ae df       	rcall	.-164    	; 0x292 <REC_add>
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	08 95       	ret

0000033c <main>:

void init_Timer1(void)				// for recording
{
	TCCR1A = 0b00000000;			// normal mode
	TCCR1B = 0b00000011;			// prescaler 64
	OCR1A = 125;					// output compare, 65525*1024/(8*10^6) = 8.4s at max
 33c:	f3 de       	rcall	.-538    	; 0x124 <Init_ports>
 33e:	80 e8       	ldi	r24, 0x80	; 128
 340:	95 e2       	ldi	r25, 0x25	; 37
 342:	f6 de       	rcall	.-532    	; 0x130 <Init_UART0>
 344:	78 94       	sei
 346:	20 e0       	ldi	r18, 0x00	; 0
 348:	01 c0       	rjmp	.+2      	; 0x34c <main+0x10>
 34a:	2c 2f       	mov	r18, r28
 34c:	99 b1       	in	r25, 0x09	; 9
 34e:	c9 2f       	mov	r28, r25
 350:	c0 95       	com	r28
 352:	95 b9       	out	0x05, r25	; 5
 354:	92 2f       	mov	r25, r18
 356:	9c 27       	eor	r25, r28
 358:	89 2f       	mov	r24, r25
 35a:	8c 23       	and	r24, r28
 35c:	99 f0       	breq	.+38     	; 0x384 <main+0x48>
 35e:	d0 91 04 02 	lds	r29, 0x0204
 362:	dc 70       	andi	r29, 0x0C	; 12
 364:	d6 95       	lsr	r29
 366:	d6 95       	lsr	r29
 368:	d0 69       	ori	r29, 0x90	; 144
 36a:	1a df       	rcall	.-460    	; 0x1a0 <MIDI_Conversion>
 36c:	18 2f       	mov	r17, r24
 36e:	80 91 04 02 	lds	r24, 0x0204
 372:	41 2f       	mov	r20, r17
 374:	6d 2f       	mov	r22, r29
 376:	c9 df       	rcall	.-110    	; 0x30a <REC_process>
 378:	40 91 02 02 	lds	r20, 0x0202
 37c:	61 2f       	mov	r22, r17
 37e:	8d 2f       	mov	r24, r29
 380:	02 df       	rcall	.-508    	; 0x186 <MIDI_send>
 382:	e3 cf       	rjmp	.-58     	; 0x34a <main+0xe>
 384:	89 2f       	mov	r24, r25
 386:	82 23       	and	r24, r18
 388:	01 f3       	breq	.-64     	; 0x34a <main+0xe>
 38a:	d0 91 04 02 	lds	r29, 0x0204
 38e:	dc 70       	andi	r29, 0x0C	; 12
 390:	d6 95       	lsr	r29
 392:	d6 95       	lsr	r29
 394:	d0 64       	ori	r29, 0x40	; 64
 396:	04 df       	rcall	.-504    	; 0x1a0 <MIDI_Conversion>
 398:	18 2f       	mov	r17, r24
 39a:	80 91 04 02 	lds	r24, 0x0204
 39e:	41 2f       	mov	r20, r17
 3a0:	6d 2f       	mov	r22, r29
 3a2:	b3 df       	rcall	.-154    	; 0x30a <REC_process>
 3a4:	40 91 02 02 	lds	r20, 0x0202
 3a8:	61 2f       	mov	r22, r17
 3aa:	8d 2f       	mov	r24, r29
 3ac:	ec de       	rcall	.-552    	; 0x186 <MIDI_send>
 3ae:	cd cf       	rjmp	.-102    	; 0x34a <main+0xe>

000003b0 <__vector_29>:
 3b0:	1f 92       	push	r1
 3b2:	0f 92       	push	r0
 3b4:	0f b6       	in	r0, 0x3f	; 63
 3b6:	0f 92       	push	r0
 3b8:	11 24       	eor	r1, r1
 3ba:	0b b6       	in	r0, 0x3b	; 59
 3bc:	0f 92       	push	r0
 3be:	8f 93       	push	r24
 3c0:	9f 93       	push	r25
 3c2:	ef 93       	push	r30
 3c4:	ff 93       	push	r31
 3c6:	80 91 79 00 	lds	r24, 0x0079
 3ca:	80 93 02 02 	sts	0x0202, r24
 3ce:	ec e7       	ldi	r30, 0x7C	; 124
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	90 81       	ld	r25, Z
 3d4:	80 91 04 02 	lds	r24, 0x0204
 3d8:	8c 70       	andi	r24, 0x0C	; 12
 3da:	86 95       	lsr	r24
 3dc:	86 95       	lsr	r24
 3de:	90 7e       	andi	r25, 0xE0	; 224
 3e0:	89 2b       	or	r24, r25
 3e2:	80 83       	st	Z, r24
 3e4:	ff 91       	pop	r31
 3e6:	ef 91       	pop	r30
 3e8:	9f 91       	pop	r25
 3ea:	8f 91       	pop	r24
 3ec:	0f 90       	pop	r0
 3ee:	0b be       	out	0x3b, r0	; 59
 3f0:	0f 90       	pop	r0
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	0f 90       	pop	r0
 3f6:	1f 90       	pop	r1
 3f8:	18 95       	reti

000003fa <__vector_23>:
 3fa:	1f 92       	push	r1
 3fc:	0f 92       	push	r0
 3fe:	0f b6       	in	r0, 0x3f	; 63
 400:	0f 92       	push	r0
 402:	11 24       	eor	r1, r1
 404:	16 bc       	out	0x26, r1	; 38
 406:	0f 90       	pop	r0
 408:	0f be       	out	0x3f, r0	; 63
 40a:	0f 90       	pop	r0
 40c:	1f 90       	pop	r1
 40e:	18 95       	reti

00000410 <__vector_17>:
}

ISR(TIMER1_COMPA_vect)
{
 410:	1f 92       	push	r1
 412:	0f 92       	push	r0
 414:	0f b6       	in	r0, 0x3f	; 63
 416:	0f 92       	push	r0
 418:	11 24       	eor	r1, r1
 41a:	0b b6       	in	r0, 0x3b	; 59
 41c:	0f 92       	push	r0
 41e:	2f 93       	push	r18
 420:	3f 93       	push	r19
 422:	4f 93       	push	r20
 424:	5f 93       	push	r21
 426:	6f 93       	push	r22
 428:	7f 93       	push	r23
 42a:	8f 93       	push	r24
 42c:	9f 93       	push	r25
 42e:	af 93       	push	r26
 430:	bf 93       	push	r27
 432:	ef 93       	push	r30
 434:	ff 93       	push	r31
	software_time++;
 436:	80 91 0a 02 	lds	r24, 0x020A
 43a:	90 91 0b 02 	lds	r25, 0x020B
 43e:	01 96       	adiw	r24, 0x01	; 1
 440:	90 93 0b 02 	sts	0x020B, r25
 444:	80 93 0a 02 	sts	0x020A, r24
	if(software_time == software_comp)
 448:	20 91 0a 02 	lds	r18, 0x020A
 44c:	30 91 0b 02 	lds	r19, 0x020B
 450:	80 91 08 02 	lds	r24, 0x0208
 454:	90 91 09 02 	lds	r25, 0x0209
 458:	28 17       	cp	r18, r24
 45a:	39 07       	cpc	r19, r25
 45c:	29 f4       	brne	.+10     	; 0x468 <__vector_17+0x58>
	{
		REC_ISR(software_time);
 45e:	80 91 0a 02 	lds	r24, 0x020A
 462:	90 91 0b 02 	lds	r25, 0x020B
 466:	ef de       	rcall	.-546    	; 0x246 <REC_ISR>
	}
}
 468:	ff 91       	pop	r31
 46a:	ef 91       	pop	r30
 46c:	bf 91       	pop	r27
 46e:	af 91       	pop	r26
 470:	9f 91       	pop	r25
 472:	8f 91       	pop	r24
 474:	7f 91       	pop	r23
 476:	6f 91       	pop	r22
 478:	5f 91       	pop	r21
 47a:	4f 91       	pop	r20
 47c:	3f 91       	pop	r19
 47e:	2f 91       	pop	r18
 480:	0f 90       	pop	r0
 482:	0b be       	out	0x3b, r0	; 59
 484:	0f 90       	pop	r0
 486:	0f be       	out	0x3f, r0	; 63
 488:	0f 90       	pop	r0
 48a:	1f 90       	pop	r1
 48c:	18 95       	reti

0000048e <_exit>:
 48e:	f8 94       	cli

00000490 <__stop_program>:
 490:	ff cf       	rjmp	.-2      	; 0x490 <__stop_program>
