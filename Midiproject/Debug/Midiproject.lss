
Midiproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  0000026c  00000300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800202  00800202  00000302  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000332  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002c8  00000000  00000000  0000038a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000134  00000000  00000000  00000652  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004b6  00000000  00000000  00000786  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00000c3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00008a62  00000000  00000000  00000ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c7  00000000  00000000  00009746  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000990d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000023e  00000000  00000000  00009955  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5f c0       	rjmp	.+190    	; 0x124 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e6       	ldi	r30, 0x6C	; 108
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a3 30       	cpi	r26, 0x03	; 3
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	7a d0       	rcall	.+244    	; 0x214 <main>
 120:	a3 c0       	rjmp	.+326    	; 0x268 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_25>:
		//_delay_ms(300);
	}
	// End of while(1)
}

ISR(USART0_RX_vect){
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
	rx_ch = UDR0;             //read UART register into value
 132:	80 91 c6 00 	lds	r24, 0x00C6
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	90 93 01 02 	sts	0x0201, r25
 13c:	80 93 00 02 	sts	0x0200, r24
}
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <UART_out>:

void UART_out(uint8_t ch){
	while((UCSR0A & (1<<UDRE0)) == 0); // Wait until empty
 14e:	e0 ec       	ldi	r30, 0xC0	; 192
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	90 81       	ld	r25, Z
 154:	95 ff       	sbrs	r25, 5
 156:	fd cf       	rjmp	.-6      	; 0x152 <UART_out+0x4>
	
	UDR0 = ch; // Put character to be sent in the output register
 158:	80 93 c6 00 	sts	0x00C6, r24
 15c:	08 95       	ret

0000015e <Init_UART0>:

void Init_UART0(uint16_t BAUDRATE){
	//ubrr = F_CPU/16uL/BAUDRATE;
	
	// Set baud rate to 9600 @ 8MHz
	UBRR0L = 51;
 15e:	83 e3       	ldi	r24, 0x33	; 51
 160:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0;
 164:	10 92 c5 00 	sts	0x00C5, r1
	
	// No parity bit, 8 bit char, one stop bit
	UCSR0A = 0x00;
 168:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0b10011000;
 16c:	88 e9       	ldi	r24, 0x98	; 152
 16e:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = 0b00000110;
 172:	86 e0       	ldi	r24, 0x06	; 6
 174:	80 93 c2 00 	sts	0x00C2, r24
 178:	08 95       	ret

0000017a <Init_ports>:

void Init_ports(void){
	// Hard coded setup
	
	// Set up port B LEDS
	DDRB = 0xFF; // No inputs, all ports as outputs
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	84 b9       	out	0x04, r24	; 4
	PORTB = 0xFF; // All LEDS are off
 17e:	85 b9       	out	0x05, r24	; 5
	
	// Set up port D Buttons
	DDRD = 0x00;
 180:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0xFF; // Set pull up on the inputs
 182:	8b b9       	out	0x0b, r24	; 11
 184:	08 95       	ret

00000186 <Conversion>:
}

uint8_t Conversion(uint8_t pressed)
{
 186:	98 2f       	mov	r25, r24
	uint8_t converted = 48;
	uint8_t offset = 48;
	uint8_t pitch = switches & 0x03;		// mask with two far right switches
 188:	20 91 02 02 	lds	r18, 0x0202
 18c:	23 70       	andi	r18, 0x03	; 3

	if( pressed &  0x01){
 18e:	80 ff       	sbrs	r24, 0
 190:	07 c0       	rjmp	.+14     	; 0x1a0 <Conversion+0x1a>
		 converted = offset + 0 + 12 * pitch;
 192:	82 2f       	mov	r24, r18
 194:	88 0f       	add	r24, r24
 196:	82 0f       	add	r24, r18
 198:	88 0f       	add	r24, r24
 19a:	88 0f       	add	r24, r24
 19c:	80 5d       	subi	r24, 0xD0	; 208
 19e:	01 c0       	rjmp	.+2      	; 0x1a2 <Conversion+0x1c>
	PORTD = 0xFF; // Set pull up on the inputs
}

uint8_t Conversion(uint8_t pressed)
{
	uint8_t converted = 48;
 1a0:	80 e3       	ldi	r24, 0x30	; 48
	if( pressed &  0x01){
		 converted = offset + 0 + 12 * pitch;
		 			// C4 = 48 or C5 = 60 or C6 = 72
		 // sendMIDI
	}
	if( pressed &  0x02){
 1a2:	91 ff       	sbrs	r25, 1
 1a4:	06 c0       	rjmp	.+12     	; 0x1b2 <Conversion+0x2c>
		 converted = offset + 2 + 12 * pitch;
 1a6:	82 2f       	mov	r24, r18
 1a8:	88 0f       	add	r24, r24
 1aa:	82 0f       	add	r24, r18
 1ac:	88 0f       	add	r24, r24
 1ae:	88 0f       	add	r24, r24
 1b0:	8e 5c       	subi	r24, 0xCE	; 206
		 			// D4 = 50 or D5 = 62 or D6 = 74
	}
	if( pressed &  0x04) converted = offset + 4 + 12 * pitch;
 1b2:	92 ff       	sbrs	r25, 2
 1b4:	06 c0       	rjmp	.+12     	; 0x1c2 <Conversion+0x3c>
 1b6:	82 2f       	mov	r24, r18
 1b8:	88 0f       	add	r24, r24
 1ba:	82 0f       	add	r24, r18
 1bc:	88 0f       	add	r24, r24
 1be:	88 0f       	add	r24, r24
 1c0:	8c 5c       	subi	r24, 0xCC	; 204
		 			// E4 = 52 or E5 = 64 or E6 = 76
	if( pressed &  0x08) converted = offset + 5 + 12 * pitch;
 1c2:	93 ff       	sbrs	r25, 3
 1c4:	06 c0       	rjmp	.+12     	; 0x1d2 <Conversion+0x4c>
 1c6:	82 2f       	mov	r24, r18
 1c8:	88 0f       	add	r24, r24
 1ca:	82 0f       	add	r24, r18
 1cc:	88 0f       	add	r24, r24
 1ce:	88 0f       	add	r24, r24
 1d0:	8b 5c       	subi	r24, 0xCB	; 203
		 			// F4 = 53 or F5 = 65 or F6 = 77
	if( pressed &  0x10) converted = offset + 7 + 12 * pitch;
 1d2:	94 ff       	sbrs	r25, 4
 1d4:	06 c0       	rjmp	.+12     	; 0x1e2 <Conversion+0x5c>
 1d6:	82 2f       	mov	r24, r18
 1d8:	88 0f       	add	r24, r24
 1da:	82 0f       	add	r24, r18
 1dc:	88 0f       	add	r24, r24
 1de:	88 0f       	add	r24, r24
 1e0:	89 5c       	subi	r24, 0xC9	; 201
		 			// G4 = 55 or G5 = 67 or G6 = 79
	if( pressed &  0x20) converted = offset + 9 + 12 * pitch;
 1e2:	95 ff       	sbrs	r25, 5
 1e4:	06 c0       	rjmp	.+12     	; 0x1f2 <Conversion+0x6c>
 1e6:	82 2f       	mov	r24, r18
 1e8:	88 0f       	add	r24, r24
 1ea:	82 0f       	add	r24, r18
 1ec:	88 0f       	add	r24, r24
 1ee:	88 0f       	add	r24, r24
 1f0:	87 5c       	subi	r24, 0xC7	; 199
		 			// A4 = 57 or A5 = 69 or A6 = 81
	if( pressed &  0x40) converted = offset + 11 + 12 * pitch;
 1f2:	96 ff       	sbrs	r25, 6
 1f4:	06 c0       	rjmp	.+12     	; 0x202 <Conversion+0x7c>
 1f6:	82 2f       	mov	r24, r18
 1f8:	88 0f       	add	r24, r24
 1fa:	82 0f       	add	r24, r18
 1fc:	88 0f       	add	r24, r24
 1fe:	88 0f       	add	r24, r24
 200:	85 5c       	subi	r24, 0xC5	; 197
		 			// B4 = 59 or B5 = 71 or B6 = 83
	if( pressed &  0x80) converted = offset + 12 + 12 * pitch;
 202:	99 23       	and	r25, r25
 204:	34 f4       	brge	.+12     	; 0x212 <Conversion+0x8c>
 206:	82 2f       	mov	r24, r18
 208:	88 0f       	add	r24, r24
 20a:	82 0f       	add	r24, r18
 20c:	88 0f       	add	r24, r24
 20e:	88 0f       	add	r24, r24
 210:	84 5c       	subi	r24, 0xC4	; 196
		default:
		break;
	}*/
	
	return converted;
}
 212:	08 95       	ret

00000214 <main>:
volatile uint16_t rx_ch = 0xFF;
volatile uint8_t switches = 0x00; // Byte containing [rec, play1, play2, play3, ch_bit0, ch_bit1, pitch_bit0, pitch_bit1];

int main(void)
{
	Init_ports();
 214:	b2 df       	rcall	.-156    	; 0x17a <Init_ports>
	Init_UART0(9600);
 216:	80 e8       	ldi	r24, 0x80	; 128
 218:	95 e2       	ldi	r25, 0x25	; 37
 21a:	a1 df       	rcall	.-190    	; 0x15e <Init_UART0>
	sei();
 21c:	78 94       	sei
	
	// Pressed buttons
	uint8_t previus = 0x00;
 21e:	20 e0       	ldi	r18, 0x00	; 0
 220:	01 c0       	rjmp	.+2      	; 0x224 <main+0x10>
// global variables
volatile uint16_t rx_ch = 0xFF;
volatile uint8_t switches = 0x00; // Byte containing [rec, play1, play2, play3, ch_bit0, ch_bit1, pitch_bit0, pitch_bit1];

int main(void)
{
 222:	2c 2f       	mov	r18, r28
	
	while
	(1)
	{
		
		current = ~PIND;
 224:	99 b1       	in	r25, 0x09	; 9
 226:	c9 2f       	mov	r28, r25
 228:	c0 95       	com	r28
		switches = ~PINC; // Update switches
 22a:	86 b1       	in	r24, 0x06	; 6
 22c:	80 95       	com	r24
 22e:	80 93 02 02 	sts	0x0202, r24
		PORTB = ~current; // rx_ch;
 232:	95 b9       	out	0x05, r25	; 5
		
		change = current^previus;
 234:	92 2f       	mov	r25, r18
 236:	9c 27       	eor	r25, r28
		
		if(current & change) // Note on
 238:	d9 2f       	mov	r29, r25
 23a:	dc 23       	and	r29, r28
 23c:	49 f0       	breq	.+18     	; 0x250 <main+0x3c>
		{
			UART_out(0b10010001); // Command
 23e:	81 e9       	ldi	r24, 0x91	; 145
 240:	86 df       	rcall	.-244    	; 0x14e <UART_out>
			UART_out(60+Conversion(current & change)); // Note 7bit
 242:	8d 2f       	mov	r24, r29
 244:	a0 df       	rcall	.-192    	; 0x186 <Conversion>
 246:	84 5c       	subi	r24, 0xC4	; 196
 248:	82 df       	rcall	.-252    	; 0x14e <UART_out>
			UART_out(80 ); //volume(switches & 0x03)); // Velocity 7 bit
 24a:	80 e5       	ldi	r24, 0x50	; 80
 24c:	80 df       	rcall	.-256    	; 0x14e <UART_out>
 24e:	e9 cf       	rjmp	.-46     	; 0x222 <main+0xe>
		}
		else if(previus & change) // Note off
 250:	d9 2f       	mov	r29, r25
 252:	d2 23       	and	r29, r18
 254:	31 f3       	breq	.-52     	; 0x222 <main+0xe>
		{
			UART_out(0b10000001); // Command
 256:	81 e8       	ldi	r24, 0x81	; 129
 258:	7a df       	rcall	.-268    	; 0x14e <UART_out>
			UART_out(60+Conversion(previus & change)); // Note 7bit
 25a:	8d 2f       	mov	r24, r29
 25c:	94 df       	rcall	.-216    	; 0x186 <Conversion>
 25e:	84 5c       	subi	r24, 0xC4	; 196
 260:	76 df       	rcall	.-276    	; 0x14e <UART_out>
			UART_out(0b01001000); // Velocity 7 bit
 262:	88 e4       	ldi	r24, 0x48	; 72
 264:	74 df       	rcall	.-280    	; 0x14e <UART_out>
 266:	dd cf       	rjmp	.-70     	; 0x222 <main+0xe>

00000268 <_exit>:
 268:	f8 94       	cli

0000026a <__stop_program>:
 26a:	ff cf       	rjmp	.-2      	; 0x26a <__stop_program>
