
Midiproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  0000033c  000003b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000033c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003b2  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000050  00000000  00000000  000003e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000031f  00000000  00000000  00000432  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000175  00000000  00000000  00000751  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000049f  00000000  00000000  000008c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a4  00000000  00000000  00000d68  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00008a5c  00000000  00000000  00000e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002d2  00000000  00000000  00009868  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00009b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000023e  00000000  00000000  00009b7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f1 c0       	rjmp	.+482    	; 0x1e4 <__ctors_end>
   2:	00 00       	nop
   4:	06 c1       	rjmp	.+524    	; 0x212 <__bad_interrupt>
   6:	00 00       	nop
   8:	04 c1       	rjmp	.+520    	; 0x212 <__bad_interrupt>
   a:	00 00       	nop
   c:	02 c1       	rjmp	.+516    	; 0x212 <__bad_interrupt>
   e:	00 00       	nop
  10:	00 c1       	rjmp	.+512    	; 0x212 <__bad_interrupt>
  12:	00 00       	nop
  14:	fe c0       	rjmp	.+508    	; 0x212 <__bad_interrupt>
  16:	00 00       	nop
  18:	fc c0       	rjmp	.+504    	; 0x212 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	fa c0       	rjmp	.+500    	; 0x212 <__bad_interrupt>
  1e:	00 00       	nop
  20:	f8 c0       	rjmp	.+496    	; 0x212 <__bad_interrupt>
  22:	00 00       	nop
  24:	f6 c0       	rjmp	.+492    	; 0x212 <__bad_interrupt>
  26:	00 00       	nop
  28:	f4 c0       	rjmp	.+488    	; 0x212 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	f2 c0       	rjmp	.+484    	; 0x212 <__bad_interrupt>
  2e:	00 00       	nop
  30:	f0 c0       	rjmp	.+480    	; 0x212 <__bad_interrupt>
  32:	00 00       	nop
  34:	ee c0       	rjmp	.+476    	; 0x212 <__bad_interrupt>
  36:	00 00       	nop
  38:	ec c0       	rjmp	.+472    	; 0x212 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ea c0       	rjmp	.+468    	; 0x212 <__bad_interrupt>
  3e:	00 00       	nop
  40:	e8 c0       	rjmp	.+464    	; 0x212 <__bad_interrupt>
  42:	00 00       	nop
  44:	e6 c0       	rjmp	.+460    	; 0x212 <__bad_interrupt>
  46:	00 00       	nop
  48:	e4 c0       	rjmp	.+456    	; 0x212 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	e2 c0       	rjmp	.+452    	; 0x212 <__bad_interrupt>
  4e:	00 00       	nop
  50:	e0 c0       	rjmp	.+448    	; 0x212 <__bad_interrupt>
  52:	00 00       	nop
  54:	de c0       	rjmp	.+444    	; 0x212 <__bad_interrupt>
  56:	00 00       	nop
  58:	dc c0       	rjmp	.+440    	; 0x212 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	da c0       	rjmp	.+436    	; 0x212 <__bad_interrupt>
  5e:	00 00       	nop
  60:	d8 c0       	rjmp	.+432    	; 0x212 <__bad_interrupt>
  62:	00 00       	nop
  64:	d7 c0       	rjmp	.+430    	; 0x214 <__vector_25>
  66:	00 00       	nop
  68:	d4 c0       	rjmp	.+424    	; 0x212 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	d2 c0       	rjmp	.+420    	; 0x212 <__bad_interrupt>
  6e:	00 00       	nop
  70:	d0 c0       	rjmp	.+416    	; 0x212 <__bad_interrupt>
  72:	00 00       	nop
  74:	ce c0       	rjmp	.+412    	; 0x212 <__bad_interrupt>
  76:	00 00       	nop
  78:	cc c0       	rjmp	.+408    	; 0x212 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	ca c0       	rjmp	.+404    	; 0x212 <__bad_interrupt>
  7e:	00 00       	nop
  80:	c8 c0       	rjmp	.+400    	; 0x212 <__bad_interrupt>
  82:	00 00       	nop
  84:	c6 c0       	rjmp	.+396    	; 0x212 <__bad_interrupt>
  86:	00 00       	nop
  88:	c4 c0       	rjmp	.+392    	; 0x212 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c2 c0       	rjmp	.+388    	; 0x212 <__bad_interrupt>
  8e:	00 00       	nop
  90:	c0 c0       	rjmp	.+384    	; 0x212 <__bad_interrupt>
  92:	00 00       	nop
  94:	be c0       	rjmp	.+380    	; 0x212 <__bad_interrupt>
  96:	00 00       	nop
  98:	bc c0       	rjmp	.+376    	; 0x212 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ba c0       	rjmp	.+372    	; 0x212 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	b8 c0       	rjmp	.+368    	; 0x212 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	b6 c0       	rjmp	.+364    	; 0x212 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	b4 c0       	rjmp	.+360    	; 0x212 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	b2 c0       	rjmp	.+356    	; 0x212 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	b0 c0       	rjmp	.+352    	; 0x212 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	ae c0       	rjmp	.+348    	; 0x212 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	ac c0       	rjmp	.+344    	; 0x212 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	aa c0       	rjmp	.+340    	; 0x212 <__bad_interrupt>
  be:	00 00       	nop
  c0:	a8 c0       	rjmp	.+336    	; 0x212 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	a6 c0       	rjmp	.+332    	; 0x212 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	a4 c0       	rjmp	.+328    	; 0x212 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	a2 c0       	rjmp	.+324    	; 0x212 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	a0 c0       	rjmp	.+320    	; 0x212 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	9e c0       	rjmp	.+316    	; 0x212 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	9c c0       	rjmp	.+312    	; 0x212 <__bad_interrupt>
  da:	00 00       	nop
  dc:	9a c0       	rjmp	.+308    	; 0x212 <__bad_interrupt>
  de:	00 00       	nop
  e0:	98 c0       	rjmp	.+304    	; 0x212 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	66 01       	movw	r12, r12
  e6:	47 01       	movw	r8, r14
  e8:	68 01       	movw	r12, r16
  ea:	4b 01       	movw	r8, r22
  ec:	69 01       	movw	r12, r18
  ee:	49 01       	movw	r8, r18
  f0:	69 01       	movw	r12, r18
  f2:	4d 01       	movw	r8, r26
  f4:	69 01       	movw	r12, r18
  f6:	69 01       	movw	r12, r18
  f8:	69 01       	movw	r12, r18
  fa:	69 01       	movw	r12, r18
  fc:	69 01       	movw	r12, r18
  fe:	69 01       	movw	r12, r18
 100:	69 01       	movw	r12, r18
 102:	51 01       	movw	r10, r2
 104:	69 01       	movw	r12, r18
 106:	69 01       	movw	r12, r18
 108:	69 01       	movw	r12, r18
 10a:	69 01       	movw	r12, r18
 10c:	69 01       	movw	r12, r18
 10e:	69 01       	movw	r12, r18
 110:	69 01       	movw	r12, r18
 112:	4f 01       	movw	r8, r30
 114:	69 01       	movw	r12, r18
 116:	69 01       	movw	r12, r18
 118:	69 01       	movw	r12, r18
 11a:	69 01       	movw	r12, r18
 11c:	69 01       	movw	r12, r18
 11e:	69 01       	movw	r12, r18
 120:	69 01       	movw	r12, r18
 122:	55 01       	movw	r10, r10
 124:	69 01       	movw	r12, r18
 126:	69 01       	movw	r12, r18
 128:	69 01       	movw	r12, r18
 12a:	69 01       	movw	r12, r18
 12c:	69 01       	movw	r12, r18
 12e:	69 01       	movw	r12, r18
 130:	69 01       	movw	r12, r18
 132:	69 01       	movw	r12, r18
 134:	69 01       	movw	r12, r18
 136:	69 01       	movw	r12, r18
 138:	69 01       	movw	r12, r18
 13a:	69 01       	movw	r12, r18
 13c:	69 01       	movw	r12, r18
 13e:	69 01       	movw	r12, r18
 140:	69 01       	movw	r12, r18
 142:	53 01       	movw	r10, r6
 144:	69 01       	movw	r12, r18
 146:	69 01       	movw	r12, r18
 148:	69 01       	movw	r12, r18
 14a:	69 01       	movw	r12, r18
 14c:	69 01       	movw	r12, r18
 14e:	69 01       	movw	r12, r18
 150:	69 01       	movw	r12, r18
 152:	69 01       	movw	r12, r18
 154:	69 01       	movw	r12, r18
 156:	69 01       	movw	r12, r18
 158:	69 01       	movw	r12, r18
 15a:	69 01       	movw	r12, r18
 15c:	69 01       	movw	r12, r18
 15e:	69 01       	movw	r12, r18
 160:	69 01       	movw	r12, r18
 162:	59 01       	movw	r10, r18
 164:	69 01       	movw	r12, r18
 166:	69 01       	movw	r12, r18
 168:	69 01       	movw	r12, r18
 16a:	69 01       	movw	r12, r18
 16c:	69 01       	movw	r12, r18
 16e:	69 01       	movw	r12, r18
 170:	69 01       	movw	r12, r18
 172:	69 01       	movw	r12, r18
 174:	69 01       	movw	r12, r18
 176:	69 01       	movw	r12, r18
 178:	69 01       	movw	r12, r18
 17a:	69 01       	movw	r12, r18
 17c:	69 01       	movw	r12, r18
 17e:	69 01       	movw	r12, r18
 180:	69 01       	movw	r12, r18
 182:	69 01       	movw	r12, r18
 184:	69 01       	movw	r12, r18
 186:	69 01       	movw	r12, r18
 188:	69 01       	movw	r12, r18
 18a:	69 01       	movw	r12, r18
 18c:	69 01       	movw	r12, r18
 18e:	69 01       	movw	r12, r18
 190:	69 01       	movw	r12, r18
 192:	69 01       	movw	r12, r18
 194:	69 01       	movw	r12, r18
 196:	69 01       	movw	r12, r18
 198:	69 01       	movw	r12, r18
 19a:	69 01       	movw	r12, r18
 19c:	69 01       	movw	r12, r18
 19e:	69 01       	movw	r12, r18
 1a0:	69 01       	movw	r12, r18
 1a2:	57 01       	movw	r10, r14
 1a4:	69 01       	movw	r12, r18
 1a6:	69 01       	movw	r12, r18
 1a8:	69 01       	movw	r12, r18
 1aa:	69 01       	movw	r12, r18
 1ac:	69 01       	movw	r12, r18
 1ae:	69 01       	movw	r12, r18
 1b0:	69 01       	movw	r12, r18
 1b2:	69 01       	movw	r12, r18
 1b4:	69 01       	movw	r12, r18
 1b6:	69 01       	movw	r12, r18
 1b8:	69 01       	movw	r12, r18
 1ba:	69 01       	movw	r12, r18
 1bc:	69 01       	movw	r12, r18
 1be:	69 01       	movw	r12, r18
 1c0:	69 01       	movw	r12, r18
 1c2:	69 01       	movw	r12, r18
 1c4:	69 01       	movw	r12, r18
 1c6:	69 01       	movw	r12, r18
 1c8:	69 01       	movw	r12, r18
 1ca:	69 01       	movw	r12, r18
 1cc:	69 01       	movw	r12, r18
 1ce:	69 01       	movw	r12, r18
 1d0:	69 01       	movw	r12, r18
 1d2:	69 01       	movw	r12, r18
 1d4:	69 01       	movw	r12, r18
 1d6:	69 01       	movw	r12, r18
 1d8:	69 01       	movw	r12, r18
 1da:	69 01       	movw	r12, r18
 1dc:	69 01       	movw	r12, r18
 1de:	69 01       	movw	r12, r18
 1e0:	69 01       	movw	r12, r18
 1e2:	5b 01       	movw	r10, r22

000001e4 <__ctors_end>:
 1e4:	11 24       	eor	r1, r1
 1e6:	1f be       	out	0x3f, r1	; 63
 1e8:	cf ef       	ldi	r28, 0xFF	; 255
 1ea:	d1 e2       	ldi	r29, 0x21	; 33
 1ec:	de bf       	out	0x3e, r29	; 62
 1ee:	cd bf       	out	0x3d, r28	; 61
 1f0:	00 e0       	ldi	r16, 0x00	; 0
 1f2:	0c bf       	out	0x3c, r16	; 60

000001f4 <__do_copy_data>:
 1f4:	12 e0       	ldi	r17, 0x02	; 2
 1f6:	a0 e0       	ldi	r26, 0x00	; 0
 1f8:	b2 e0       	ldi	r27, 0x02	; 2
 1fa:	ec e3       	ldi	r30, 0x3C	; 60
 1fc:	f3 e0       	ldi	r31, 0x03	; 3
 1fe:	00 e0       	ldi	r16, 0x00	; 0
 200:	0b bf       	out	0x3b, r16	; 59
 202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x14>
 204:	07 90       	elpm	r0, Z+
 206:	0d 92       	st	X+, r0
 208:	a2 30       	cpi	r26, 0x02	; 2
 20a:	b1 07       	cpc	r27, r17
 20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0x10>
 20e:	66 d0       	rcall	.+204    	; 0x2dc <main>
 210:	93 c0       	rjmp	.+294    	; 0x338 <_exit>

00000212 <__bad_interrupt>:
 212:	f6 ce       	rjmp	.-532    	; 0x0 <__vectors>

00000214 <__vector_25>:
	UART_out(command & m); // Command 7-bit
	UART_out(tone & m); // Note 7bit
	UART_out(volume & m); // Velocity 7 bit
	
	// See Midi command table for exact bits to input.
}
 214:	1f 92       	push	r1
 216:	0f 92       	push	r0
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	0f 92       	push	r0
 21c:	11 24       	eor	r1, r1
 21e:	8f 93       	push	r24
 220:	9f 93       	push	r25
 222:	80 91 c6 00 	lds	r24, 0x00C6
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	90 93 01 02 	sts	0x0201, r25
 22c:	80 93 00 02 	sts	0x0200, r24
 230:	9f 91       	pop	r25
 232:	8f 91       	pop	r24
 234:	0f 90       	pop	r0
 236:	0f be       	out	0x3f, r0	; 63
 238:	0f 90       	pop	r0
 23a:	1f 90       	pop	r1
 23c:	18 95       	reti

0000023e <UART_out>:
 23e:	e0 ec       	ldi	r30, 0xC0	; 192
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	90 81       	ld	r25, Z
 244:	95 ff       	sbrs	r25, 5
 246:	fd cf       	rjmp	.-6      	; 0x242 <UART_out+0x4>
 248:	80 93 c6 00 	sts	0x00C6, r24
 24c:	08 95       	ret

0000024e <Init_UART0>:
 24e:	83 e3       	ldi	r24, 0x33	; 51
 250:	80 93 c4 00 	sts	0x00C4, r24
 254:	10 92 c5 00 	sts	0x00C5, r1
 258:	10 92 c0 00 	sts	0x00C0, r1
 25c:	88 e9       	ldi	r24, 0x98	; 152
 25e:	80 93 c1 00 	sts	0x00C1, r24
 262:	86 e0       	ldi	r24, 0x06	; 6
 264:	80 93 c2 00 	sts	0x00C2, r24
 268:	08 95       	ret

0000026a <Init_ports>:

void Init_ports(void){
	// Hard coded setup
	
	// Set up port B LEDS
	DDRB = 0xFF; // No inputs, all ports as outputs
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	84 b9       	out	0x04, r24	; 4
	PORTB = 0xFF; // All LEDS are off
 26e:	85 b9       	out	0x05, r24	; 5
	
	// Set up port D Buttons
	DDRD = 0x00;
 270:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0xFF; // Set pull up on the inputs
 272:	8b b9       	out	0x0b, r24	; 11
 274:	08 95       	ret

00000276 <Conversion>:
}

uint8_t Conversion(uint8_t pressed, uint8_t switches)
{
 276:	a6 2f       	mov	r26, r22
	uint8_t converted;
	uint8_t mask = 0b00000001;
	switch(pressed)
 278:	48 2f       	mov	r20, r24
 27a:	50 e0       	ldi	r21, 0x00	; 0
 27c:	41 50       	subi	r20, 0x01	; 1
 27e:	51 09       	sbc	r21, r1
 280:	40 38       	cpi	r20, 0x80	; 128
 282:	51 05       	cpc	r21, r1
 284:	30 f5       	brcc	.+76     	; 0x2d2 <Conversion+0x5c>
 286:	4e 58       	subi	r20, 0x8E	; 142
 288:	5f 4f       	sbci	r21, 0xFF	; 255
 28a:	fa 01       	movw	r30, r20
 28c:	4f c0       	rjmp	.+158    	; 0x32c <__tablejump2__>
		break;				// C
		case 0x03:
		converted = 1;
		break;				// C# or Db
		case 0x02:
		converted = 2;
 28e:	b2 e0       	ldi	r27, 0x02	; 2
		break;				// D
 290:	20 c0       	rjmp	.+64     	; 0x2d2 <Conversion+0x5c>
		case 0x06:
		converted = 3;
 292:	b3 e0       	ldi	r27, 0x03	; 3
		break;				// D# or Eb
 294:	1e c0       	rjmp	.+60     	; 0x2d2 <Conversion+0x5c>
		case 0x04:
		converted = 4;
 296:	b4 e0       	ldi	r27, 0x04	; 4
		break;				// E
 298:	1c c0       	rjmp	.+56     	; 0x2d2 <Conversion+0x5c>
		case 0x08:
		converted = 5;
 29a:	b5 e0       	ldi	r27, 0x05	; 5
		break;				// F
 29c:	1a c0       	rjmp	.+52     	; 0x2d2 <Conversion+0x5c>
		case 0x18:
		converted = 6;
 29e:	b6 e0       	ldi	r27, 0x06	; 6
		break;				// F# or Gb
 2a0:	18 c0       	rjmp	.+48     	; 0x2d2 <Conversion+0x5c>
		case 0x10:
		converted = 7;
 2a2:	b7 e0       	ldi	r27, 0x07	; 7
		break;				// G
 2a4:	16 c0       	rjmp	.+44     	; 0x2d2 <Conversion+0x5c>
		case 0x30:
		converted = 8;
 2a6:	b8 e0       	ldi	r27, 0x08	; 8
		break;				// G# or Ab
 2a8:	14 c0       	rjmp	.+40     	; 0x2d2 <Conversion+0x5c>
		case 0x20:
		converted = 9;
 2aa:	b9 e0       	ldi	r27, 0x09	; 9
		break;				// A
 2ac:	12 c0       	rjmp	.+36     	; 0x2d2 <Conversion+0x5c>
		case 0x60:
		converted = 10;
 2ae:	ba e0       	ldi	r27, 0x0A	; 10
		break;				// A# or Bb
 2b0:	10 c0       	rjmp	.+32     	; 0x2d2 <Conversion+0x5c>
		case 0x40:
		converted = 11;
 2b2:	bb e0       	ldi	r27, 0x0B	; 11
		break;				// B
 2b4:	0e c0       	rjmp	.+28     	; 0x2d2 <Conversion+0x5c>
		case 0x80:
		converted = 12;
 2b6:	bc e0       	ldi	r27, 0x0C	; 12
		break;				// C
 2b8:	0c c0       	rjmp	.+24     	; 0x2d2 <Conversion+0x5c>
		break;
	}
	
	for(uint8_t i = 0; i < 7; i++)
	{
		if((switches & mask) == mask)
 2ba:	39 2f       	mov	r19, r25
 2bc:	3a 23       	and	r19, r26
 2be:	39 13       	cpse	r19, r25
 2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <Conversion+0x4e>
		{
			converted += 12;
 2c2:	b4 5f       	subi	r27, 0xF4	; 244
		}
		mask = mask << 1;
 2c4:	99 0f       	add	r25, r25
 2c6:	21 50       	subi	r18, 0x01	; 1
		break;				// C
		default:
		break;
	}
	
	for(uint8_t i = 0; i < 7; i++)
 2c8:	c1 f7       	brne	.-16     	; 0x2ba <Conversion+0x44>
 2ca:	06 c0       	rjmp	.+12     	; 0x2d8 <Conversion+0x62>
	uint8_t converted;
	uint8_t mask = 0b00000001;
	switch(pressed)
	{
		case 0x01:
		converted = 0;
 2cc:	b0 e0       	ldi	r27, 0x00	; 0
 2ce:	01 c0       	rjmp	.+2      	; 0x2d2 <Conversion+0x5c>
		break;				// C
		case 0x03:
		converted = 1;
 2d0:	b1 e0       	ldi	r27, 0x01	; 1
	DDRD = 0x00;
	PORTD = 0xFF; // Set pull up on the inputs
}

uint8_t Conversion(uint8_t pressed, uint8_t switches)
{
 2d2:	27 e0       	ldi	r18, 0x07	; 7
 2d4:	91 e0       	ldi	r25, 0x01	; 1
 2d6:	f1 cf       	rjmp	.-30     	; 0x2ba <Conversion+0x44>
			converted += 12;
		}
		mask = mask << 1;
	}
	return converted;
 2d8:	8b 2f       	mov	r24, r27
 2da:	08 95       	ret

000002dc <main>:
// global variables
volatile uint16_t rx_ch = 0xFF;

int main(void)
{
	Init_ports();
 2dc:	c6 df       	rcall	.-116    	; 0x26a <Init_ports>
	Init_UART0(9600);
 2de:	80 e8       	ldi	r24, 0x80	; 128
 2e0:	95 e2       	ldi	r25, 0x25	; 37
 2e2:	b5 df       	rcall	.-150    	; 0x24e <Init_UART0>
	sei();
 2e4:	78 94       	sei
	uint8_t previus = 0x00;
 2e6:	20 e0       	ldi	r18, 0x00	; 0
 2e8:	01 c0       	rjmp	.+2      	; 0x2ec <main+0x10>

// global variables
volatile uint16_t rx_ch = 0xFF;

int main(void)
{
 2ea:	2c 2f       	mov	r18, r28
	
	while
	(1)
	{
		
		current = ~PIND;
 2ec:	99 b1       	in	r25, 0x09	; 9
 2ee:	c9 2f       	mov	r28, r25
 2f0:	c0 95       	com	r28
		PORTB = ~current; // rx_ch;
 2f2:	95 b9       	out	0x05, r25	; 5
		
		change = current^previus;
 2f4:	92 2f       	mov	r25, r18
 2f6:	9c 27       	eor	r25, r28
		
		if(current & change) // Note on
 2f8:	d9 2f       	mov	r29, r25
 2fa:	dc 23       	and	r29, r28
 2fc:	51 f0       	breq	.+20     	; 0x312 <main+0x36>
		{
			UART_out(0b10010001); // Command
 2fe:	81 e9       	ldi	r24, 0x91	; 145
 300:	9e df       	rcall	.-196    	; 0x23e <UART_out>
			UART_out(60+Conversion(current & change, 0x00)); // Note 7bit
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	8d 2f       	mov	r24, r29
 306:	b7 df       	rcall	.-146    	; 0x276 <Conversion>
 308:	84 5c       	subi	r24, 0xC4	; 196
 30a:	99 df       	rcall	.-206    	; 0x23e <UART_out>
			UART_out(0b01001000); // Velocity 7 bit
 30c:	88 e4       	ldi	r24, 0x48	; 72
 30e:	97 df       	rcall	.-210    	; 0x23e <UART_out>
 310:	ec cf       	rjmp	.-40     	; 0x2ea <main+0xe>
		}
		else if(previus & change) // Note off
 312:	d9 2f       	mov	r29, r25
 314:	d2 23       	and	r29, r18
 316:	49 f3       	breq	.-46     	; 0x2ea <main+0xe>
		{
			UART_out(0b10000001); // Command
 318:	81 e8       	ldi	r24, 0x81	; 129
 31a:	91 df       	rcall	.-222    	; 0x23e <UART_out>
			UART_out(60+Conversion(previus & change, 0x00)); // Note 7bit
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	8d 2f       	mov	r24, r29
 320:	aa df       	rcall	.-172    	; 0x276 <Conversion>
 322:	84 5c       	subi	r24, 0xC4	; 196
 324:	8c df       	rcall	.-232    	; 0x23e <UART_out>
			UART_out(0b01001000); // Velocity 7 bit
 326:	88 e4       	ldi	r24, 0x48	; 72
 328:	8a df       	rcall	.-236    	; 0x23e <UART_out>
 32a:	df cf       	rjmp	.-66     	; 0x2ea <main+0xe>

0000032c <__tablejump2__>:
 32c:	ee 0f       	add	r30, r30
 32e:	ff 1f       	adc	r31, r31

00000330 <__tablejump__>:
 330:	05 90       	lpm	r0, Z+
 332:	f4 91       	lpm	r31, Z
 334:	e0 2d       	mov	r30, r0
 336:	19 94       	eijmp

00000338 <_exit>:
 338:	f8 94       	cli

0000033a <__stop_program>:
 33a:	ff cf       	rjmp	.-2      	; 0x33a <__stop_program>
