
Midiproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  000003bc  00000450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000507  00800204  00800204  00000454  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
<<<<<<< HEAD
  5 .debug_info   0000076a  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003e7  00000000  00000000  00000cde  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b49  00000000  00000000  000010c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000022c  00000000  00000000  00001c10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00008bbd  00000000  00000000  00001e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006b8  00000000  00000000  0000a9f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  0000b0b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000037d9  00000000  00000000  0000b171  2**0
=======
  5 .debug_info   00000795  00000000  00000000  0000064a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000393  00000000  00000000  00000ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b61  00000000  00000000  00001172  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000022c  00000000  00000000  00001cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00008b88  00000000  00000000  00001f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006ab  00000000  00000000  0000aa88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  0000b133  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000384b  00000000  00000000  0000b1f3  2**0
>>>>>>> origin/master
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
<<<<<<< HEAD
  44:	7a c1       	rjmp	.+756    	; 0x33a <__vector_17>
=======
  44:	26 c1       	rjmp	.+588    	; 0x292 <__vector_17>
>>>>>>> origin/master
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
<<<<<<< HEAD
  5c:	63 c1       	rjmp	.+710    	; 0x324 <__vector_23>
=======
  5c:	0d c2       	rjmp	.+1050   	; 0x478 <__vector_23>
>>>>>>> origin/master
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	73 c0       	rjmp	.+230    	; 0x14c <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
<<<<<<< HEAD
  74:	32 c1       	rjmp	.+612    	; 0x2da <__vector_29>
=======
  74:	dc c1       	rjmp	.+952    	; 0x42e <__vector_29>
>>>>>>> origin/master
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec eb       	ldi	r30, 0xBC	; 188
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 30       	cpi	r26, 0x04	; 4
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	27 e0       	ldi	r18, 0x07	; 7
 110:	a4 e0       	ldi	r26, 0x04	; 4
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ab 30       	cpi	r26, 0x0B	; 11
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
<<<<<<< HEAD
 11e:	b9 d0       	rcall	.+370    	; 0x292 <main>
 120:	4b c1       	rjmp	.+662    	; 0x3b8 <_exit>
=======
 11e:	4d d1       	rcall	.+666    	; 0x3ba <main>
 120:	b6 c1       	rjmp	.+876    	; 0x48e <_exit>
>>>>>>> origin/master

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <Init_ports>:
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	84 b9       	out	0x04, r24	; 4
 128:	85 b9       	out	0x05, r24	; 5
 12a:	1a b8       	out	0x0a, r1	; 10
 12c:	8b b9       	out	0x0b, r24	; 11
 12e:	08 95       	ret

00000130 <Init_UART0>:
 130:	83 e3       	ldi	r24, 0x33	; 51
 132:	80 93 c4 00 	sts	0x00C4, r24
 136:	10 92 c5 00 	sts	0x00C5, r1
 13a:	10 92 c0 00 	sts	0x00C0, r1
 13e:	88 e9       	ldi	r24, 0x98	; 152
 140:	80 93 c1 00 	sts	0x00C1, r24
 144:	86 e0       	ldi	r24, 0x06	; 6
 146:	80 93 c2 00 	sts	0x00C2, r24
 14a:	08 95       	ret

0000014c <__vector_25>:
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	80 91 c6 00 	lds	r24, 0x00C6
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	90 93 01 02 	sts	0x0201, r25
 164:	80 93 00 02 	sts	0x0200, r24
 168:	9f 91       	pop	r25
 16a:	8f 91       	pop	r24
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <UART_out>:
 176:	e0 ec       	ldi	r30, 0xC0	; 192
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	90 81       	ld	r25, Z
 17c:	95 ff       	sbrs	r25, 5
 17e:	fd cf       	rjmp	.-6      	; 0x17a <UART_out+0x4>
 180:	80 93 c6 00 	sts	0x00C6, r24
 184:	08 95       	ret

00000186 <MIDI_send>:
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	d6 2f       	mov	r29, r22
 18c:	c4 2f       	mov	r28, r20
 18e:	f3 df       	rcall	.-26     	; 0x176 <UART_out>
 190:	8d 2f       	mov	r24, r29
 192:	f1 df       	rcall	.-30     	; 0x176 <UART_out>
 194:	8c 2f       	mov	r24, r28
 196:	86 95       	lsr	r24
 198:	ee df       	rcall	.-36     	; 0x176 <UART_out>
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <MIDI_Conversion>:
 1a0:	90 91 04 02 	lds	r25, 0x0204
 1a4:	93 70       	andi	r25, 0x03	; 3
 1a6:	88 30       	cpi	r24, 0x08	; 8
 1a8:	49 f1       	breq	.+82     	; 0x1fc <MIDI_Conversion+0x5c>
 1aa:	40 f4       	brcc	.+16     	; 0x1bc <MIDI_Conversion+0x1c>
 1ac:	82 30       	cpi	r24, 0x02	; 2
 1ae:	c1 f0       	breq	.+48     	; 0x1e0 <MIDI_Conversion+0x40>
 1b0:	84 30       	cpi	r24, 0x04	; 4
 1b2:	e9 f0       	breq	.+58     	; 0x1ee <MIDI_Conversion+0x4e>
 1b4:	81 30       	cpi	r24, 0x01	; 1
 1b6:	09 f0       	breq	.+2      	; 0x1ba <MIDI_Conversion+0x1a>
 1b8:	44 c0       	rjmp	.+136    	; 0x242 <MIDI_Conversion+0xa2>
 1ba:	0b c0       	rjmp	.+22     	; 0x1d2 <MIDI_Conversion+0x32>
 1bc:	80 32       	cpi	r24, 0x20	; 32
 1be:	61 f1       	breq	.+88     	; 0x218 <MIDI_Conversion+0x78>
 1c0:	18 f4       	brcc	.+6      	; 0x1c8 <MIDI_Conversion+0x28>
 1c2:	80 31       	cpi	r24, 0x10	; 16
 1c4:	11 f1       	breq	.+68     	; 0x20a <MIDI_Conversion+0x6a>
 1c6:	3d c0       	rjmp	.+122    	; 0x242 <MIDI_Conversion+0xa2>
 1c8:	80 34       	cpi	r24, 0x40	; 64
 1ca:	69 f1       	breq	.+90     	; 0x226 <MIDI_Conversion+0x86>
 1cc:	80 38       	cpi	r24, 0x80	; 128
 1ce:	91 f1       	breq	.+100    	; 0x234 <MIDI_Conversion+0x94>
 1d0:	38 c0       	rjmp	.+112    	; 0x242 <MIDI_Conversion+0xa2>
 1d2:	89 2f       	mov	r24, r25
 1d4:	88 0f       	add	r24, r24
 1d6:	89 0f       	add	r24, r25
 1d8:	88 0f       	add	r24, r24
 1da:	88 0f       	add	r24, r24
 1dc:	80 5d       	subi	r24, 0xD0	; 208
 1de:	08 95       	ret
 1e0:	89 2f       	mov	r24, r25
 1e2:	88 0f       	add	r24, r24
 1e4:	89 0f       	add	r24, r25
 1e6:	88 0f       	add	r24, r24
 1e8:	88 0f       	add	r24, r24
 1ea:	8e 5c       	subi	r24, 0xCE	; 206
 1ec:	08 95       	ret
 1ee:	89 2f       	mov	r24, r25
 1f0:	88 0f       	add	r24, r24
 1f2:	89 0f       	add	r24, r25
 1f4:	88 0f       	add	r24, r24
 1f6:	88 0f       	add	r24, r24
 1f8:	8c 5c       	subi	r24, 0xCC	; 204
 1fa:	08 95       	ret
 1fc:	89 2f       	mov	r24, r25
 1fe:	88 0f       	add	r24, r24
 200:	89 0f       	add	r24, r25
 202:	88 0f       	add	r24, r24
 204:	88 0f       	add	r24, r24
 206:	8b 5c       	subi	r24, 0xCB	; 203
 208:	08 95       	ret
 20a:	89 2f       	mov	r24, r25
 20c:	88 0f       	add	r24, r24
 20e:	89 0f       	add	r24, r25
 210:	88 0f       	add	r24, r24
 212:	88 0f       	add	r24, r24
 214:	89 5c       	subi	r24, 0xC9	; 201
 216:	08 95       	ret
 218:	89 2f       	mov	r24, r25
 21a:	88 0f       	add	r24, r24
 21c:	89 0f       	add	r24, r25
 21e:	88 0f       	add	r24, r24
 220:	88 0f       	add	r24, r24
 222:	87 5c       	subi	r24, 0xC7	; 199
 224:	08 95       	ret
 226:	89 2f       	mov	r24, r25
 228:	88 0f       	add	r24, r24
 22a:	89 0f       	add	r24, r25
 22c:	88 0f       	add	r24, r24
 22e:	88 0f       	add	r24, r24
 230:	85 5c       	subi	r24, 0xC5	; 197
 232:	08 95       	ret
 234:	89 2f       	mov	r24, r25
 236:	88 0f       	add	r24, r24
 238:	89 0f       	add	r24, r25
 23a:	88 0f       	add	r24, r24
 23c:	88 0f       	add	r24, r24
 23e:	84 5c       	subi	r24, 0xC4	; 196
 240:	08 95       	ret
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	08 95       	ret

00000246 <REC_ISR>:
	
	
}

void REC_ISR(uint16_t time){
	if(PLAY){
 246:	80 91 05 02 	lds	r24, 0x0205
 24a:	88 23       	and	r24, r24
 24c:	09 f1       	breq	.+66     	; 0x290 <REC_ISR+0x4a>
		//MIDI_send(com[rec_index], tones[rec_index], vol[rec_index]);
		rec_index++;
<<<<<<< HEAD
 24e:	e0 91 06 02 	lds	r30, 0x0206
 252:	ef 5f       	subi	r30, 0xFF	; 255
 254:	e0 93 06 02 	sts	0x0206, r30
=======
 24e:	e0 91 07 02 	lds	r30, 0x0207
 252:	ef 5f       	subi	r30, 0xFF	; 255
 254:	e0 93 07 02 	sts	0x0207, r30
>>>>>>> origin/master
		
		// Last record will be of time zero
		// Restart the playback in that case
		if(rec_time[rec_index] == 0){
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	ee 0f       	add	r30, r30
 25c:	ff 1f       	adc	r31, r31
 25e:	e5 5f       	subi	r30, 0xF5	; 245
 260:	fb 4f       	sbci	r31, 0xFB	; 251
 262:	80 81       	ld	r24, Z
 264:	91 81       	ldd	r25, Z+1	; 0x01
 266:	89 2b       	or	r24, r25
 268:	31 f4       	brne	.+12     	; 0x276 <REC_ISR+0x30>
			rec_index = 0;
<<<<<<< HEAD
 26a:	10 92 06 02 	sts	0x0206, r1
			software_time = 0;//TIME_reset();
 26e:	10 92 0a 02 	sts	0x020A, r1
 272:	10 92 09 02 	sts	0x0209, r1
		}

		software_comp = rec_time[rec_index]; //TIME_Set_ISR(rec_time[rec_index]);
 276:	e0 91 06 02 	lds	r30, 0x0206
=======
 26a:	10 92 07 02 	sts	0x0207, r1
			software_time = 0;//TIME_reset();
 26e:	10 92 0b 02 	sts	0x020B, r1
 272:	10 92 0a 02 	sts	0x020A, r1
		}

		software_comp = rec_time[rec_index]; //TIME_Set_ISR(rec_time[rec_index]);
 276:	e0 91 07 02 	lds	r30, 0x0207
>>>>>>> origin/master
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	ee 0f       	add	r30, r30
 27e:	ff 1f       	adc	r31, r31
 280:	e5 5f       	subi	r30, 0xF5	; 245
 282:	fb 4f       	sbci	r31, 0xFB	; 251
 284:	80 81       	ld	r24, Z
 286:	91 81       	ldd	r25, Z+1	; 0x01
 288:	90 93 08 02 	sts	0x0208, r25
 28c:	80 93 07 02 	sts	0x0207, r24
 290:	08 95       	ret

<<<<<<< HEAD
00000292 <main>:

void init_Timer1(void)				// for recording
{
	TCCR1A = 0b00000000;			// normal mode
	TCCR1B = 0b00000011;			// prescaler 64
	OCR1A = 125;					// output compare, 65525*1024/(8*10^6) = 8.4s at max
 292:	48 df       	rcall	.-368    	; 0x124 <Init_ports>
 294:	80 e8       	ldi	r24, 0x80	; 128
 296:	95 e2       	ldi	r25, 0x25	; 37
 298:	4b df       	rcall	.-362    	; 0x130 <Init_UART0>
 29a:	78 94       	sei
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	df e7       	ldi	r29, 0x7F	; 127
 2a0:	01 c0       	rjmp	.+2      	; 0x2a4 <main+0x12>
 2a2:	9c 2f       	mov	r25, r28
 2a4:	c9 b1       	in	r28, 0x09	; 9
 2a6:	c0 95       	com	r28
 2a8:	29 2f       	mov	r18, r25
 2aa:	2c 27       	eor	r18, r28
 2ac:	82 2f       	mov	r24, r18
 2ae:	8c 23       	and	r24, r28
 2b0:	49 f0       	breq	.+18     	; 0x2c4 <main+0x32>
 2b2:	90 91 04 02 	lds	r25, 0x0204
 2b6:	74 df       	rcall	.-280    	; 0x1a0 <MIDI_Conversion>
 2b8:	40 91 02 02 	lds	r20, 0x0202
 2bc:	68 2f       	mov	r22, r24
 2be:	81 e9       	ldi	r24, 0x91	; 145
 2c0:	62 df       	rcall	.-316    	; 0x186 <MIDI_send>
 2c2:	ef cf       	rjmp	.-34     	; 0x2a2 <main+0x10>
 2c4:	82 2f       	mov	r24, r18
 2c6:	89 23       	and	r24, r25
 2c8:	61 f3       	breq	.-40     	; 0x2a2 <main+0x10>
 2ca:	d5 b9       	out	0x05, r29	; 5
 2cc:	69 df       	rcall	.-302    	; 0x1a0 <MIDI_Conversion>
 2ce:	40 91 02 02 	lds	r20, 0x0202
 2d2:	68 2f       	mov	r22, r24
 2d4:	80 e8       	ldi	r24, 0x80	; 128
 2d6:	57 df       	rcall	.-338    	; 0x186 <MIDI_send>
 2d8:	e4 cf       	rjmp	.-56     	; 0x2a2 <main+0x10>

000002da <__vector_29>:
 2da:	1f 92       	push	r1
 2dc:	0f 92       	push	r0
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	0f 92       	push	r0
 2e2:	11 24       	eor	r1, r1
 2e4:	0b b6       	in	r0, 0x3b	; 59
 2e6:	0f 92       	push	r0
 2e8:	8f 93       	push	r24
 2ea:	9f 93       	push	r25
 2ec:	ef 93       	push	r30
 2ee:	ff 93       	push	r31
 2f0:	80 91 79 00 	lds	r24, 0x0079
 2f4:	80 93 02 02 	sts	0x0202, r24
 2f8:	ec e7       	ldi	r30, 0x7C	; 124
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	90 81       	ld	r25, Z
 2fe:	80 91 04 02 	lds	r24, 0x0204
 302:	8c 70       	andi	r24, 0x0C	; 12
 304:	86 95       	lsr	r24
 306:	86 95       	lsr	r24
 308:	90 7e       	andi	r25, 0xE0	; 224
 30a:	89 2b       	or	r24, r25
 30c:	80 83       	st	Z, r24
 30e:	ff 91       	pop	r31
 310:	ef 91       	pop	r30
 312:	9f 91       	pop	r25
 314:	8f 91       	pop	r24
 316:	0f 90       	pop	r0
 318:	0b be       	out	0x3b, r0	; 59
 31a:	0f 90       	pop	r0
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	0f 90       	pop	r0
 320:	1f 90       	pop	r1
 322:	18 95       	reti

00000324 <__vector_23>:
 324:	1f 92       	push	r1
 326:	0f 92       	push	r0
 328:	0f b6       	in	r0, 0x3f	; 63
 32a:	0f 92       	push	r0
 32c:	11 24       	eor	r1, r1
 32e:	16 bc       	out	0x26, r1	; 38
 330:	0f 90       	pop	r0
 332:	0f be       	out	0x3f, r0	; 63
 334:	0f 90       	pop	r0
 336:	1f 90       	pop	r1
 338:	18 95       	reti

0000033a <__vector_17>:
=======
00000292 <__vector_17>:
	TCCR1B = 0b00000011;			// prescaler 64
	OCR1A = 125;					// output compare, 65525*1024/(8*10^6) = 8.4s at max
>>>>>>> origin/master
}

ISR(TIMER1_COMPA_vect)
{
<<<<<<< HEAD
 33a:	1f 92       	push	r1
 33c:	0f 92       	push	r0
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	0f 92       	push	r0
 342:	11 24       	eor	r1, r1
 344:	0b b6       	in	r0, 0x3b	; 59
 346:	0f 92       	push	r0
 348:	2f 93       	push	r18
 34a:	3f 93       	push	r19
 34c:	4f 93       	push	r20
 34e:	5f 93       	push	r21
 350:	6f 93       	push	r22
 352:	7f 93       	push	r23
 354:	8f 93       	push	r24
 356:	9f 93       	push	r25
 358:	af 93       	push	r26
 35a:	bf 93       	push	r27
 35c:	ef 93       	push	r30
 35e:	ff 93       	push	r31
	software_time++;
 360:	80 91 09 02 	lds	r24, 0x0209
 364:	90 91 0a 02 	lds	r25, 0x020A
 368:	01 96       	adiw	r24, 0x01	; 1
 36a:	90 93 0a 02 	sts	0x020A, r25
 36e:	80 93 09 02 	sts	0x0209, r24
	if(software_time == software_comp)
 372:	20 91 09 02 	lds	r18, 0x0209
 376:	30 91 0a 02 	lds	r19, 0x020A
 37a:	80 91 07 02 	lds	r24, 0x0207
 37e:	90 91 08 02 	lds	r25, 0x0208
 382:	28 17       	cp	r18, r24
 384:	39 07       	cpc	r19, r25
 386:	29 f4       	brne	.+10     	; 0x392 <__vector_17+0x58>
	{
		REC_ISR(software_time);
 388:	80 91 09 02 	lds	r24, 0x0209
 38c:	90 91 0a 02 	lds	r25, 0x020A
 390:	5a df       	rcall	.-332    	; 0x246 <REC_ISR>
	}
}
 392:	ff 91       	pop	r31
 394:	ef 91       	pop	r30
 396:	bf 91       	pop	r27
 398:	af 91       	pop	r26
 39a:	9f 91       	pop	r25
 39c:	8f 91       	pop	r24
 39e:	7f 91       	pop	r23
 3a0:	6f 91       	pop	r22
 3a2:	5f 91       	pop	r21
 3a4:	4f 91       	pop	r20
 3a6:	3f 91       	pop	r19
 3a8:	2f 91       	pop	r18
 3aa:	0f 90       	pop	r0
 3ac:	0b be       	out	0x3b, r0	; 59
 3ae:	0f 90       	pop	r0
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	0f 90       	pop	r0
 3b4:	1f 90       	pop	r1
 3b6:	18 95       	reti

000003b8 <_exit>:
 3b8:	f8 94       	cli

000003ba <__stop_program>:
 3ba:	ff cf       	rjmp	.-2      	; 0x3ba <__stop_program>
=======
 292:	1f 92       	push	r1
 294:	0f 92       	push	r0
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	0f 92       	push	r0
 29a:	11 24       	eor	r1, r1
 29c:	0b b6       	in	r0, 0x3b	; 59
 29e:	0f 92       	push	r0
 2a0:	2f 93       	push	r18
 2a2:	3f 93       	push	r19
 2a4:	4f 93       	push	r20
 2a6:	5f 93       	push	r21
 2a8:	6f 93       	push	r22
 2aa:	7f 93       	push	r23
 2ac:	8f 93       	push	r24
 2ae:	9f 93       	push	r25
 2b0:	af 93       	push	r26
 2b2:	bf 93       	push	r27
 2b4:	ef 93       	push	r30
 2b6:	ff 93       	push	r31
	software_time++;
 2b8:	80 91 0a 02 	lds	r24, 0x020A
 2bc:	90 91 0b 02 	lds	r25, 0x020B
 2c0:	01 96       	adiw	r24, 0x01	; 1
 2c2:	90 93 0b 02 	sts	0x020B, r25
 2c6:	80 93 0a 02 	sts	0x020A, r24
	if(software_time == software_comp)
 2ca:	20 91 0a 02 	lds	r18, 0x020A
 2ce:	30 91 0b 02 	lds	r19, 0x020B
 2d2:	80 91 08 02 	lds	r24, 0x0208
 2d6:	90 91 09 02 	lds	r25, 0x0209
 2da:	28 17       	cp	r18, r24
 2dc:	39 07       	cpc	r19, r25
 2de:	29 f4       	brne	.+10     	; 0x2ea <__vector_17+0x58>
	{
		REC_ISR(software_time);
 2e0:	80 91 0a 02 	lds	r24, 0x020A
 2e4:	90 91 0b 02 	lds	r25, 0x020B
 2e8:	ae df       	rcall	.-164    	; 0x246 <REC_ISR>
	}
}
 2ea:	ff 91       	pop	r31
 2ec:	ef 91       	pop	r30
 2ee:	bf 91       	pop	r27
 2f0:	af 91       	pop	r26
 2f2:	9f 91       	pop	r25
 2f4:	8f 91       	pop	r24
 2f6:	7f 91       	pop	r23
 2f8:	6f 91       	pop	r22
 2fa:	5f 91       	pop	r21
 2fc:	4f 91       	pop	r20
 2fe:	3f 91       	pop	r19
 300:	2f 91       	pop	r18
 302:	0f 90       	pop	r0
 304:	0b be       	out	0x3b, r0	; 59
 306:	0f 90       	pop	r0
 308:	0f be       	out	0x3f, r0	; 63
 30a:	0f 90       	pop	r0
 30c:	1f 90       	pop	r1
 30e:	18 95       	reti

00000310 <REC_add>:
	// There will be no new interrupt if PLAY == 0
}

void REC_add(uint8_t command, uint8_t tone){
	
	com[rec_index]  = command;
 310:	90 91 07 02 	lds	r25, 0x0207
 314:	29 2f       	mov	r18, r25
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	f9 01       	movw	r30, r18
 31a:	e4 5f       	subi	r30, 0xF4	; 244
 31c:	fd 4f       	sbci	r31, 0xFD	; 253
 31e:	80 83       	st	Z, r24
	tones[rec_index] = tone;
 320:	f9 01       	movw	r30, r18
 322:	e4 5f       	subi	r30, 0xF4	; 244
 324:	fc 4f       	sbci	r31, 0xFC	; 252
 326:	60 83       	st	Z, r22
	vol[rec_index] = volume;
 328:	80 91 02 02 	lds	r24, 0x0202
 32c:	f9 01       	movw	r30, r18
 32e:	e4 5f       	subi	r30, 0xF4	; 244
 330:	f9 4f       	sbci	r31, 0xF9	; 249
 332:	80 83       	st	Z, r24
	rec_time[rec_index] = 0; //time_read();
 334:	f9 01       	movw	r30, r18
 336:	ee 0f       	add	r30, r30
 338:	ff 1f       	adc	r31, r31
 33a:	e4 5f       	subi	r30, 0xF4	; 244
 33c:	fb 4f       	sbci	r31, 0xFB	; 251
 33e:	11 82       	std	Z+1, r1	; 0x01
 340:	10 82       	st	Z, r1
	
	rec_index++;	
 342:	9f 5f       	subi	r25, 0xFF	; 255
 344:	90 93 07 02 	sts	0x0207, r25
 348:	08 95       	ret

0000034a <REC_start>:
}

void REC_start(void){
	REC = 1;
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	80 93 06 02 	sts	0x0206, r24
	rec_index = 0;
 350:	10 92 07 02 	sts	0x0207, r1
 354:	08 95       	ret

00000356 <REC_stop>:
	//time_reset();
}

void REC_stop(void){
	com[rec_index]  = 0;
 356:	80 91 07 02 	lds	r24, 0x0207
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	fc 01       	movw	r30, r24
 35e:	e4 5f       	subi	r30, 0xF4	; 244
 360:	fd 4f       	sbci	r31, 0xFD	; 253
 362:	10 82       	st	Z, r1
	tones[rec_index] = 0;
 364:	fc 01       	movw	r30, r24
 366:	e4 5f       	subi	r30, 0xF4	; 244
 368:	fc 4f       	sbci	r31, 0xFC	; 252
 36a:	10 82       	st	Z, r1
	vol[rec_index] = 0;
 36c:	fc 01       	movw	r30, r24
 36e:	e4 5f       	subi	r30, 0xF4	; 244
 370:	f9 4f       	sbci	r31, 0xF9	; 249
 372:	10 82       	st	Z, r1
	rec_time[rec_index] = 0;
 374:	fc 01       	movw	r30, r24
 376:	ee 0f       	add	r30, r30
 378:	ff 1f       	adc	r31, r31
 37a:	e4 5f       	subi	r30, 0xF4	; 244
 37c:	fb 4f       	sbci	r31, 0xFB	; 251
 37e:	11 82       	std	Z+1, r1	; 0x01
 380:	10 82       	st	Z, r1
	REC = 0;
 382:	10 92 06 02 	sts	0x0206, r1
 386:	08 95       	ret

00000388 <REC_process>:
{
	software_time = 0;
}


void REC_process(uint8_t switches, uint8_t command, uint8_t tone){
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	c6 2f       	mov	r28, r22
 38e:	d4 2f       	mov	r29, r20
	
	if(REC == 1){ // If recording already
 390:	90 91 06 02 	lds	r25, 0x0206
 394:	91 30       	cpi	r25, 0x01	; 1
 396:	41 f4       	brne	.+16     	; 0x3a8 <REC_process+0x20>
		if(switches & 0x80){
 398:	88 23       	and	r24, r24
 39a:	24 f4       	brge	.+8      	; 0x3a4 <REC_process+0x1c>
			REC_add(command, tone);
 39c:	64 2f       	mov	r22, r20
 39e:	8c 2f       	mov	r24, r28
 3a0:	b7 df       	rcall	.-146    	; 0x310 <REC_add>
 3a2:	08 c0       	rjmp	.+16     	; 0x3b4 <REC_process+0x2c>
		}
		else REC_stop();
 3a4:	d8 df       	rcall	.-80     	; 0x356 <REC_stop>
 3a6:	06 c0       	rjmp	.+12     	; 0x3b4 <REC_process+0x2c>
	}
	
	else{
		if(switches & 0x80){ // Start recording and save first command
 3a8:	88 23       	and	r24, r24
 3aa:	24 f4       	brge	.+8      	; 0x3b4 <REC_process+0x2c>
			 REC_start();
 3ac:	ce df       	rcall	.-100    	; 0x34a <REC_start>
			 REC_add(command, tone);
 3ae:	6d 2f       	mov	r22, r29
 3b0:	8c 2f       	mov	r24, r28
 3b2:	ae df       	rcall	.-164    	; 0x310 <REC_add>
		}
	}

	
	
}
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	08 95       	ret

000003ba <main>:
void init_Timer0(void)
{
	TCCR0A = 0b00000000;			// normal mode
	TCCR0B = 0b00000101;			// prescaler 1024
	TCNT0 = 0;						// overflow, 255*1024/(8*10^6) = 32.6ms delay at max
	TIMSK0 |= (1 << TOIE0);			// enable overflow interrupt enable 
 3ba:	b4 de       	rcall	.-664    	; 0x124 <Init_ports>
 3bc:	80 e8       	ldi	r24, 0x80	; 128
 3be:	95 e2       	ldi	r25, 0x25	; 37
 3c0:	b7 de       	rcall	.-658    	; 0x130 <Init_UART0>
 3c2:	78 94       	sei
 3c4:	20 e0       	ldi	r18, 0x00	; 0
 3c6:	01 c0       	rjmp	.+2      	; 0x3ca <main+0x10>
 3c8:	2c 2f       	mov	r18, r28
 3ca:	99 b1       	in	r25, 0x09	; 9
 3cc:	c9 2f       	mov	r28, r25
 3ce:	c0 95       	com	r28
 3d0:	95 b9       	out	0x05, r25	; 5
 3d2:	92 2f       	mov	r25, r18
 3d4:	9c 27       	eor	r25, r28
 3d6:	89 2f       	mov	r24, r25
 3d8:	8c 23       	and	r24, r28
 3da:	99 f0       	breq	.+38     	; 0x402 <main+0x48>
 3dc:	d0 91 04 02 	lds	r29, 0x0204
 3e0:	dc 70       	andi	r29, 0x0C	; 12
 3e2:	d6 95       	lsr	r29
 3e4:	d6 95       	lsr	r29
 3e6:	d0 69       	ori	r29, 0x90	; 144
 3e8:	db de       	rcall	.-586    	; 0x1a0 <MIDI_Conversion>
 3ea:	18 2f       	mov	r17, r24
 3ec:	80 91 04 02 	lds	r24, 0x0204
 3f0:	41 2f       	mov	r20, r17
 3f2:	6d 2f       	mov	r22, r29
 3f4:	c9 df       	rcall	.-110    	; 0x388 <REC_process>
 3f6:	40 91 02 02 	lds	r20, 0x0202
 3fa:	61 2f       	mov	r22, r17
 3fc:	8d 2f       	mov	r24, r29
 3fe:	c3 de       	rcall	.-634    	; 0x186 <MIDI_send>
 400:	e3 cf       	rjmp	.-58     	; 0x3c8 <main+0xe>
 402:	89 2f       	mov	r24, r25
 404:	82 23       	and	r24, r18
 406:	01 f3       	breq	.-64     	; 0x3c8 <main+0xe>
 408:	d0 91 04 02 	lds	r29, 0x0204
 40c:	dc 70       	andi	r29, 0x0C	; 12
 40e:	d6 95       	lsr	r29
 410:	d6 95       	lsr	r29
 412:	d0 64       	ori	r29, 0x40	; 64
 414:	c5 de       	rcall	.-630    	; 0x1a0 <MIDI_Conversion>
 416:	18 2f       	mov	r17, r24
 418:	80 91 04 02 	lds	r24, 0x0204
 41c:	41 2f       	mov	r20, r17
 41e:	6d 2f       	mov	r22, r29
 420:	b3 df       	rcall	.-154    	; 0x388 <REC_process>
 422:	40 91 02 02 	lds	r20, 0x0202
 426:	61 2f       	mov	r22, r17
 428:	8d 2f       	mov	r24, r29
 42a:	ad de       	rcall	.-678    	; 0x186 <MIDI_send>
 42c:	cd cf       	rjmp	.-102    	; 0x3c8 <main+0xe>

0000042e <__vector_29>:
 42e:	1f 92       	push	r1
 430:	0f 92       	push	r0
 432:	0f b6       	in	r0, 0x3f	; 63
 434:	0f 92       	push	r0
 436:	11 24       	eor	r1, r1
 438:	0b b6       	in	r0, 0x3b	; 59
 43a:	0f 92       	push	r0
 43c:	8f 93       	push	r24
 43e:	9f 93       	push	r25
 440:	ef 93       	push	r30
 442:	ff 93       	push	r31
 444:	80 91 79 00 	lds	r24, 0x0079
 448:	80 93 02 02 	sts	0x0202, r24
 44c:	ec e7       	ldi	r30, 0x7C	; 124
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	90 81       	ld	r25, Z
 452:	80 91 04 02 	lds	r24, 0x0204
 456:	8c 70       	andi	r24, 0x0C	; 12
 458:	86 95       	lsr	r24
 45a:	86 95       	lsr	r24
 45c:	90 7e       	andi	r25, 0xE0	; 224
 45e:	89 2b       	or	r24, r25
 460:	80 83       	st	Z, r24
 462:	ff 91       	pop	r31
 464:	ef 91       	pop	r30
 466:	9f 91       	pop	r25
 468:	8f 91       	pop	r24
 46a:	0f 90       	pop	r0
 46c:	0b be       	out	0x3b, r0	; 59
 46e:	0f 90       	pop	r0
 470:	0f be       	out	0x3f, r0	; 63
 472:	0f 90       	pop	r0
 474:	1f 90       	pop	r1
 476:	18 95       	reti

00000478 <__vector_23>:
}

ISR(TIMER0_OVF_vect)
{
 478:	1f 92       	push	r1
 47a:	0f 92       	push	r0
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	0f 92       	push	r0
 480:	11 24       	eor	r1, r1
	TCNT0 = 0;						// reset the count TCNT0
 482:	16 bc       	out	0x26, r1	; 38
 484:	0f 90       	pop	r0
 486:	0f be       	out	0x3f, r0	; 63
 488:	0f 90       	pop	r0
 48a:	1f 90       	pop	r1
 48c:	18 95       	reti

0000048e <_exit>:
 48e:	f8 94       	cli

00000490 <__stop_program>:
 490:	ff cf       	rjmp	.-2      	; 0x490 <__stop_program>
>>>>>>> origin/master
