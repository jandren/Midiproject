
Midiproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00000a7c  00000b10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000707  00800206  00800206  00000b16  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b16  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  00000b46  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008f0  00000000  00000000  00000c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003c1  00000000  00000000  0000152e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e19  00000000  00000000  000018ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000278  00000000  00000000  00002708  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00008b9a  00000000  00000000  00002980  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b0b  00000000  00000000  0000b51a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  0000c025  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003870  00000000  00000000  0000c0ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	62 c3       	rjmp	.+1732   	; 0x70a <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	7e c3       	rjmp	.+1788   	; 0x74e <__vector_20>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2a c3       	rjmp	.+1620   	; 0x6b2 <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	75 c0       	rjmp	.+234    	; 0x150 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	ef c2       	rjmp	.+1502   	; 0x654 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e7       	ldi	r30, 0x7C	; 124
  fc:	fa e0       	ldi	r31, 0x0A	; 10
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 30       	cpi	r26, 0x06	; 6
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	29 e0       	ldi	r18, 0x09	; 9
 110:	a6 e0       	ldi	r26, 0x06	; 6
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ad 30       	cpi	r26, 0x0D	; 13
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	63 d4       	rcall	.+2246   	; 0x9e6 <main>
 120:	ab c4       	rjmp	.+2390   	; 0xa78 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <Init_ports>:
void Init_ports(void)
{
	// Hard coded setup
	
	// Set up port B LEDS
	DDRB = 0xFF; // No inputs, all ports as outputs
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	84 b9       	out	0x04, r24	; 4
	PORTB = 0xFF; // All LEDS are off
 128:	85 b9       	out	0x05, r24	; 5
	
	// Set up port D Buttons
	DDRD = 0x00;
 12a:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0xFF; // Set pull up on the inputs
 12c:	8b b9       	out	0x0b, r24	; 11
	
	// Set up port C Switches
	DDRC = 0x00;
 12e:	17 b8       	out	0x07, r1	; 7
	PORTC = 0xFF; // Set pull up on the inputs
 130:	88 b9       	out	0x08, r24	; 8
 132:	08 95       	ret

00000134 <Init_UART0>:
void Init_UART0(uint16_t BAUDRATE)
{
	//ubrr = F_CPU/16uL/BAUDRATE;
	
	// Set baud rate to 9600 @ 8MHz
	UBRR0L = 51;
 134:	83 e3       	ldi	r24, 0x33	; 51
 136:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0;
 13a:	10 92 c5 00 	sts	0x00C5, r1
	
	// No parity bit, 8 bit char, one stop bit
	UCSR0A = 0x00;
 13e:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0b10011000;
 142:	88 e9       	ldi	r24, 0x98	; 152
 144:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = 0b00000110;
 148:	86 e0       	ldi	r24, 0x06	; 6
 14a:	80 93 c2 00 	sts	0x00C2, r24
 14e:	08 95       	ret

00000150 <__vector_25>:
}

ISR(USART0_RX_vect)
{
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
	rx_ch = UDR0;             //read UART register into value
 15e:	80 91 c6 00 	lds	r24, 0x00C6
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	90 93 01 02 	sts	0x0201, r25
 168:	80 93 00 02 	sts	0x0200, r24
}
 16c:	9f 91       	pop	r25
 16e:	8f 91       	pop	r24
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <UART_out>:

void UART_out(uint8_t ch)
{
	while((UCSR0A & (1<<UDRE0)) == 0); // Wait until empty
 17a:	e0 ec       	ldi	r30, 0xC0	; 192
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	90 81       	ld	r25, Z
 180:	95 ff       	sbrs	r25, 5
 182:	fd cf       	rjmp	.-6      	; 0x17e <UART_out+0x4>
	
	UDR0 = ch; // Put character to be sent in the output register
 184:	80 93 c6 00 	sts	0x00C6, r24
 188:	08 95       	ret

0000018a <MIDI_send>:
}

void MIDI_send(uint8_t command, uint8_t tone, uint8_t volume)
// Send the Midi command, not much really but abstracts the code a little.
{
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	d6 2f       	mov	r29, r22
 190:	c4 2f       	mov	r28, r20
	UART_out(command); // Command 7-bit
 192:	f3 df       	rcall	.-26     	; 0x17a <UART_out>
	UART_out(tone); // Note 7bit
 194:	8d 2f       	mov	r24, r29
 196:	f1 df       	rcall	.-30     	; 0x17a <UART_out>
	UART_out(volume >> 1); // Velocity 7 bit from 8 bit volume
 198:	8c 2f       	mov	r24, r28
 19a:	86 95       	lsr	r24
 19c:	ee df       	rcall	.-36     	; 0x17a <UART_out>
	
	// See Midi command table for exact bits to input.
}
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <MIDI_Conversion>:

uint8_t MIDI_Conversion(uint16_t pressed)
{
	uint16_t converted = 0;
	uint8_t offset = 48;
	uint8_t pitch = switches & 0x03;		// mask with two far right switches
 1a4:	20 91 06 02 	lds	r18, 0x0206
 1a8:	32 2f       	mov	r19, r18
 1aa:	33 70       	andi	r19, 0x03	; 3
	
	if(switches & 0b00010000){  // Only flats
 1ac:	20 91 06 02 	lds	r18, 0x0206
 1b0:	24 ff       	sbrs	r18, 4
 1b2:	23 c1       	rjmp	.+582    	; 0x3fa <MIDI_Conversion+0x256>
	
		switch(pressed)
 1b4:	80 38       	cpi	r24, 0x80	; 128
 1b6:	91 05       	cpc	r25, r1
 1b8:	09 f4       	brne	.+2      	; 0x1bc <MIDI_Conversion+0x18>
 1ba:	a3 c0       	rjmp	.+326    	; 0x302 <MIDI_Conversion+0x15e>
 1bc:	e8 f4       	brcc	.+58     	; 0x1f8 <MIDI_Conversion+0x54>
 1be:	88 30       	cpi	r24, 0x08	; 8
 1c0:	91 05       	cpc	r25, r1
 1c2:	09 f4       	brne	.+2      	; 0x1c6 <MIDI_Conversion+0x22>
 1c4:	6a c0       	rjmp	.+212    	; 0x29a <MIDI_Conversion+0xf6>
 1c6:	60 f4       	brcc	.+24     	; 0x1e0 <MIDI_Conversion+0x3c>
 1c8:	82 30       	cpi	r24, 0x02	; 2
 1ca:	91 05       	cpc	r25, r1
 1cc:	09 f4       	brne	.+2      	; 0x1d0 <MIDI_Conversion+0x2c>
 1ce:	4b c0       	rjmp	.+150    	; 0x266 <MIDI_Conversion+0xc2>
 1d0:	84 30       	cpi	r24, 0x04	; 4
 1d2:	91 05       	cpc	r25, r1
 1d4:	09 f4       	brne	.+2      	; 0x1d8 <MIDI_Conversion+0x34>
 1d6:	54 c0       	rjmp	.+168    	; 0x280 <MIDI_Conversion+0xdc>
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	09 f0       	breq	.+2      	; 0x1de <MIDI_Conversion+0x3a>
 1dc:	2a c2       	rjmp	.+1108   	; 0x632 <MIDI_Conversion+0x48e>
 1de:	36 c0       	rjmp	.+108    	; 0x24c <MIDI_Conversion+0xa8>
 1e0:	80 32       	cpi	r24, 0x20	; 32
 1e2:	91 05       	cpc	r25, r1
 1e4:	09 f4       	brne	.+2      	; 0x1e8 <MIDI_Conversion+0x44>
 1e6:	73 c0       	rjmp	.+230    	; 0x2ce <MIDI_Conversion+0x12a>
 1e8:	80 34       	cpi	r24, 0x40	; 64
 1ea:	91 05       	cpc	r25, r1
 1ec:	09 f4       	brne	.+2      	; 0x1f0 <MIDI_Conversion+0x4c>
 1ee:	7c c0       	rjmp	.+248    	; 0x2e8 <MIDI_Conversion+0x144>
 1f0:	40 97       	sbiw	r24, 0x10	; 16
 1f2:	09 f0       	breq	.+2      	; 0x1f6 <MIDI_Conversion+0x52>
 1f4:	1e c2       	rjmp	.+1084   	; 0x632 <MIDI_Conversion+0x48e>
 1f6:	5e c0       	rjmp	.+188    	; 0x2b4 <MIDI_Conversion+0x110>
 1f8:	81 15       	cp	r24, r1
 1fa:	28 e0       	ldi	r18, 0x08	; 8
 1fc:	92 07       	cpc	r25, r18
 1fe:	09 f4       	brne	.+2      	; 0x202 <MIDI_Conversion+0x5e>
 200:	b6 c0       	rjmp	.+364    	; 0x36e <MIDI_Conversion+0x1ca>
 202:	78 f4       	brcc	.+30     	; 0x222 <MIDI_Conversion+0x7e>
 204:	81 15       	cp	r24, r1
 206:	22 e0       	ldi	r18, 0x02	; 2
 208:	92 07       	cpc	r25, r18
 20a:	09 f4       	brne	.+2      	; 0x20e <MIDI_Conversion+0x6a>
 20c:	94 c0       	rjmp	.+296    	; 0x336 <MIDI_Conversion+0x192>
 20e:	81 15       	cp	r24, r1
 210:	24 e0       	ldi	r18, 0x04	; 4
 212:	92 07       	cpc	r25, r18
 214:	09 f4       	brne	.+2      	; 0x218 <MIDI_Conversion+0x74>
 216:	9d c0       	rjmp	.+314    	; 0x352 <MIDI_Conversion+0x1ae>
 218:	81 15       	cp	r24, r1
 21a:	91 40       	sbci	r25, 0x01	; 1
 21c:	09 f0       	breq	.+2      	; 0x220 <MIDI_Conversion+0x7c>
 21e:	09 c2       	rjmp	.+1042   	; 0x632 <MIDI_Conversion+0x48e>
 220:	7d c0       	rjmp	.+250    	; 0x31c <MIDI_Conversion+0x178>
 222:	81 15       	cp	r24, r1
 224:	20 e2       	ldi	r18, 0x20	; 32
 226:	92 07       	cpc	r25, r18
 228:	09 f4       	brne	.+2      	; 0x22c <MIDI_Conversion+0x88>
 22a:	bd c0       	rjmp	.+378    	; 0x3a6 <MIDI_Conversion+0x202>
 22c:	28 f4       	brcc	.+10     	; 0x238 <MIDI_Conversion+0x94>
 22e:	81 15       	cp	r24, r1
 230:	90 41       	sbci	r25, 0x10	; 16
 232:	09 f4       	brne	.+2      	; 0x236 <MIDI_Conversion+0x92>
 234:	aa c0       	rjmp	.+340    	; 0x38a <MIDI_Conversion+0x1e6>
 236:	fd c1       	rjmp	.+1018   	; 0x632 <MIDI_Conversion+0x48e>
 238:	81 15       	cp	r24, r1
 23a:	20 e4       	ldi	r18, 0x40	; 64
 23c:	92 07       	cpc	r25, r18
 23e:	09 f4       	brne	.+2      	; 0x242 <MIDI_Conversion+0x9e>
 240:	c0 c0       	rjmp	.+384    	; 0x3c2 <MIDI_Conversion+0x21e>
 242:	81 15       	cp	r24, r1
 244:	90 48       	sbci	r25, 0x80	; 128
 246:	09 f4       	brne	.+2      	; 0x24a <MIDI_Conversion+0xa6>
 248:	ca c0       	rjmp	.+404    	; 0x3de <MIDI_Conversion+0x23a>
 24a:	f3 c1       	rjmp	.+998    	; 0x632 <MIDI_Conversion+0x48e>
		{
			case 0x0001:
			converted = 48 + 12 * pitch;
 24c:	83 2f       	mov	r24, r19
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	9c 01       	movw	r18, r24
 252:	22 0f       	add	r18, r18
 254:	33 1f       	adc	r19, r19
 256:	82 0f       	add	r24, r18
 258:	93 1f       	adc	r25, r19
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	c0 96       	adiw	r24, 0x30	; 48
			break;				// C4 = 48 or C5 = 60 or C6 = 72
 264:	08 95       	ret
			case 0x0002:
			converted = 50 + 12 * pitch;
 266:	83 2f       	mov	r24, r19
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	9c 01       	movw	r18, r24
 26c:	22 0f       	add	r18, r18
 26e:	33 1f       	adc	r19, r19
 270:	82 0f       	add	r24, r18
 272:	93 1f       	adc	r25, r19
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	c2 96       	adiw	r24, 0x32	; 50
			break;				// D4 = 50 or D5 = 62 or D6 = 74
 27e:	08 95       	ret
			case 0x0004:
			converted = 52 + 12 * pitch;
 280:	83 2f       	mov	r24, r19
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	9c 01       	movw	r18, r24
 286:	22 0f       	add	r18, r18
 288:	33 1f       	adc	r19, r19
 28a:	82 0f       	add	r24, r18
 28c:	93 1f       	adc	r25, r19
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	c4 96       	adiw	r24, 0x34	; 52
			break;				// E4 = 52 or E5 = 64 or E6 = 76
 298:	08 95       	ret
			case 0x0008:
			converted = 53 + 12 * pitch;
 29a:	83 2f       	mov	r24, r19
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	9c 01       	movw	r18, r24
 2a0:	22 0f       	add	r18, r18
 2a2:	33 1f       	adc	r19, r19
 2a4:	82 0f       	add	r24, r18
 2a6:	93 1f       	adc	r25, r19
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	c5 96       	adiw	r24, 0x35	; 53
			break;				// F4 = 53 or F5 = 65 or F6 = 77
 2b2:	08 95       	ret
			case 0x0010:
			converted = 55 + 12 * pitch;
 2b4:	83 2f       	mov	r24, r19
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	9c 01       	movw	r18, r24
 2ba:	22 0f       	add	r18, r18
 2bc:	33 1f       	adc	r19, r19
 2be:	82 0f       	add	r24, r18
 2c0:	93 1f       	adc	r25, r19
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	c7 96       	adiw	r24, 0x37	; 55
			break;				// G4 = 55 or G5 = 67 or G6 = 79
 2cc:	08 95       	ret
			case 0x0020:
			converted = 57 + 12 * pitch;
 2ce:	83 2f       	mov	r24, r19
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	9c 01       	movw	r18, r24
 2d4:	22 0f       	add	r18, r18
 2d6:	33 1f       	adc	r19, r19
 2d8:	82 0f       	add	r24, r18
 2da:	93 1f       	adc	r25, r19
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	c9 96       	adiw	r24, 0x39	; 57
			break;				// A4 = 57 or A5 = 69 or A6 = 81
 2e6:	08 95       	ret
			case 0x0040:
			converted = 59 + 12 * pitch;
 2e8:	83 2f       	mov	r24, r19
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	9c 01       	movw	r18, r24
 2ee:	22 0f       	add	r18, r18
 2f0:	33 1f       	adc	r19, r19
 2f2:	82 0f       	add	r24, r18
 2f4:	93 1f       	adc	r25, r19
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	cb 96       	adiw	r24, 0x3b	; 59
			break;				// B4 = 59 or B5 = 71 or B6 = 83
 300:	08 95       	ret
			case 0x0080:
			converted = 60 + 12 * pitch;
 302:	83 2f       	mov	r24, r19
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	9c 01       	movw	r18, r24
 308:	22 0f       	add	r18, r18
 30a:	33 1f       	adc	r19, r19
 30c:	82 0f       	add	r24, r18
 30e:	93 1f       	adc	r25, r19
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	cc 96       	adiw	r24, 0x3c	; 60
			break;				// C5 = 60 or C6 = 72 or C7 = 84
 31a:	08 95       	ret
			case 0x0100:
			converted = 62 + 12 * pitch;
 31c:	83 2f       	mov	r24, r19
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	9c 01       	movw	r18, r24
 322:	22 0f       	add	r18, r18
 324:	33 1f       	adc	r19, r19
 326:	82 0f       	add	r24, r18
 328:	93 1f       	adc	r25, r19
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	ce 96       	adiw	r24, 0x3e	; 62
			break;				// C4 = 48 or C5 = 60 or C6 = 72
 334:	08 95       	ret
			case 0x0200:
			converted = 64 + 12 * pitch;
 336:	83 2f       	mov	r24, r19
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	9c 01       	movw	r18, r24
 33c:	22 0f       	add	r18, r18
 33e:	33 1f       	adc	r19, r19
 340:	82 0f       	add	r24, r18
 342:	93 1f       	adc	r25, r19
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	80 5c       	subi	r24, 0xC0	; 192
 34e:	9f 4f       	sbci	r25, 0xFF	; 255
			break;				// D4 = 50 or D5 = 62 or D6 = 74
 350:	08 95       	ret
			case 0x0400:
			converted = 65 + 12 * pitch;
 352:	83 2f       	mov	r24, r19
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	9c 01       	movw	r18, r24
 358:	22 0f       	add	r18, r18
 35a:	33 1f       	adc	r19, r19
 35c:	82 0f       	add	r24, r18
 35e:	93 1f       	adc	r25, r19
 360:	88 0f       	add	r24, r24
 362:	99 1f       	adc	r25, r25
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	8f 5b       	subi	r24, 0xBF	; 191
 36a:	9f 4f       	sbci	r25, 0xFF	; 255
			break;				// E4 = 52 or E5 = 64 or E6 = 76
 36c:	08 95       	ret
			case 0x0800:
			converted = 67 + 12 * pitch;
 36e:	83 2f       	mov	r24, r19
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	9c 01       	movw	r18, r24
 374:	22 0f       	add	r18, r18
 376:	33 1f       	adc	r19, r19
 378:	82 0f       	add	r24, r18
 37a:	93 1f       	adc	r25, r19
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	8d 5b       	subi	r24, 0xBD	; 189
 386:	9f 4f       	sbci	r25, 0xFF	; 255
			break;				// F4 = 53 or F5 = 65 or F6 = 77
 388:	08 95       	ret
			case 0x1000:
			converted = 69 + 12 * pitch;
 38a:	83 2f       	mov	r24, r19
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	9c 01       	movw	r18, r24
 390:	22 0f       	add	r18, r18
 392:	33 1f       	adc	r19, r19
 394:	82 0f       	add	r24, r18
 396:	93 1f       	adc	r25, r19
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	8b 5b       	subi	r24, 0xBB	; 187
 3a2:	9f 4f       	sbci	r25, 0xFF	; 255
			break;				// G4 = 55 or G5 = 67 or G6 = 79
 3a4:	08 95       	ret
			case 0x2000:
			converted = 71 + 12 * pitch;
 3a6:	83 2f       	mov	r24, r19
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	9c 01       	movw	r18, r24
 3ac:	22 0f       	add	r18, r18
 3ae:	33 1f       	adc	r19, r19
 3b0:	82 0f       	add	r24, r18
 3b2:	93 1f       	adc	r25, r19
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	88 0f       	add	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	89 5b       	subi	r24, 0xB9	; 185
 3be:	9f 4f       	sbci	r25, 0xFF	; 255
			break;				// A4 = 57 or A5 = 69 or A6 = 81
 3c0:	08 95       	ret
			case 0x4000:
			converted = 72 + 12 * pitch;
 3c2:	83 2f       	mov	r24, r19
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	9c 01       	movw	r18, r24
 3c8:	22 0f       	add	r18, r18
 3ca:	33 1f       	adc	r19, r19
 3cc:	82 0f       	add	r24, r18
 3ce:	93 1f       	adc	r25, r19
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	88 5b       	subi	r24, 0xB8	; 184
 3da:	9f 4f       	sbci	r25, 0xFF	; 255
			break;				// B4 = 59 or B5 = 71 or B6 = 83
 3dc:	08 95       	ret
			case 0x8000:
			converted = 74 + 12 * pitch;
 3de:	83 2f       	mov	r24, r19
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	9c 01       	movw	r18, r24
 3e4:	22 0f       	add	r18, r18
 3e6:	33 1f       	adc	r19, r19
 3e8:	82 0f       	add	r24, r18
 3ea:	93 1f       	adc	r25, r19
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	86 5b       	subi	r24, 0xB6	; 182
 3f6:	9f 4f       	sbci	r25, 0xFF	; 255
			break;				// C5 = 60 or C6 = 72 or C7 = 84
 3f8:	08 95       	ret
			default:
			break;
		}
	}
	else{  // All keys
		switch(pressed)
 3fa:	80 38       	cpi	r24, 0x80	; 128
 3fc:	91 05       	cpc	r25, r1
 3fe:	09 f4       	brne	.+2      	; 0x402 <MIDI_Conversion+0x25e>
 400:	a3 c0       	rjmp	.+326    	; 0x548 <MIDI_Conversion+0x3a4>
 402:	e8 f4       	brcc	.+58     	; 0x43e <MIDI_Conversion+0x29a>
 404:	88 30       	cpi	r24, 0x08	; 8
 406:	91 05       	cpc	r25, r1
 408:	09 f4       	brne	.+2      	; 0x40c <MIDI_Conversion+0x268>
 40a:	6a c0       	rjmp	.+212    	; 0x4e0 <MIDI_Conversion+0x33c>
 40c:	60 f4       	brcc	.+24     	; 0x426 <MIDI_Conversion+0x282>
 40e:	82 30       	cpi	r24, 0x02	; 2
 410:	91 05       	cpc	r25, r1
 412:	09 f4       	brne	.+2      	; 0x416 <MIDI_Conversion+0x272>
 414:	4b c0       	rjmp	.+150    	; 0x4ac <MIDI_Conversion+0x308>
 416:	84 30       	cpi	r24, 0x04	; 4
 418:	91 05       	cpc	r25, r1
 41a:	09 f4       	brne	.+2      	; 0x41e <MIDI_Conversion+0x27a>
 41c:	54 c0       	rjmp	.+168    	; 0x4c6 <MIDI_Conversion+0x322>
 41e:	01 97       	sbiw	r24, 0x01	; 1
 420:	09 f0       	breq	.+2      	; 0x424 <MIDI_Conversion+0x280>
 422:	0a c1       	rjmp	.+532    	; 0x638 <MIDI_Conversion+0x494>
 424:	36 c0       	rjmp	.+108    	; 0x492 <MIDI_Conversion+0x2ee>
 426:	80 32       	cpi	r24, 0x20	; 32
 428:	91 05       	cpc	r25, r1
 42a:	09 f4       	brne	.+2      	; 0x42e <MIDI_Conversion+0x28a>
 42c:	73 c0       	rjmp	.+230    	; 0x514 <MIDI_Conversion+0x370>
 42e:	80 34       	cpi	r24, 0x40	; 64
 430:	91 05       	cpc	r25, r1
 432:	09 f4       	brne	.+2      	; 0x436 <MIDI_Conversion+0x292>
 434:	7c c0       	rjmp	.+248    	; 0x52e <MIDI_Conversion+0x38a>
 436:	40 97       	sbiw	r24, 0x10	; 16
 438:	09 f0       	breq	.+2      	; 0x43c <MIDI_Conversion+0x298>
 43a:	fe c0       	rjmp	.+508    	; 0x638 <MIDI_Conversion+0x494>
 43c:	5e c0       	rjmp	.+188    	; 0x4fa <MIDI_Conversion+0x356>
 43e:	81 15       	cp	r24, r1
 440:	28 e0       	ldi	r18, 0x08	; 8
 442:	92 07       	cpc	r25, r18
 444:	09 f4       	brne	.+2      	; 0x448 <MIDI_Conversion+0x2a4>
 446:	b4 c0       	rjmp	.+360    	; 0x5b0 <MIDI_Conversion+0x40c>
 448:	78 f4       	brcc	.+30     	; 0x468 <MIDI_Conversion+0x2c4>
 44a:	81 15       	cp	r24, r1
 44c:	22 e0       	ldi	r18, 0x02	; 2
 44e:	92 07       	cpc	r25, r18
 450:	09 f4       	brne	.+2      	; 0x454 <MIDI_Conversion+0x2b0>
 452:	94 c0       	rjmp	.+296    	; 0x57c <MIDI_Conversion+0x3d8>
 454:	81 15       	cp	r24, r1
 456:	24 e0       	ldi	r18, 0x04	; 4
 458:	92 07       	cpc	r25, r18
 45a:	09 f4       	brne	.+2      	; 0x45e <MIDI_Conversion+0x2ba>
 45c:	9c c0       	rjmp	.+312    	; 0x596 <MIDI_Conversion+0x3f2>
 45e:	81 15       	cp	r24, r1
 460:	91 40       	sbci	r25, 0x01	; 1
 462:	09 f0       	breq	.+2      	; 0x466 <MIDI_Conversion+0x2c2>
 464:	e9 c0       	rjmp	.+466    	; 0x638 <MIDI_Conversion+0x494>
 466:	7d c0       	rjmp	.+250    	; 0x562 <MIDI_Conversion+0x3be>
 468:	81 15       	cp	r24, r1
 46a:	20 e2       	ldi	r18, 0x20	; 32
 46c:	92 07       	cpc	r25, r18
 46e:	09 f4       	brne	.+2      	; 0x472 <MIDI_Conversion+0x2ce>
 470:	b9 c0       	rjmp	.+370    	; 0x5e4 <MIDI_Conversion+0x440>
 472:	28 f4       	brcc	.+10     	; 0x47e <MIDI_Conversion+0x2da>
 474:	81 15       	cp	r24, r1
 476:	90 41       	sbci	r25, 0x10	; 16
 478:	09 f4       	brne	.+2      	; 0x47c <MIDI_Conversion+0x2d8>
 47a:	a7 c0       	rjmp	.+334    	; 0x5ca <MIDI_Conversion+0x426>
 47c:	dd c0       	rjmp	.+442    	; 0x638 <MIDI_Conversion+0x494>
 47e:	81 15       	cp	r24, r1
 480:	20 e4       	ldi	r18, 0x40	; 64
 482:	92 07       	cpc	r25, r18
 484:	09 f4       	brne	.+2      	; 0x488 <MIDI_Conversion+0x2e4>
 486:	bb c0       	rjmp	.+374    	; 0x5fe <MIDI_Conversion+0x45a>
 488:	81 15       	cp	r24, r1
 48a:	90 48       	sbci	r25, 0x80	; 128
 48c:	09 f4       	brne	.+2      	; 0x490 <MIDI_Conversion+0x2ec>
 48e:	c4 c0       	rjmp	.+392    	; 0x618 <MIDI_Conversion+0x474>
 490:	d3 c0       	rjmp	.+422    	; 0x638 <MIDI_Conversion+0x494>
		{
			case 0x0001:
			converted = offset + 0 + 12 * pitch;
 492:	83 2f       	mov	r24, r19
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	9c 01       	movw	r18, r24
 498:	22 0f       	add	r18, r18
 49a:	33 1f       	adc	r19, r19
 49c:	82 0f       	add	r24, r18
 49e:	93 1f       	adc	r25, r19
 4a0:	88 0f       	add	r24, r24
 4a2:	99 1f       	adc	r25, r25
 4a4:	88 0f       	add	r24, r24
 4a6:	99 1f       	adc	r25, r25
 4a8:	c0 96       	adiw	r24, 0x30	; 48
			break;				// C4 = 48 or C5 = 60 or C6 = 72
 4aa:	08 95       	ret
			case 0x0002:
			converted = offset + 1 + 12 * pitch;
 4ac:	83 2f       	mov	r24, r19
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	9c 01       	movw	r18, r24
 4b2:	22 0f       	add	r18, r18
 4b4:	33 1f       	adc	r19, r19
 4b6:	82 0f       	add	r24, r18
 4b8:	93 1f       	adc	r25, r19
 4ba:	88 0f       	add	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	88 0f       	add	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	c1 96       	adiw	r24, 0x31	; 49
			break;				// D4 = 50 or D5 = 62 or D6 = 74
 4c4:	08 95       	ret
			case 0x0004:
			converted = offset + 2 + 12 * pitch;
 4c6:	83 2f       	mov	r24, r19
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	9c 01       	movw	r18, r24
 4cc:	22 0f       	add	r18, r18
 4ce:	33 1f       	adc	r19, r19
 4d0:	82 0f       	add	r24, r18
 4d2:	93 1f       	adc	r25, r19
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	c2 96       	adiw	r24, 0x32	; 50
			break;				// E4 = 52 or E5 = 64 or E6 = 76
 4de:	08 95       	ret
			case 0x0008:
			converted = offset + 3 + 12 * pitch;
 4e0:	83 2f       	mov	r24, r19
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	9c 01       	movw	r18, r24
 4e6:	22 0f       	add	r18, r18
 4e8:	33 1f       	adc	r19, r19
 4ea:	82 0f       	add	r24, r18
 4ec:	93 1f       	adc	r25, r19
 4ee:	88 0f       	add	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	c3 96       	adiw	r24, 0x33	; 51
			break;				// F4 = 53 or F5 = 65 or F6 = 77
 4f8:	08 95       	ret
			case 0x0010:
			converted = offset + 4 + 12 * pitch;
 4fa:	83 2f       	mov	r24, r19
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	9c 01       	movw	r18, r24
 500:	22 0f       	add	r18, r18
 502:	33 1f       	adc	r19, r19
 504:	82 0f       	add	r24, r18
 506:	93 1f       	adc	r25, r19
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	88 0f       	add	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	c4 96       	adiw	r24, 0x34	; 52
			break;				// G4 = 55 or G5 = 67 or G6 = 79
 512:	08 95       	ret
			case 0x0020:
			converted = offset + 5 + 12 * pitch;
 514:	83 2f       	mov	r24, r19
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	9c 01       	movw	r18, r24
 51a:	22 0f       	add	r18, r18
 51c:	33 1f       	adc	r19, r19
 51e:	82 0f       	add	r24, r18
 520:	93 1f       	adc	r25, r19
 522:	88 0f       	add	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	88 0f       	add	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	c5 96       	adiw	r24, 0x35	; 53
			break;				// A4 = 57 or A5 = 69 or A6 = 81
 52c:	08 95       	ret
			case 0x0040:
			converted = offset + 6 + 12 * pitch;
 52e:	83 2f       	mov	r24, r19
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	9c 01       	movw	r18, r24
 534:	22 0f       	add	r18, r18
 536:	33 1f       	adc	r19, r19
 538:	82 0f       	add	r24, r18
 53a:	93 1f       	adc	r25, r19
 53c:	88 0f       	add	r24, r24
 53e:	99 1f       	adc	r25, r25
 540:	88 0f       	add	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	c6 96       	adiw	r24, 0x36	; 54
			break;				// B4 = 59 or B5 = 71 or B6 = 83
 546:	08 95       	ret
			case 0x0080:
			converted = offset + 7 + 12 * pitch;
 548:	83 2f       	mov	r24, r19
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	9c 01       	movw	r18, r24
 54e:	22 0f       	add	r18, r18
 550:	33 1f       	adc	r19, r19
 552:	82 0f       	add	r24, r18
 554:	93 1f       	adc	r25, r19
 556:	88 0f       	add	r24, r24
 558:	99 1f       	adc	r25, r25
 55a:	88 0f       	add	r24, r24
 55c:	99 1f       	adc	r25, r25
 55e:	c7 96       	adiw	r24, 0x37	; 55
			break;				// C5 = 60 or C6 = 72 or C7 = 84
 560:	08 95       	ret
			case 0x0100:
			converted = offset + 8 + 12 * pitch;
 562:	83 2f       	mov	r24, r19
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	9c 01       	movw	r18, r24
 568:	22 0f       	add	r18, r18
 56a:	33 1f       	adc	r19, r19
 56c:	82 0f       	add	r24, r18
 56e:	93 1f       	adc	r25, r19
 570:	88 0f       	add	r24, r24
 572:	99 1f       	adc	r25, r25
 574:	88 0f       	add	r24, r24
 576:	99 1f       	adc	r25, r25
 578:	c8 96       	adiw	r24, 0x38	; 56
			break;				// C4 = 48 or C5 = 60 or C6 = 72
 57a:	08 95       	ret
			case 0x0200:
			converted = offset + 9 + 12 * pitch;
 57c:	83 2f       	mov	r24, r19
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	9c 01       	movw	r18, r24
 582:	22 0f       	add	r18, r18
 584:	33 1f       	adc	r19, r19
 586:	82 0f       	add	r24, r18
 588:	93 1f       	adc	r25, r19
 58a:	88 0f       	add	r24, r24
 58c:	99 1f       	adc	r25, r25
 58e:	88 0f       	add	r24, r24
 590:	99 1f       	adc	r25, r25
 592:	c9 96       	adiw	r24, 0x39	; 57
			break;				// D4 = 50 or D5 = 62 or D6 = 74
 594:	08 95       	ret
			case 0x0400:
			converted = offset + 10 + 12 * pitch;
 596:	83 2f       	mov	r24, r19
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	9c 01       	movw	r18, r24
 59c:	22 0f       	add	r18, r18
 59e:	33 1f       	adc	r19, r19
 5a0:	82 0f       	add	r24, r18
 5a2:	93 1f       	adc	r25, r19
 5a4:	88 0f       	add	r24, r24
 5a6:	99 1f       	adc	r25, r25
 5a8:	88 0f       	add	r24, r24
 5aa:	99 1f       	adc	r25, r25
 5ac:	ca 96       	adiw	r24, 0x3a	; 58
			break;				// E4 = 52 or E5 = 64 or E6 = 76
 5ae:	08 95       	ret
			case 0x0800:
			converted = offset + 11 + 12 * pitch;
 5b0:	83 2f       	mov	r24, r19
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	9c 01       	movw	r18, r24
 5b6:	22 0f       	add	r18, r18
 5b8:	33 1f       	adc	r19, r19
 5ba:	82 0f       	add	r24, r18
 5bc:	93 1f       	adc	r25, r19
 5be:	88 0f       	add	r24, r24
 5c0:	99 1f       	adc	r25, r25
 5c2:	88 0f       	add	r24, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	cb 96       	adiw	r24, 0x3b	; 59
			break;				// F4 = 53 or F5 = 65 or F6 = 77
 5c8:	08 95       	ret
			case 0x1000:
			converted = offset + 12 + 12 * pitch;
 5ca:	83 2f       	mov	r24, r19
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	9c 01       	movw	r18, r24
 5d0:	22 0f       	add	r18, r18
 5d2:	33 1f       	adc	r19, r19
 5d4:	82 0f       	add	r24, r18
 5d6:	93 1f       	adc	r25, r19
 5d8:	88 0f       	add	r24, r24
 5da:	99 1f       	adc	r25, r25
 5dc:	88 0f       	add	r24, r24
 5de:	99 1f       	adc	r25, r25
 5e0:	cc 96       	adiw	r24, 0x3c	; 60
			break;				// G4 = 55 or G5 = 67 or G6 = 79
 5e2:	08 95       	ret
			case 0x2000:
			converted = offset + 13 + 12 * pitch;
 5e4:	83 2f       	mov	r24, r19
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	9c 01       	movw	r18, r24
 5ea:	22 0f       	add	r18, r18
 5ec:	33 1f       	adc	r19, r19
 5ee:	82 0f       	add	r24, r18
 5f0:	93 1f       	adc	r25, r19
 5f2:	88 0f       	add	r24, r24
 5f4:	99 1f       	adc	r25, r25
 5f6:	88 0f       	add	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	cd 96       	adiw	r24, 0x3d	; 61
			break;				// A4 = 57 or A5 = 69 or A6 = 81
 5fc:	08 95       	ret
			case 0x4000:
			converted = offset + 14 + 12 * pitch;
 5fe:	83 2f       	mov	r24, r19
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	9c 01       	movw	r18, r24
 604:	22 0f       	add	r18, r18
 606:	33 1f       	adc	r19, r19
 608:	82 0f       	add	r24, r18
 60a:	93 1f       	adc	r25, r19
 60c:	88 0f       	add	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	88 0f       	add	r24, r24
 612:	99 1f       	adc	r25, r25
 614:	ce 96       	adiw	r24, 0x3e	; 62
			break;				// B4 = 59 or B5 = 71 or B6 = 83
 616:	08 95       	ret
			case 0x8000:
			converted = offset + 15 + 12 * pitch;
 618:	83 2f       	mov	r24, r19
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	9c 01       	movw	r18, r24
 61e:	22 0f       	add	r18, r18
 620:	33 1f       	adc	r19, r19
 622:	82 0f       	add	r24, r18
 624:	93 1f       	adc	r25, r19
 626:	88 0f       	add	r24, r24
 628:	99 1f       	adc	r25, r25
 62a:	88 0f       	add	r24, r24
 62c:	99 1f       	adc	r25, r25
 62e:	cf 96       	adiw	r24, 0x3f	; 63
			break;				// C5 = 60 or C6 = 72 or C7 = 84
 630:	08 95       	ret
	// See Midi command table for exact bits to input.
}

uint8_t MIDI_Conversion(uint16_t pressed)
{
	uint16_t converted = 0;
 632:	80 e0       	ldi	r24, 0x00	; 0
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	08 95       	ret
 638:	80 e0       	ldi	r24, 0x00	; 0
 63a:	90 e0       	ldi	r25, 0x00	; 0
			break;
			}
	}
	return converted;
	
}
 63c:	08 95       	ret

0000063e <init_adc>:

void init_adc(void)					// function for initializing ADC
{
	ADCSRA |= (1 << ADEN) | (1 << ADPS1) | (1 << ADIE) | (1<<ADSC);	// enable ADC, prescaler 4
 63e:	ea e7       	ldi	r30, 0x7A	; 122
 640:	f0 e0       	ldi	r31, 0x00	; 0
 642:	80 81       	ld	r24, Z
 644:	8a 6c       	ori	r24, 0xCA	; 202
 646:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0) | (1 << ADLAR);	// internal 5V, 8 bits
 648:	ec e7       	ldi	r30, 0x7C	; 124
 64a:	f0 e0       	ldi	r31, 0x00	; 0
 64c:	80 81       	ld	r24, Z
 64e:	80 66       	ori	r24, 0x60	; 96
 650:	80 83       	st	Z, r24
 652:	08 95       	ret

00000654 <__vector_29>:
}

ISR(ADC_vect)						// read ADC using interrupt
{
 654:	1f 92       	push	r1
 656:	0f 92       	push	r0
 658:	0f b6       	in	r0, 0x3f	; 63
 65a:	0f 92       	push	r0
 65c:	11 24       	eor	r1, r1
 65e:	0b b6       	in	r0, 0x3b	; 59
 660:	0f 92       	push	r0
 662:	8f 93       	push	r24
 664:	9f 93       	push	r25
 666:	ef 93       	push	r30
 668:	ff 93       	push	r31
	volume = ADCH;									// save 8 bits
 66a:	80 91 79 00 	lds	r24, 0x0079
 66e:	80 93 04 02 	sts	0x0204, r24
	ADMUX = (ADMUX & 0xE0) | ((switches & 0x0C) >> 2);	// Mask and shift channel bits from switches
 672:	ec e7       	ldi	r30, 0x7C	; 124
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	90 81       	ld	r25, Z
 678:	80 91 06 02 	lds	r24, 0x0206
 67c:	8c 70       	andi	r24, 0x0C	; 12
 67e:	86 95       	lsr	r24
 680:	86 95       	lsr	r24
 682:	90 7e       	andi	r25, 0xE0	; 224
 684:	89 2b       	or	r24, r25
 686:	80 83       	st	Z, r24
}
 688:	ff 91       	pop	r31
 68a:	ef 91       	pop	r30
 68c:	9f 91       	pop	r25
 68e:	8f 91       	pop	r24
 690:	0f 90       	pop	r0
 692:	0b be       	out	0x3b, r0	; 59
 694:	0f 90       	pop	r0
 696:	0f be       	out	0x3f, r0	; 63
 698:	0f 90       	pop	r0
 69a:	1f 90       	pop	r1
 69c:	18 95       	reti

0000069e <init_Timer0>:

void init_Timer0(void)
{
	TCCR0A = 0b00000000;			// normal mode
 69e:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000101;			// prescaler 1024
 6a0:	85 e0       	ldi	r24, 0x05	; 5
 6a2:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;					// overflow, 255*1024/(8*10^6) = 32.6ms delay at max
 6a4:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1 << TOIE0);			// enable overflow interrupt enable
 6a6:	ee e6       	ldi	r30, 0x6E	; 110
 6a8:	f0 e0       	ldi	r31, 0x00	; 0
 6aa:	80 81       	ld	r24, Z
 6ac:	81 60       	ori	r24, 0x01	; 1
 6ae:	80 83       	st	Z, r24
 6b0:	08 95       	ret

000006b2 <__vector_23>:
}

ISR(TIMER0_OVF_vect)
{
 6b2:	1f 92       	push	r1
 6b4:	0f 92       	push	r0
 6b6:	0f b6       	in	r0, 0x3f	; 63
 6b8:	0f 92       	push	r0
 6ba:	11 24       	eor	r1, r1
 6bc:	0b b6       	in	r0, 0x3b	; 59
 6be:	0f 92       	push	r0
 6c0:	8f 93       	push	r24
 6c2:	ef 93       	push	r30
 6c4:	ff 93       	push	r31
	ADCSRA |= (1<<ADSC);
 6c6:	ea e7       	ldi	r30, 0x7A	; 122
 6c8:	f0 e0       	ldi	r31, 0x00	; 0
 6ca:	80 81       	ld	r24, Z
 6cc:	80 64       	ori	r24, 0x40	; 64
 6ce:	80 83       	st	Z, r24
	//TCNT0 = 0;					// reset the count TCNT0
 6d0:	ff 91       	pop	r31
 6d2:	ef 91       	pop	r30
 6d4:	8f 91       	pop	r24
 6d6:	0f 90       	pop	r0
 6d8:	0b be       	out	0x3b, r0	; 59
 6da:	0f 90       	pop	r0
 6dc:	0f be       	out	0x3f, r0	; 63
 6de:	0f 90       	pop	r0
 6e0:	1f 90       	pop	r1
 6e2:	18 95       	reti

000006e4 <init_Timer1>:
	OCR1A = time;
}

void TIME_reset(void)
{
	software_time = 0;
 6e4:	10 92 80 00 	sts	0x0080, r1
 6e8:	83 e0       	ldi	r24, 0x03	; 3
 6ea:	80 93 6f 00 	sts	0x006F, r24
 6ee:	10 92 85 00 	sts	0x0085, r1
 6f2:	10 92 84 00 	sts	0x0084, r1
 6f6:	84 e6       	ldi	r24, 0x64	; 100
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	90 93 89 00 	sts	0x0089, r25
 6fe:	80 93 88 00 	sts	0x0088, r24
 702:	82 e0       	ldi	r24, 0x02	; 2
 704:	80 93 81 00 	sts	0x0081, r24
 708:	08 95       	ret

0000070a <__vector_17>:
 70a:	1f 92       	push	r1
 70c:	0f 92       	push	r0
 70e:	0f b6       	in	r0, 0x3f	; 63
 710:	0f 92       	push	r0
 712:	11 24       	eor	r1, r1
 714:	2f 93       	push	r18
 716:	3f 93       	push	r19
 718:	8f 93       	push	r24
 71a:	9f 93       	push	r25
 71c:	20 91 0b 02 	lds	r18, 0x020B
 720:	30 91 0c 02 	lds	r19, 0x020C
 724:	80 91 02 02 	lds	r24, 0x0202
 728:	90 91 03 02 	lds	r25, 0x0203
 72c:	28 17       	cp	r18, r24
 72e:	39 07       	cpc	r19, r25
 730:	29 f4       	brne	.+10     	; 0x73c <__vector_17+0x32>
 732:	80 91 0a 02 	lds	r24, 0x020A
 736:	8f 5f       	subi	r24, 0xFF	; 255
 738:	80 93 0a 02 	sts	0x020A, r24
 73c:	9f 91       	pop	r25
 73e:	8f 91       	pop	r24
 740:	3f 91       	pop	r19
 742:	2f 91       	pop	r18
 744:	0f 90       	pop	r0
 746:	0f be       	out	0x3f, r0	; 63
 748:	0f 90       	pop	r0
 74a:	1f 90       	pop	r1
 74c:	18 95       	reti

0000074e <__vector_20>:
 74e:	1f 92       	push	r1
 750:	0f 92       	push	r0
 752:	0f b6       	in	r0, 0x3f	; 63
 754:	0f 92       	push	r0
 756:	11 24       	eor	r1, r1
 758:	8f 93       	push	r24
 75a:	9f 93       	push	r25
 75c:	80 91 0b 02 	lds	r24, 0x020B
 760:	90 91 0c 02 	lds	r25, 0x020C
 764:	01 96       	adiw	r24, 0x01	; 1
 766:	90 93 0c 02 	sts	0x020C, r25
 76a:	80 93 0b 02 	sts	0x020B, r24
 76e:	9f 91       	pop	r25
 770:	8f 91       	pop	r24
 772:	0f 90       	pop	r0
 774:	0f be       	out	0x3f, r0	; 63
 776:	0f 90       	pop	r0
 778:	1f 90       	pop	r1
 77a:	18 95       	reti

0000077c <TIME_Set_ISR>:
 77c:	0f 93       	push	r16
 77e:	1f 93       	push	r17
 780:	8c 01       	movw	r16, r24
 782:	22 27       	eor	r18, r18
 784:	33 27       	eor	r19, r19
 786:	10 93 03 02 	sts	0x0203, r17
 78a:	00 93 02 02 	sts	0x0202, r16
 78e:	70 93 89 00 	sts	0x0089, r23
 792:	60 93 88 00 	sts	0x0088, r22
 796:	1f 91       	pop	r17
 798:	0f 91       	pop	r16
 79a:	08 95       	ret

0000079c <TIME_read>:
}

uint32_t TIME_read(void)
{
 79c:	0f 93       	push	r16
 79e:	1f 93       	push	r17
	return ((uint32_t)software_time << 16) | TCNT1;
 7a0:	40 91 0b 02 	lds	r20, 0x020B
 7a4:	50 91 0c 02 	lds	r21, 0x020C
 7a8:	80 91 84 00 	lds	r24, 0x0084
 7ac:	90 91 85 00 	lds	r25, 0x0085
 7b0:	60 e0       	ldi	r22, 0x00	; 0
 7b2:	70 e0       	ldi	r23, 0x00	; 0
 7b4:	ba 01       	movw	r22, r20
 7b6:	55 27       	eor	r21, r21
 7b8:	44 27       	eor	r20, r20
 7ba:	a0 e0       	ldi	r26, 0x00	; 0
 7bc:	b0 e0       	ldi	r27, 0x00	; 0
 7be:	8a 01       	movw	r16, r20
 7c0:	9b 01       	movw	r18, r22
 7c2:	08 2b       	or	r16, r24
 7c4:	19 2b       	or	r17, r25
 7c6:	2a 2b       	or	r18, r26
 7c8:	3b 2b       	or	r19, r27
 7ca:	c9 01       	movw	r24, r18
 7cc:	b8 01       	movw	r22, r16
}
 7ce:	1f 91       	pop	r17
 7d0:	0f 91       	pop	r16
 7d2:	08 95       	ret

000007d4 <REC_POLL>:

void REC_POLL(uint16_t time){
 7d4:	cf 93       	push	r28
 7d6:	df 93       	push	r29
	PORTB = ~rec_index;
 7d8:	80 91 09 02 	lds	r24, 0x0209
 7dc:	80 95       	com	r24
 7de:	85 b9       	out	0x05, r24	; 5
	
	if(PLAY && REC_que){
 7e0:	80 91 07 02 	lds	r24, 0x0207
 7e4:	88 23       	and	r24, r24
 7e6:	09 f4       	brne	.+2      	; 0x7ea <REC_POLL+0x16>
 7e8:	43 c0       	rjmp	.+134    	; 0x870 <REC_POLL+0x9c>
 7ea:	80 91 0a 02 	lds	r24, 0x020A
 7ee:	88 23       	and	r24, r24
 7f0:	09 f4       	brne	.+2      	; 0x7f4 <REC_POLL+0x20>
 7f2:	3e c0       	rjmp	.+124    	; 0x870 <REC_POLL+0x9c>
		MIDI_send(com[rec_index], tones[rec_index], vol[rec_index]);
 7f4:	80 91 09 02 	lds	r24, 0x0209
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	dc 01       	movw	r26, r24
 7fc:	a3 5f       	subi	r26, 0xF3	; 243
 7fe:	b7 4f       	sbci	r27, 0xF7	; 247
 800:	fc 01       	movw	r30, r24
 802:	e3 5f       	subi	r30, 0xF3	; 243
 804:	fc 4f       	sbci	r31, 0xFC	; 252
 806:	ec 01       	movw	r28, r24
 808:	c3 5f       	subi	r28, 0xF3	; 243
 80a:	dd 4f       	sbci	r29, 0xFD	; 253
 80c:	4c 91       	ld	r20, X
 80e:	60 81       	ld	r22, Z
 810:	88 81       	ld	r24, Y
 812:	bb dc       	rcall	.-1674   	; 0x18a <MIDI_send>
		//PORTB = ~rec_index;
		
		// Last record will be of time zero
		// Restart the playback in that case
		if(com[rec_index] == 0){
 814:	80 91 09 02 	lds	r24, 0x0209
 818:	e8 2f       	mov	r30, r24
 81a:	f0 e0       	ldi	r31, 0x00	; 0
 81c:	e3 5f       	subi	r30, 0xF3	; 243
 81e:	fd 4f       	sbci	r31, 0xFD	; 253
 820:	90 81       	ld	r25, Z
 822:	91 11       	cpse	r25, r1
 824:	0f c0       	rjmp	.+30     	; 0x844 <REC_POLL+0x70>
			MIDI_send(com[0], tones[0], vol[0]);
 826:	40 91 0d 08 	lds	r20, 0x080D
 82a:	60 91 0d 03 	lds	r22, 0x030D
 82e:	80 91 0d 02 	lds	r24, 0x020D
 832:	ab dc       	rcall	.-1706   	; 0x18a <MIDI_send>
			
			rec_index = 1;
 834:	81 e0       	ldi	r24, 0x01	; 1
 836:	80 93 09 02 	sts	0x0209, r24
	OCR1A = time;
}

void TIME_reset(void)
{
	software_time = 0;
 83a:	10 92 0c 02 	sts	0x020C, r1
 83e:	10 92 0b 02 	sts	0x020B, r1
 842:	03 c0       	rjmp	.+6      	; 0x84a <REC_POLL+0x76>
			rec_index = 1;
			TIME_reset();
			
		}
		else{
			rec_index++;
 844:	8f 5f       	subi	r24, 0xFF	; 255
 846:	80 93 09 02 	sts	0x0209, r24
		}
		
		TIME_Set_ISR(rec_time[rec_index]);	
 84a:	e0 91 09 02 	lds	r30, 0x0209
 84e:	f0 e0       	ldi	r31, 0x00	; 0
 850:	ee 0f       	add	r30, r30
 852:	ff 1f       	adc	r31, r31
 854:	ee 0f       	add	r30, r30
 856:	ff 1f       	adc	r31, r31
 858:	e3 5f       	subi	r30, 0xF3	; 243
 85a:	fb 4f       	sbci	r31, 0xFB	; 251
 85c:	60 81       	ld	r22, Z
 85e:	71 81       	ldd	r23, Z+1	; 0x01
 860:	82 81       	ldd	r24, Z+2	; 0x02
 862:	93 81       	ldd	r25, Z+3	; 0x03
 864:	8b df       	rcall	.-234    	; 0x77c <TIME_Set_ISR>
		
		REC_que--; // If a command is qued, que >= 1, subtract until all are sent
 866:	80 91 0a 02 	lds	r24, 0x020A
 86a:	81 50       	subi	r24, 0x01	; 1
 86c:	80 93 0a 02 	sts	0x020A, r24
	}
	
	// There will be no new interrupt if PLAY == 0
}
 870:	df 91       	pop	r29
 872:	cf 91       	pop	r28
 874:	08 95       	ret

00000876 <REC_start>:
		rec_index++;
	}
}

void REC_start(void){
	REC = 1;
 876:	81 e0       	ldi	r24, 0x01	; 1
 878:	80 93 08 02 	sts	0x0208, r24
	rec_index = 0;
 87c:	10 92 09 02 	sts	0x0209, r1
	OCR1A = time;
}

void TIME_reset(void)
{
	software_time = 0;
 880:	10 92 0c 02 	sts	0x020C, r1
 884:	10 92 0b 02 	sts	0x020B, r1
 888:	08 95       	ret

0000088a <REC_stop>:
	REC = 1;
	rec_index = 0;
	TIME_reset();
}

void REC_stop(void){
 88a:	cf 93       	push	r28
 88c:	df 93       	push	r29
	// always record both on AND off commands = even number
	if(rec_index & 0x01){ // if not even
 88e:	80 91 09 02 	lds	r24, 0x0209
 892:	80 ff       	sbrs	r24, 0
 894:	11 c0       	rjmp	.+34     	; 0x8b8 <REC_stop+0x2e>
		REC_add((com[rec_index-1] & 0b11101111), tones[rec_index-1]);
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	01 97       	sbiw	r24, 0x01	; 1
 89a:	fc 01       	movw	r30, r24
 89c:	e3 5f       	subi	r30, 0xF3	; 243
 89e:	fc 4f       	sbci	r31, 0xFC	; 252
 8a0:	dc 01       	movw	r26, r24
 8a2:	a3 5f       	subi	r26, 0xF3	; 243
 8a4:	bd 4f       	sbci	r27, 0xFD	; 253
 8a6:	8c 91       	ld	r24, X
 8a8:	60 81       	ld	r22, Z
 8aa:	8f 7e       	andi	r24, 0xEF	; 239
 8ac:	24 d0       	rcall	.+72     	; 0x8f6 <REC_add>
		//com[rec_index]  = (com[rec_index-1] & 0b11101111); 
		//tones[rec_index] = tones[rec_index-1];
		//vol[rec_index] = volume;
		rec_index++;
 8ae:	80 91 09 02 	lds	r24, 0x0209
 8b2:	8f 5f       	subi	r24, 0xFF	; 255
 8b4:	80 93 09 02 	sts	0x0209, r24
	}
	
	com[rec_index]  = 0;
 8b8:	c0 91 09 02 	lds	r28, 0x0209
 8bc:	d0 e0       	ldi	r29, 0x00	; 0
 8be:	fe 01       	movw	r30, r28
 8c0:	e3 5f       	subi	r30, 0xF3	; 243
 8c2:	fd 4f       	sbci	r31, 0xFD	; 253
 8c4:	10 82       	st	Z, r1
	tones[rec_index] = 0;
 8c6:	fe 01       	movw	r30, r28
 8c8:	e3 5f       	subi	r30, 0xF3	; 243
 8ca:	fc 4f       	sbci	r31, 0xFC	; 252
 8cc:	10 82       	st	Z, r1
	vol[rec_index] = 0;
 8ce:	fe 01       	movw	r30, r28
 8d0:	e3 5f       	subi	r30, 0xF3	; 243
 8d2:	f7 4f       	sbci	r31, 0xF7	; 247
 8d4:	10 82       	st	Z, r1
	rec_time[rec_index] = TIME_read();
 8d6:	62 df       	rcall	.-316    	; 0x79c <TIME_read>
 8d8:	cc 0f       	add	r28, r28
 8da:	dd 1f       	adc	r29, r29
 8dc:	cc 0f       	add	r28, r28
 8de:	dd 1f       	adc	r29, r29
 8e0:	c3 5f       	subi	r28, 0xF3	; 243
 8e2:	db 4f       	sbci	r29, 0xFB	; 251
 8e4:	68 83       	st	Y, r22
 8e6:	79 83       	std	Y+1, r23	; 0x01
 8e8:	8a 83       	std	Y+2, r24	; 0x02
 8ea:	9b 83       	std	Y+3, r25	; 0x03
	REC = 0;
 8ec:	10 92 08 02 	sts	0x0208, r1
}
 8f0:	df 91       	pop	r29
 8f2:	cf 91       	pop	r28
 8f4:	08 95       	ret

000008f6 <REC_add>:
	}
	
	// There will be no new interrupt if PLAY == 0
}

void REC_add(uint8_t command, uint8_t tone){
 8f6:	0f 93       	push	r16
 8f8:	1f 93       	push	r17
 8fa:	cf 93       	push	r28
 8fc:	df 93       	push	r29
 8fe:	08 2f       	mov	r16, r24
 900:	16 2f       	mov	r17, r22
	
	// Stop recording if overflows = reset and starts from clean
	if(rec_index == 254){
 902:	90 91 09 02 	lds	r25, 0x0209
 906:	9e 3f       	cpi	r25, 0xFE	; 254
 908:	09 f4       	brne	.+2      	; 0x90c <REC_add+0x16>
		REC_stop();
 90a:	bf df       	rcall	.-130    	; 0x88a <REC_stop>
	}
	
	if(REC){ // Recording 
 90c:	90 91 08 02 	lds	r25, 0x0208
 910:	99 23       	and	r25, r25
 912:	99 f1       	breq	.+102    	; 0x97a <REC_add+0x84>
		com[rec_index]  = command;
 914:	90 91 09 02 	lds	r25, 0x0209
 918:	c9 2f       	mov	r28, r25
 91a:	d0 e0       	ldi	r29, 0x00	; 0
 91c:	fe 01       	movw	r30, r28
 91e:	e3 5f       	subi	r30, 0xF3	; 243
 920:	fd 4f       	sbci	r31, 0xFD	; 253
 922:	00 83       	st	Z, r16
		tones[rec_index] = tone;
 924:	fe 01       	movw	r30, r28
 926:	e3 5f       	subi	r30, 0xF3	; 243
 928:	fc 4f       	sbci	r31, 0xFC	; 252
 92a:	10 83       	st	Z, r17
		vol[rec_index] = volume;
 92c:	80 91 04 02 	lds	r24, 0x0204
 930:	fe 01       	movw	r30, r28
 932:	e3 5f       	subi	r30, 0xF3	; 243
 934:	f7 4f       	sbci	r31, 0xF7	; 247
 936:	80 83       	st	Z, r24
		
		// Recording starts on first tone, so set time = 0 and reset timer
		if(rec_index == 0){
 938:	91 11       	cpse	r25, r1
 93a:	0f c0       	rjmp	.+30     	; 0x95a <REC_add+0x64>
			rec_time[rec_index] = 0;
 93c:	cc 0f       	add	r28, r28
 93e:	dd 1f       	adc	r29, r29
 940:	cc 0f       	add	r28, r28
 942:	dd 1f       	adc	r29, r29
 944:	c3 5f       	subi	r28, 0xF3	; 243
 946:	db 4f       	sbci	r29, 0xFB	; 251
 948:	18 82       	st	Y, r1
 94a:	19 82       	std	Y+1, r1	; 0x01
 94c:	1a 82       	std	Y+2, r1	; 0x02
 94e:	1b 82       	std	Y+3, r1	; 0x03
	OCR1A = time;
}

void TIME_reset(void)
{
	software_time = 0;
 950:	10 92 0c 02 	sts	0x020C, r1
 954:	10 92 0b 02 	sts	0x020B, r1
 958:	0b c0       	rjmp	.+22     	; 0x970 <REC_add+0x7a>
			
			
			
		}
		
		else { rec_time[rec_index] = TIME_read();}
 95a:	20 df       	rcall	.-448    	; 0x79c <TIME_read>
 95c:	cc 0f       	add	r28, r28
 95e:	dd 1f       	adc	r29, r29
 960:	cc 0f       	add	r28, r28
 962:	dd 1f       	adc	r29, r29
 964:	c3 5f       	subi	r28, 0xF3	; 243
 966:	db 4f       	sbci	r29, 0xFB	; 251
 968:	68 83       	st	Y, r22
 96a:	79 83       	std	Y+1, r23	; 0x01
 96c:	8a 83       	std	Y+2, r24	; 0x02
 96e:	9b 83       	std	Y+3, r25	; 0x03
			
		rec_index++;
 970:	80 91 09 02 	lds	r24, 0x0209
 974:	8f 5f       	subi	r24, 0xFF	; 255
 976:	80 93 09 02 	sts	0x0209, r24
	}
}
 97a:	df 91       	pop	r29
 97c:	cf 91       	pop	r28
 97e:	1f 91       	pop	r17
 980:	0f 91       	pop	r16
 982:	08 95       	ret

00000984 <REC_state>:
	REC = 0;
}

void REC_state(uint8_t switches)
// For starting the play. Always from the start
{
 984:	cf 93       	push	r28
 986:	c8 2f       	mov	r28, r24
	if(switches & 0x40){
 988:	86 ff       	sbrs	r24, 6
 98a:	11 c0       	rjmp	.+34     	; 0x9ae <REC_state+0x2a>
		if(!PLAY){  // If play channel one is on
 98c:	80 91 07 02 	lds	r24, 0x0207
 990:	81 11       	cpse	r24, r1
 992:	1a c0       	rjmp	.+52     	; 0x9c8 <REC_state+0x44>
			PLAY = 1;
 994:	81 e0       	ldi	r24, 0x01	; 1
 996:	80 93 07 02 	sts	0x0207, r24
			
			// First note is on time = 0 which doesn't exist in our approach,
			// Therefor call the ICR for the first tone and then reset timer.
			rec_index = 0;
 99a:	10 92 09 02 	sts	0x0209, r1
			REC_POLL(0);
 99e:	80 e0       	ldi	r24, 0x00	; 0
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	18 df       	rcall	.-464    	; 0x7d4 <REC_POLL>
	OCR1A = time;
}

void TIME_reset(void)
{
	software_time = 0;
 9a4:	10 92 0c 02 	sts	0x020C, r1
 9a8:	10 92 0b 02 	sts	0x020B, r1
 9ac:	0d c0       	rjmp	.+26     	; 0x9c8 <REC_state+0x44>
			REC_POLL(0);
			TIME_reset();
		}
	}
	else{ // If should be off
		if(PLAY){ // Turn off if on
 9ae:	80 91 07 02 	lds	r24, 0x0207
 9b2:	88 23       	and	r24, r24
 9b4:	49 f0       	breq	.+18     	; 0x9c8 <REC_state+0x44>
			PLAY = 0;
 9b6:	10 92 07 02 	sts	0x0207, r1
			
			// Make sure to end the last tone!
			if(rec_index & 0x01){
 9ba:	80 91 09 02 	lds	r24, 0x0209
 9be:	80 ff       	sbrs	r24, 0
 9c0:	03 c0       	rjmp	.+6      	; 0x9c8 <REC_state+0x44>
				REC_POLL(0);
 9c2:	80 e0       	ldi	r24, 0x00	; 0
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	06 df       	rcall	.-500    	; 0x7d4 <REC_POLL>
			}
		}
	}
	
	if(switches & 0x80){ // Recording?
 9c8:	cc 23       	and	r28, r28
 9ca:	34 f4       	brge	.+12     	; 0x9d8 <REC_state+0x54>
		if(REC == 0){	 // Change from before?
 9cc:	80 91 08 02 	lds	r24, 0x0208
 9d0:	81 11       	cpse	r24, r1
 9d2:	07 c0       	rjmp	.+14     	; 0x9e2 <REC_state+0x5e>
			REC_start();
 9d4:	50 df       	rcall	.-352    	; 0x876 <REC_start>
 9d6:	05 c0       	rjmp	.+10     	; 0x9e2 <REC_state+0x5e>
		}
	}
	else{
		if(REC == 1){ // If rec on, but swithces not in that position, stop
 9d8:	80 91 08 02 	lds	r24, 0x0208
 9dc:	81 30       	cpi	r24, 0x01	; 1
 9de:	09 f4       	brne	.+2      	; 0x9e2 <REC_state+0x5e>
			REC_stop();
 9e0:	54 df       	rcall	.-344    	; 0x88a <REC_stop>
		}
	}
 9e2:	cf 91       	pop	r28
 9e4:	08 95       	ret

000009e6 <main>:

#include "main.h"

int main(void)
{
	Init_ports();
 9e6:	9e db       	rcall	.-2244   	; 0x124 <Init_ports>
	Init_UART0(9600);
 9e8:	80 e8       	ldi	r24, 0x80	; 128
 9ea:	95 e2       	ldi	r25, 0x25	; 37
 9ec:	a3 db       	rcall	.-2234   	; 0x134 <Init_UART0>
	init_Timer1();
 9ee:	7a de       	rcall	.-780    	; 0x6e4 <init_Timer1>
	init_Timer0();
 9f0:	56 de       	rcall	.-852    	; 0x69e <init_Timer0>
	init_adc();
 9f2:	25 de       	rcall	.-950    	; 0x63e <init_adc>
	sei();
 9f4:	78 94       	sei
	
	// Pressed buttons
	uint16_t previus = 0x0000;
 9f6:	00 e0       	ldi	r16, 0x00	; 0
 9f8:	10 e0       	ldi	r17, 0x00	; 0
 9fa:	01 c0       	rjmp	.+2      	; 0x9fe <main+0x18>
*/

#include "main.h"

int main(void)
{
 9fc:	8e 01       	movw	r16, r28
	
	while
	(1)
	{
		
		current = (PINA) | (PIND << 8);
 9fe:	c0 b1       	in	r28, 0x00	; 0
 a00:	89 b1       	in	r24, 0x09	; 9
 a02:	d0 e0       	ldi	r29, 0x00	; 0
 a04:	d8 2b       	or	r29, r24
		switches = PINC; // Update switches
 a06:	86 b1       	in	r24, 0x06	; 6
 a08:	80 93 06 02 	sts	0x0206, r24
		REC_state(switches);
 a0c:	80 91 06 02 	lds	r24, 0x0206
 a10:	b9 df       	rcall	.-142    	; 0x984 <REC_state>
		REC_POLL(0);
 a12:	80 e0       	ldi	r24, 0x00	; 0
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	de de       	rcall	.-580    	; 0x7d4 <REC_POLL>
		//PORTB = current; // rx_ch;
		
		change = current^previus;
 a18:	98 01       	movw	r18, r16
 a1a:	2c 27       	eor	r18, r28
 a1c:	3d 27       	eor	r19, r29
		
		if(current & change) // Note on
 a1e:	c9 01       	movw	r24, r18
 a20:	8c 23       	and	r24, r28
 a22:	9d 23       	and	r25, r29
 a24:	00 97       	sbiw	r24, 0x00	; 0
 a26:	89 f0       	breq	.+34     	; 0xa4a <main+0x64>
		{
			command = 0b10010000 | (switches & 0x0C) >> 2;
 a28:	10 91 06 02 	lds	r17, 0x0206
 a2c:	1c 70       	andi	r17, 0x0C	; 12
 a2e:	16 95       	lsr	r17
 a30:	16 95       	lsr	r17
 a32:	10 69       	ori	r17, 0x90	; 144
			tone = MIDI_Conversion(current & change);
 a34:	b7 db       	rcall	.-2194   	; 0x1a4 <MIDI_Conversion>
 a36:	08 2f       	mov	r16, r24
			
			REC_add(command, tone);
 a38:	68 2f       	mov	r22, r24
 a3a:	81 2f       	mov	r24, r17
 a3c:	5c df       	rcall	.-328    	; 0x8f6 <REC_add>
			
			MIDI_send(command, tone, volume);
 a3e:	40 91 04 02 	lds	r20, 0x0204
 a42:	60 2f       	mov	r22, r16
 a44:	81 2f       	mov	r24, r17
 a46:	a1 db       	rcall	.-2238   	; 0x18a <MIDI_send>
 a48:	d9 cf       	rjmp	.-78     	; 0x9fc <main+0x16>
			
			
		}
		else if(previus & change) // Note off
 a4a:	c9 01       	movw	r24, r18
 a4c:	80 23       	and	r24, r16
 a4e:	91 23       	and	r25, r17
 a50:	00 97       	sbiw	r24, 0x00	; 0
 a52:	a1 f2       	breq	.-88     	; 0x9fc <main+0x16>
		{

			command = 0b10000000 | ((switches & 0x0C) >> 2);
 a54:	20 91 06 02 	lds	r18, 0x0206
 a58:	2c 70       	andi	r18, 0x0C	; 12
 a5a:	26 95       	lsr	r18
 a5c:	26 95       	lsr	r18
 a5e:	20 68       	ori	r18, 0x80	; 128
 a60:	f2 2e       	mov	r15, r18
			
			tone = MIDI_Conversion(previus & change);
 a62:	a0 db       	rcall	.-2240   	; 0x1a4 <MIDI_Conversion>
 a64:	18 2f       	mov	r17, r24
						
			REC_add(command, tone);
 a66:	68 2f       	mov	r22, r24
 a68:	8f 2d       	mov	r24, r15
 a6a:	45 df       	rcall	.-374    	; 0x8f6 <REC_add>
			MIDI_send(command, tone, volume);
 a6c:	40 91 04 02 	lds	r20, 0x0204
 a70:	61 2f       	mov	r22, r17
 a72:	8f 2d       	mov	r24, r15
 a74:	8a db       	rcall	.-2284   	; 0x18a <MIDI_send>
 a76:	c2 cf       	rjmp	.-124    	; 0x9fc <main+0x16>

00000a78 <_exit>:
 a78:	f8 94       	cli

00000a7a <__stop_program>:
 a7a:	ff cf       	rjmp	.-2      	; 0xa7a <__stop_program>
