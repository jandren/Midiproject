
Midiproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800200  0000051a  000005ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000051a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000205  00800216  00800216  000005c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000888  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000430  00000000  00000000  00000f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c54  00000000  00000000  0000139c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000022c  00000000  00000000  00001ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00008b7d  00000000  00000000  0000221c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000071c  00000000  00000000  0000ad99  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  0000b4b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003870  00000000  00000000  0000b575  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c1       	rjmp	.+652    	; 0x2d2 <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	51 c2       	rjmp	.+1186   	; 0x500 <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	75 c0       	rjmp	.+234    	; 0x150 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c2       	rjmp	.+1088   	; 0x4b6 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e1       	ldi	r30, 0x1A	; 26
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 31       	cpi	r26, 0x16	; 22
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	24 e0       	ldi	r18, 0x04	; 4
 110:	a6 e1       	ldi	r26, 0x16	; 22
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ab 31       	cpi	r26, 0x1B	; 27
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	8b d1       	rcall	.+790    	; 0x436 <main>
 120:	fa c1       	rjmp	.+1012   	; 0x516 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <Init_ports>:
void Init_ports(void)
{
	// Hard coded setup
	
	// Set up port B LEDS
	DDRB = 0xFF; // No inputs, all ports as outputs
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	84 b9       	out	0x04, r24	; 4
	PORTB = 0xFF; // All LEDS are off
 128:	85 b9       	out	0x05, r24	; 5
	
	// Set up port D Buttons
	DDRD = 0x00;
 12a:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0xFF; // Set pull up on the inputs
 12c:	8b b9       	out	0x0b, r24	; 11
	
	// Set up port C Switches
	DDRC = 0x00;
 12e:	17 b8       	out	0x07, r1	; 7
	PORTC = 0xFF; // Set pull up on the inputs
 130:	88 b9       	out	0x08, r24	; 8
 132:	08 95       	ret

00000134 <Init_UART0>:
void Init_UART0(uint16_t BAUDRATE)
{
	//ubrr = F_CPU/16uL/BAUDRATE;
	
	// Set baud rate to 9600 @ 8MHz
	UBRR0L = 51;
 134:	83 e3       	ldi	r24, 0x33	; 51
 136:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0;
 13a:	10 92 c5 00 	sts	0x00C5, r1
	
	// No parity bit, 8 bit char, one stop bit
	UCSR0A = 0x00;
 13e:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0b10011000;
 142:	88 e9       	ldi	r24, 0x98	; 152
 144:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = 0b00000110;
 148:	86 e0       	ldi	r24, 0x06	; 6
 14a:	80 93 c2 00 	sts	0x00C2, r24
 14e:	08 95       	ret

00000150 <__vector_25>:
}

ISR(USART0_RX_vect)
{
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
	rx_ch = UDR0;             //read UART register into value
 15e:	80 91 c6 00 	lds	r24, 0x00C6
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	90 93 01 02 	sts	0x0201, r25
 168:	80 93 00 02 	sts	0x0200, r24
}
 16c:	9f 91       	pop	r25
 16e:	8f 91       	pop	r24
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <UART_out>:

void UART_out(uint8_t ch)
{
	while((UCSR0A & (1<<UDRE0)) == 0); // Wait until empty
 17a:	e0 ec       	ldi	r30, 0xC0	; 192
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	90 81       	ld	r25, Z
 180:	95 ff       	sbrs	r25, 5
 182:	fd cf       	rjmp	.-6      	; 0x17e <UART_out+0x4>
	
	UDR0 = ch; // Put character to be sent in the output register
 184:	80 93 c6 00 	sts	0x00C6, r24
 188:	08 95       	ret

0000018a <MIDI_send>:
}

void MIDI_send(uint8_t command, uint8_t tone, uint8_t volume)
// Send the Midi command, not much really but abstracts the code a little.
{
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	d6 2f       	mov	r29, r22
 190:	c4 2f       	mov	r28, r20
	UART_out(command); // Command 7-bit
 192:	f3 df       	rcall	.-26     	; 0x17a <UART_out>
	UART_out(tone); // Note 7bit
 194:	8d 2f       	mov	r24, r29
 196:	f1 df       	rcall	.-30     	; 0x17a <UART_out>
	UART_out(volume >> 1); // Velocity 7 bit from 8 bit volume
 198:	8c 2f       	mov	r24, r28
 19a:	86 95       	lsr	r24
 19c:	ee df       	rcall	.-36     	; 0x17a <UART_out>
	
	// See Midi command table for exact bits to input.
}
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <MIDI_Conversion>:

uint8_t MIDI_Conversion(uint8_t pressed)
{
	uint8_t converted = 0;
	uint8_t offset = 48;
	uint8_t pitch = switches & 0x03;		// mask with two far right switches
 1a4:	90 91 16 02 	lds	r25, 0x0216
 1a8:	93 70       	andi	r25, 0x03	; 3
		 			// B4 = 59 or B5 = 71 or B6 = 83
	if( pressed &  0x80) converted = offset + 12 + 12 * pitch;
		 			// C5 = 60 or C6 = 72 or C7 = 84
*/

	switch(pressed)
 1aa:	88 30       	cpi	r24, 0x08	; 8
 1ac:	49 f1       	breq	.+82     	; 0x200 <MIDI_Conversion+0x5c>
 1ae:	40 f4       	brcc	.+16     	; 0x1c0 <MIDI_Conversion+0x1c>
 1b0:	82 30       	cpi	r24, 0x02	; 2
 1b2:	c1 f0       	breq	.+48     	; 0x1e4 <MIDI_Conversion+0x40>
 1b4:	84 30       	cpi	r24, 0x04	; 4
 1b6:	e9 f0       	breq	.+58     	; 0x1f2 <MIDI_Conversion+0x4e>
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	09 f0       	breq	.+2      	; 0x1be <MIDI_Conversion+0x1a>
 1bc:	44 c0       	rjmp	.+136    	; 0x246 <MIDI_Conversion+0xa2>
 1be:	0b c0       	rjmp	.+22     	; 0x1d6 <MIDI_Conversion+0x32>
 1c0:	80 32       	cpi	r24, 0x20	; 32
 1c2:	61 f1       	breq	.+88     	; 0x21c <MIDI_Conversion+0x78>
 1c4:	18 f4       	brcc	.+6      	; 0x1cc <MIDI_Conversion+0x28>
 1c6:	80 31       	cpi	r24, 0x10	; 16
 1c8:	11 f1       	breq	.+68     	; 0x20e <MIDI_Conversion+0x6a>
 1ca:	3d c0       	rjmp	.+122    	; 0x246 <MIDI_Conversion+0xa2>
 1cc:	80 34       	cpi	r24, 0x40	; 64
 1ce:	69 f1       	breq	.+90     	; 0x22a <MIDI_Conversion+0x86>
 1d0:	80 38       	cpi	r24, 0x80	; 128
 1d2:	91 f1       	breq	.+100    	; 0x238 <MIDI_Conversion+0x94>
 1d4:	38 c0       	rjmp	.+112    	; 0x246 <MIDI_Conversion+0xa2>
	{
		case 0x01:
		converted = 48 + 12 * pitch;
 1d6:	89 2f       	mov	r24, r25
 1d8:	88 0f       	add	r24, r24
 1da:	89 0f       	add	r24, r25
 1dc:	88 0f       	add	r24, r24
 1de:	88 0f       	add	r24, r24
 1e0:	80 5d       	subi	r24, 0xD0	; 208
		break;				// C4 = 48 or C5 = 60 or C6 = 72
 1e2:	08 95       	ret
		case 0x02:
		converted = 50 + 12 * pitch;
 1e4:	89 2f       	mov	r24, r25
 1e6:	88 0f       	add	r24, r24
 1e8:	89 0f       	add	r24, r25
 1ea:	88 0f       	add	r24, r24
 1ec:	88 0f       	add	r24, r24
 1ee:	8e 5c       	subi	r24, 0xCE	; 206
		break;				// D4 = 50 or D5 = 62 or D6 = 74
 1f0:	08 95       	ret
		case 0x04:
		converted = 52 + 12 * pitch;
 1f2:	89 2f       	mov	r24, r25
 1f4:	88 0f       	add	r24, r24
 1f6:	89 0f       	add	r24, r25
 1f8:	88 0f       	add	r24, r24
 1fa:	88 0f       	add	r24, r24
 1fc:	8c 5c       	subi	r24, 0xCC	; 204
		break;				// E4 = 52 or E5 = 64 or E6 = 76
 1fe:	08 95       	ret
		case 0x08:
		converted = 53 + 12 * pitch;
 200:	89 2f       	mov	r24, r25
 202:	88 0f       	add	r24, r24
 204:	89 0f       	add	r24, r25
 206:	88 0f       	add	r24, r24
 208:	88 0f       	add	r24, r24
 20a:	8b 5c       	subi	r24, 0xCB	; 203
		break;				// F4 = 53 or F5 = 65 or F6 = 77
 20c:	08 95       	ret
		case 0x10:
		converted = 55 + 12 * pitch;
 20e:	89 2f       	mov	r24, r25
 210:	88 0f       	add	r24, r24
 212:	89 0f       	add	r24, r25
 214:	88 0f       	add	r24, r24
 216:	88 0f       	add	r24, r24
 218:	89 5c       	subi	r24, 0xC9	; 201
		break;				// G4 = 55 or G5 = 67 or G6 = 79
 21a:	08 95       	ret
		case 0x20:
		converted = 57 + 12 * pitch;
 21c:	89 2f       	mov	r24, r25
 21e:	88 0f       	add	r24, r24
 220:	89 0f       	add	r24, r25
 222:	88 0f       	add	r24, r24
 224:	88 0f       	add	r24, r24
 226:	87 5c       	subi	r24, 0xC7	; 199
		break;				// A4 = 57 or A5 = 69 or A6 = 81
 228:	08 95       	ret
		case 0x40:
		converted = 59 + 12 * pitch;
 22a:	89 2f       	mov	r24, r25
 22c:	88 0f       	add	r24, r24
 22e:	89 0f       	add	r24, r25
 230:	88 0f       	add	r24, r24
 232:	88 0f       	add	r24, r24
 234:	85 5c       	subi	r24, 0xC5	; 197
		break;				// B4 = 59 or B5 = 71 or B6 = 83
 236:	08 95       	ret
		case 0x80:
		converted = 60 + 12 * pitch;
 238:	89 2f       	mov	r24, r25
 23a:	88 0f       	add	r24, r24
 23c:	89 0f       	add	r24, r25
 23e:	88 0f       	add	r24, r24
 240:	88 0f       	add	r24, r24
 242:	84 5c       	subi	r24, 0xC4	; 196
		break;				// C5 = 60 or C6 = 72 or C7 = 84
 244:	08 95       	ret
	// See Midi command table for exact bits to input.
}

uint8_t MIDI_Conversion(uint8_t pressed)
{
	uint8_t converted = 0;
 246:	80 e0       	ldi	r24, 0x00	; 0
		default:
		break;
	}
	
	return converted;
 248:	08 95       	ret

0000024a <init_Timer1>:
	software_comp = time;
}

void TIME_reset(void)
{
	software_time = 0;
 24a:	10 92 80 00 	sts	0x0080, r1
 24e:	82 e0       	ldi	r24, 0x02	; 2
 250:	80 93 6f 00 	sts	0x006F, r24
 254:	10 92 85 00 	sts	0x0085, r1
 258:	10 92 84 00 	sts	0x0084, r1
 25c:	8d e7       	ldi	r24, 0x7D	; 125
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	90 93 89 00 	sts	0x0089, r25
 264:	80 93 88 00 	sts	0x0088, r24
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	80 93 81 00 	sts	0x0081, r24
 26e:	08 95       	ret

00000270 <REC_ISR>:
	
	
}

void REC_ISR(uint16_t time){
	if(PLAY){
 270:	80 91 02 02 	lds	r24, 0x0202
 274:	88 23       	and	r24, r24
 276:	61 f1       	breq	.+88     	; 0x2d0 <REC_ISR+0x60>
		
		//MIDI_send(com[rec_index], tones[rec_index], vol[rec_index]);
		UART_out(com[rec_index]);
 278:	e0 91 18 02 	lds	r30, 0x0218
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	e3 5f       	subi	r30, 0xF3	; 243
 280:	fd 4f       	sbci	r31, 0xFD	; 253
 282:	80 81       	ld	r24, Z
 284:	7a df       	rcall	.-268    	; 0x17a <UART_out>
		PORTB = ~rec_index;
 286:	80 91 18 02 	lds	r24, 0x0218
 28a:	80 95       	com	r24
 28c:	85 b9       	out	0x05, r24	; 5
		rec_index++;
 28e:	e0 91 18 02 	lds	r30, 0x0218
 292:	ef 5f       	subi	r30, 0xFF	; 255
 294:	e0 93 18 02 	sts	0x0218, r30
		
		
		// Last record will be of time zero
		// Restart the playback in that case
		if(rec_time[rec_index] == 0){
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	ee 0f       	add	r30, r30
 29c:	ff 1f       	adc	r31, r31
 29e:	ed 5f       	subi	r30, 0xFD	; 253
 2a0:	fd 4f       	sbci	r31, 0xFD	; 253
 2a2:	80 81       	ld	r24, Z
 2a4:	91 81       	ldd	r25, Z+1	; 0x01
 2a6:	00 97       	sbiw	r24, 0x00	; 0
 2a8:	79 f4       	brne	.+30     	; 0x2c8 <REC_ISR+0x58>
			rec_index = 0;
 2aa:	10 92 18 02 	sts	0x0218, r1
			TIME_Set_ISR(rec_time[0]);
 2ae:	80 91 03 02 	lds	r24, 0x0203
 2b2:	90 91 04 02 	lds	r25, 0x0204
	}
}

void TIME_Set_ISR(uint16_t time)
{
	software_comp = time;
 2b6:	90 93 13 02 	sts	0x0213, r25
 2ba:	80 93 12 02 	sts	0x0212, r24
}

void TIME_reset(void)
{
	software_time = 0;
 2be:	10 92 1a 02 	sts	0x021A, r1
 2c2:	10 92 19 02 	sts	0x0219, r1
 2c6:	08 95       	ret
	}
}

void TIME_Set_ISR(uint16_t time)
{
	software_comp = time;
 2c8:	90 93 13 02 	sts	0x0213, r25
 2cc:	80 93 12 02 	sts	0x0212, r24
 2d0:	08 95       	ret

000002d2 <__vector_17>:
	// Start timer
	TCCR1B	= (1<<CS10); // No Pre-scaler for maximum resolution even at high freq
}

ISR(TIMER1_COMPA_vect)
{
 2d2:	1f 92       	push	r1
 2d4:	0f 92       	push	r0
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	0f 92       	push	r0
 2da:	11 24       	eor	r1, r1
 2dc:	0b b6       	in	r0, 0x3b	; 59
 2de:	0f 92       	push	r0
 2e0:	2f 93       	push	r18
 2e2:	3f 93       	push	r19
 2e4:	4f 93       	push	r20
 2e6:	5f 93       	push	r21
 2e8:	6f 93       	push	r22
 2ea:	7f 93       	push	r23
 2ec:	8f 93       	push	r24
 2ee:	9f 93       	push	r25
 2f0:	af 93       	push	r26
 2f2:	bf 93       	push	r27
 2f4:	ef 93       	push	r30
 2f6:	ff 93       	push	r31
	software_time++;
 2f8:	80 91 19 02 	lds	r24, 0x0219
 2fc:	90 91 1a 02 	lds	r25, 0x021A
 300:	01 96       	adiw	r24, 0x01	; 1
 302:	90 93 1a 02 	sts	0x021A, r25
 306:	80 93 19 02 	sts	0x0219, r24
	//UART_out(software_time);
	if(software_time == software_comp)
 30a:	20 91 19 02 	lds	r18, 0x0219
 30e:	30 91 1a 02 	lds	r19, 0x021A
 312:	80 91 12 02 	lds	r24, 0x0212
 316:	90 91 13 02 	lds	r25, 0x0213
 31a:	28 17       	cp	r18, r24
 31c:	39 07       	cpc	r19, r25
 31e:	29 f4       	brne	.+10     	; 0x32a <__vector_17+0x58>
	{
		REC_ISR(software_time);
 320:	80 91 19 02 	lds	r24, 0x0219
 324:	90 91 1a 02 	lds	r25, 0x021A
 328:	a3 df       	rcall	.-186    	; 0x270 <REC_ISR>
	}
}
 32a:	ff 91       	pop	r31
 32c:	ef 91       	pop	r30
 32e:	bf 91       	pop	r27
 330:	af 91       	pop	r26
 332:	9f 91       	pop	r25
 334:	8f 91       	pop	r24
 336:	7f 91       	pop	r23
 338:	6f 91       	pop	r22
 33a:	5f 91       	pop	r21
 33c:	4f 91       	pop	r20
 33e:	3f 91       	pop	r19
 340:	2f 91       	pop	r18
 342:	0f 90       	pop	r0
 344:	0b be       	out	0x3b, r0	; 59
 346:	0f 90       	pop	r0
 348:	0f be       	out	0x3f, r0	; 63
 34a:	0f 90       	pop	r0
 34c:	1f 90       	pop	r1
 34e:	18 95       	reti

00000350 <REC_add>:
	// There will be no new interrupt if PLAY == 0
}

void REC_add(uint8_t command, uint8_t tone){
	
	com[rec_index]  = command;
 350:	90 91 18 02 	lds	r25, 0x0218
 354:	29 2f       	mov	r18, r25
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	f9 01       	movw	r30, r18
 35a:	e3 5f       	subi	r30, 0xF3	; 243
 35c:	fd 4f       	sbci	r31, 0xFD	; 253
 35e:	80 83       	st	Z, r24
	tones[rec_index] = tone;
 360:	f9 01       	movw	r30, r18
 362:	e5 5e       	subi	r30, 0xE5	; 229
 364:	fd 4f       	sbci	r31, 0xFD	; 253
 366:	60 83       	st	Z, r22
	vol[rec_index] = volume;
 368:	80 91 14 02 	lds	r24, 0x0214
 36c:	f9 01       	movw	r30, r18
 36e:	e5 5e       	subi	r30, 0xE5	; 229
 370:	fc 4f       	sbci	r31, 0xFC	; 252
 372:	80 83       	st	Z, r24
	rec_time[rec_index] = 0; //time_read();
 374:	f9 01       	movw	r30, r18
 376:	ee 0f       	add	r30, r30
 378:	ff 1f       	adc	r31, r31
 37a:	ed 5f       	subi	r30, 0xFD	; 253
 37c:	fd 4f       	sbci	r31, 0xFD	; 253
 37e:	11 82       	std	Z+1, r1	; 0x01
 380:	10 82       	st	Z, r1
	
	rec_index++;	
 382:	9f 5f       	subi	r25, 0xFF	; 255
 384:	90 93 18 02 	sts	0x0218, r25
 388:	08 95       	ret

0000038a <REC_start>:
}

void REC_start(void){
	REC = 1;
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	80 93 17 02 	sts	0x0217, r24
	rec_index = 0;
 390:	10 92 18 02 	sts	0x0218, r1
 394:	08 95       	ret

00000396 <REC_stop>:
	//time_reset();
}

void REC_stop(void){
	com[rec_index]  = 0;
 396:	80 91 18 02 	lds	r24, 0x0218
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	fc 01       	movw	r30, r24
 39e:	e3 5f       	subi	r30, 0xF3	; 243
 3a0:	fd 4f       	sbci	r31, 0xFD	; 253
 3a2:	10 82       	st	Z, r1
	tones[rec_index] = 0;
 3a4:	fc 01       	movw	r30, r24
 3a6:	e5 5e       	subi	r30, 0xE5	; 229
 3a8:	fd 4f       	sbci	r31, 0xFD	; 253
 3aa:	10 82       	st	Z, r1
	vol[rec_index] = 0;
 3ac:	fc 01       	movw	r30, r24
 3ae:	e5 5e       	subi	r30, 0xE5	; 229
 3b0:	fc 4f       	sbci	r31, 0xFC	; 252
 3b2:	10 82       	st	Z, r1
	rec_time[rec_index] = 0;
 3b4:	fc 01       	movw	r30, r24
 3b6:	ee 0f       	add	r30, r30
 3b8:	ff 1f       	adc	r31, r31
 3ba:	ed 5f       	subi	r30, 0xFD	; 253
 3bc:	fd 4f       	sbci	r31, 0xFD	; 253
 3be:	11 82       	std	Z+1, r1	; 0x01
 3c0:	10 82       	st	Z, r1
	REC = 0;
 3c2:	10 92 17 02 	sts	0x0217, r1
 3c6:	08 95       	ret

000003c8 <REC_process>:
{
	software_time = 0;
}


void REC_process(uint8_t switches, uint8_t command, uint8_t tone){
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
 3cc:	c6 2f       	mov	r28, r22
 3ce:	d4 2f       	mov	r29, r20
	
	if(REC == 1){ // If recording already
 3d0:	90 91 17 02 	lds	r25, 0x0217
 3d4:	91 30       	cpi	r25, 0x01	; 1
 3d6:	41 f4       	brne	.+16     	; 0x3e8 <REC_process+0x20>
		if(switches & 0x80){
 3d8:	88 23       	and	r24, r24
 3da:	24 f4       	brge	.+8      	; 0x3e4 <REC_process+0x1c>
			REC_add(command, tone);
 3dc:	64 2f       	mov	r22, r20
 3de:	8c 2f       	mov	r24, r28
 3e0:	b7 df       	rcall	.-146    	; 0x350 <REC_add>
 3e2:	08 c0       	rjmp	.+16     	; 0x3f4 <REC_process+0x2c>
		}
		else REC_stop();
 3e4:	d8 df       	rcall	.-80     	; 0x396 <REC_stop>
 3e6:	06 c0       	rjmp	.+12     	; 0x3f4 <REC_process+0x2c>
	}
	
	else{
		if(switches & 0x80){ // Start recording and save first command
 3e8:	88 23       	and	r24, r24
 3ea:	24 f4       	brge	.+8      	; 0x3f4 <REC_process+0x2c>
			 REC_start();
 3ec:	ce df       	rcall	.-100    	; 0x38a <REC_start>
			 REC_add(command, tone);
 3ee:	6d 2f       	mov	r22, r29
 3f0:	8c 2f       	mov	r24, r28
 3f2:	ae df       	rcall	.-164    	; 0x350 <REC_add>
		}
	}

	
	
}
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	08 95       	ret

000003fa <REC_play>:
}

void REC_play(uint8_t switches)
// For starting the play. Always from the start
{
	if(switches & 0x40){
 3fa:	86 ff       	sbrs	r24, 6
 3fc:	16 c0       	rjmp	.+44     	; 0x42a <REC_play+0x30>
		if(!PLAY){  // If play channel one is on
 3fe:	80 91 02 02 	lds	r24, 0x0202
 402:	81 11       	cpse	r24, r1
 404:	17 c0       	rjmp	.+46     	; 0x434 <REC_play+0x3a>
			PLAY = 1;
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	80 93 02 02 	sts	0x0202, r24
			rec_index = 0;
 40c:	10 92 18 02 	sts	0x0218, r1
			TIME_Set_ISR(rec_time[0]);
 410:	80 91 03 02 	lds	r24, 0x0203
 414:	90 91 04 02 	lds	r25, 0x0204
	}
}

void TIME_Set_ISR(uint16_t time)
{
	software_comp = time;
 418:	90 93 13 02 	sts	0x0213, r25
 41c:	80 93 12 02 	sts	0x0212, r24
}

void TIME_reset(void)
{
	software_time = 0;
 420:	10 92 1a 02 	sts	0x021A, r1
 424:	10 92 19 02 	sts	0x0219, r1
 428:	08 95       	ret
			TIME_Set_ISR(rec_time[0]);
			TIME_reset();
		}
	}
	else{
		if(PLAY){
 42a:	80 91 02 02 	lds	r24, 0x0202
 42e:	81 11       	cpse	r24, r1
			PLAY = 0;
 430:	10 92 02 02 	sts	0x0202, r1
 434:	08 95       	ret

00000436 <main>:
void init_Timer0(void)
{
	TCCR0A = 0b00000000;			// normal mode
	TCCR0B = 0b00000101;			// prescaler 1024
	TCNT0 = 0;						// overflow, 255*1024/(8*10^6) = 32.6ms delay at max
	TIMSK0 |= (1 << TOIE0);			// enable overflow interrupt enable 
 436:	76 de       	rcall	.-788    	; 0x124 <Init_ports>
 438:	80 e8       	ldi	r24, 0x80	; 128
 43a:	95 e2       	ldi	r25, 0x25	; 37
 43c:	7b de       	rcall	.-778    	; 0x134 <Init_UART0>
 43e:	05 df       	rcall	.-502    	; 0x24a <init_Timer1>
 440:	78 94       	sei
 442:	d0 e0       	ldi	r29, 0x00	; 0
 444:	01 c0       	rjmp	.+2      	; 0x448 <main+0x12>
 446:	dc 2f       	mov	r29, r28
 448:	c9 b1       	in	r28, 0x09	; 9
 44a:	c0 95       	com	r28
 44c:	86 b1       	in	r24, 0x06	; 6
 44e:	80 95       	com	r24
 450:	80 93 16 02 	sts	0x0216, r24
 454:	80 91 16 02 	lds	r24, 0x0216
 458:	d0 df       	rcall	.-96     	; 0x3fa <REC_play>
 45a:	9d 2f       	mov	r25, r29
 45c:	9c 27       	eor	r25, r28
 45e:	89 2f       	mov	r24, r25
 460:	8c 23       	and	r24, r28
 462:	99 f0       	breq	.+38     	; 0x48a <main+0x54>
 464:	d0 91 16 02 	lds	r29, 0x0216
 468:	dc 70       	andi	r29, 0x0C	; 12
 46a:	d6 95       	lsr	r29
 46c:	d6 95       	lsr	r29
 46e:	d0 69       	ori	r29, 0x90	; 144
 470:	99 de       	rcall	.-718    	; 0x1a4 <MIDI_Conversion>
 472:	18 2f       	mov	r17, r24
 474:	80 91 16 02 	lds	r24, 0x0216
 478:	41 2f       	mov	r20, r17
 47a:	6d 2f       	mov	r22, r29
 47c:	a5 df       	rcall	.-182    	; 0x3c8 <REC_process>
 47e:	40 91 14 02 	lds	r20, 0x0214
 482:	61 2f       	mov	r22, r17
 484:	8d 2f       	mov	r24, r29
 486:	81 de       	rcall	.-766    	; 0x18a <MIDI_send>
 488:	de cf       	rjmp	.-68     	; 0x446 <main+0x10>
 48a:	89 2f       	mov	r24, r25
 48c:	8d 23       	and	r24, r29
 48e:	d9 f2       	breq	.-74     	; 0x446 <main+0x10>
 490:	10 91 16 02 	lds	r17, 0x0216
 494:	1c 70       	andi	r17, 0x0C	; 12
 496:	16 95       	lsr	r17
 498:	16 95       	lsr	r17
 49a:	10 68       	ori	r17, 0x80	; 128
 49c:	83 de       	rcall	.-762    	; 0x1a4 <MIDI_Conversion>
 49e:	d8 2f       	mov	r29, r24
 4a0:	80 91 16 02 	lds	r24, 0x0216
 4a4:	4d 2f       	mov	r20, r29
 4a6:	61 2f       	mov	r22, r17
 4a8:	8f df       	rcall	.-226    	; 0x3c8 <REC_process>
 4aa:	40 91 14 02 	lds	r20, 0x0214
 4ae:	6d 2f       	mov	r22, r29
 4b0:	81 2f       	mov	r24, r17
 4b2:	6b de       	rcall	.-810    	; 0x18a <MIDI_send>
 4b4:	c8 cf       	rjmp	.-112    	; 0x446 <main+0x10>

000004b6 <__vector_29>:
 4b6:	1f 92       	push	r1
 4b8:	0f 92       	push	r0
 4ba:	0f b6       	in	r0, 0x3f	; 63
 4bc:	0f 92       	push	r0
 4be:	11 24       	eor	r1, r1
 4c0:	0b b6       	in	r0, 0x3b	; 59
 4c2:	0f 92       	push	r0
 4c4:	8f 93       	push	r24
 4c6:	9f 93       	push	r25
 4c8:	ef 93       	push	r30
 4ca:	ff 93       	push	r31
 4cc:	80 91 79 00 	lds	r24, 0x0079
 4d0:	80 93 14 02 	sts	0x0214, r24
 4d4:	ec e7       	ldi	r30, 0x7C	; 124
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	90 81       	ld	r25, Z
 4da:	80 91 16 02 	lds	r24, 0x0216
 4de:	8c 70       	andi	r24, 0x0C	; 12
 4e0:	86 95       	lsr	r24
 4e2:	86 95       	lsr	r24
 4e4:	90 7e       	andi	r25, 0xE0	; 224
 4e6:	89 2b       	or	r24, r25
 4e8:	80 83       	st	Z, r24
 4ea:	ff 91       	pop	r31
 4ec:	ef 91       	pop	r30
 4ee:	9f 91       	pop	r25
 4f0:	8f 91       	pop	r24
 4f2:	0f 90       	pop	r0
 4f4:	0b be       	out	0x3b, r0	; 59
 4f6:	0f 90       	pop	r0
 4f8:	0f be       	out	0x3f, r0	; 63
 4fa:	0f 90       	pop	r0
 4fc:	1f 90       	pop	r1
 4fe:	18 95       	reti

00000500 <__vector_23>:
}

ISR(TIMER0_OVF_vect)
{
 500:	1f 92       	push	r1
 502:	0f 92       	push	r0
 504:	0f b6       	in	r0, 0x3f	; 63
 506:	0f 92       	push	r0
 508:	11 24       	eor	r1, r1
	TCNT0 = 0;						// reset the count TCNT0
 50a:	16 bc       	out	0x26, r1	; 38
 50c:	0f 90       	pop	r0
 50e:	0f be       	out	0x3f, r0	; 63
 510:	0f 90       	pop	r0
 512:	1f 90       	pop	r1
 514:	18 95       	reti

00000516 <_exit>:
 516:	f8 94       	cli

00000518 <__stop_program>:
 518:	ff cf       	rjmp	.-2      	; 0x518 <__stop_program>
