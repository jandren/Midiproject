
Midiproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  000005fa  0000068e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000506  00800206  00800206  00000694  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008b6  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003e8  00000000  00000000  0000106a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cbc  00000000  00000000  00001452  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000250  00000000  00000000  00002110  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00008b7c  00000000  00000000  00002360  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006ab  00000000  00000000  0000aedc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  0000b587  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003870  00000000  00000000  0000b647  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	a9 c1       	rjmp	.+850    	; 0x398 <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	30 c1       	rjmp	.+608    	; 0x2be <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	75 c0       	rjmp	.+234    	; 0x150 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	f5 c0       	rjmp	.+490    	; 0x260 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ef       	ldi	r30, 0xFA	; 250
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 30       	cpi	r26, 0x06	; 6
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	27 e0       	ldi	r18, 0x07	; 7
 110:	a6 e0       	ldi	r26, 0x06	; 6
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 30       	cpi	r26, 0x0C	; 12
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	2d d2       	rcall	.+1114   	; 0x57a <main>
 120:	6a c2       	rjmp	.+1236   	; 0x5f6 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <Init_ports>:
void Init_ports(void)
{
	// Hard coded setup
	
	// Set up port B LEDS
	DDRB = 0xFF; // No inputs, all ports as outputs
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	84 b9       	out	0x04, r24	; 4
	PORTB = 0xFF; // All LEDS are off
 128:	85 b9       	out	0x05, r24	; 5
	
	// Set up port D Buttons
	DDRD = 0x00;
 12a:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0xFF; // Set pull up on the inputs
 12c:	8b b9       	out	0x0b, r24	; 11
	
	// Set up port C Switches
	DDRC = 0x00;
 12e:	17 b8       	out	0x07, r1	; 7
	PORTC = 0xFF; // Set pull up on the inputs
 130:	88 b9       	out	0x08, r24	; 8
 132:	08 95       	ret

00000134 <Init_UART0>:
void Init_UART0(uint16_t BAUDRATE)
{
	//ubrr = F_CPU/16uL/BAUDRATE;
	
	// Set baud rate to 9600 @ 8MHz
	UBRR0L = 51;
 134:	83 e3       	ldi	r24, 0x33	; 51
 136:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0;
 13a:	10 92 c5 00 	sts	0x00C5, r1
	
	// No parity bit, 8 bit char, one stop bit
	UCSR0A = 0x00;
 13e:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0b10011000;
 142:	88 e9       	ldi	r24, 0x98	; 152
 144:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = 0b00000110;
 148:	86 e0       	ldi	r24, 0x06	; 6
 14a:	80 93 c2 00 	sts	0x00C2, r24
 14e:	08 95       	ret

00000150 <__vector_25>:
}

ISR(USART0_RX_vect)
{
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
	rx_ch = UDR0;             //read UART register into value
 15e:	80 91 c6 00 	lds	r24, 0x00C6
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	90 93 01 02 	sts	0x0201, r25
 168:	80 93 00 02 	sts	0x0200, r24
}
 16c:	9f 91       	pop	r25
 16e:	8f 91       	pop	r24
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <UART_out>:

void UART_out(uint8_t ch)
{
	while((UCSR0A & (1<<UDRE0)) == 0); // Wait until empty
 17a:	e0 ec       	ldi	r30, 0xC0	; 192
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	90 81       	ld	r25, Z
 180:	95 ff       	sbrs	r25, 5
 182:	fd cf       	rjmp	.-6      	; 0x17e <UART_out+0x4>
	
	UDR0 = ch; // Put character to be sent in the output register
 184:	80 93 c6 00 	sts	0x00C6, r24
 188:	08 95       	ret

0000018a <MIDI_send>:
}

void MIDI_send(uint8_t command, uint8_t tone, uint8_t volume)
// Send the Midi command, not much really but abstracts the code a little.
{
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	d6 2f       	mov	r29, r22
 190:	c4 2f       	mov	r28, r20
	UART_out(command); // Command 7-bit
 192:	f3 df       	rcall	.-26     	; 0x17a <UART_out>
	UART_out(tone); // Note 7bit
 194:	8d 2f       	mov	r24, r29
 196:	f1 df       	rcall	.-30     	; 0x17a <UART_out>
	UART_out(volume >> 1); // Velocity 7 bit from 8 bit volume
 198:	8c 2f       	mov	r24, r28
 19a:	86 95       	lsr	r24
 19c:	ee df       	rcall	.-36     	; 0x17a <UART_out>
	
	// See Midi command table for exact bits to input.
}
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <MIDI_Conversion>:

uint8_t MIDI_Conversion(uint8_t pressed)
{
	uint8_t converted = 0;
	uint8_t offset = 48;
	uint8_t pitch = switches & 0x03;		// mask with two far right switches
 1a4:	90 91 06 02 	lds	r25, 0x0206
 1a8:	93 70       	andi	r25, 0x03	; 3
		 			// B4 = 59 or B5 = 71 or B6 = 83
	if( pressed &  0x80) converted = offset + 12 + 12 * pitch;
		 			// C5 = 60 or C6 = 72 or C7 = 84
*/

	switch(pressed)
 1aa:	88 30       	cpi	r24, 0x08	; 8
 1ac:	49 f1       	breq	.+82     	; 0x200 <MIDI_Conversion+0x5c>
 1ae:	40 f4       	brcc	.+16     	; 0x1c0 <MIDI_Conversion+0x1c>
 1b0:	82 30       	cpi	r24, 0x02	; 2
 1b2:	c1 f0       	breq	.+48     	; 0x1e4 <MIDI_Conversion+0x40>
 1b4:	84 30       	cpi	r24, 0x04	; 4
 1b6:	e9 f0       	breq	.+58     	; 0x1f2 <MIDI_Conversion+0x4e>
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	09 f0       	breq	.+2      	; 0x1be <MIDI_Conversion+0x1a>
 1bc:	44 c0       	rjmp	.+136    	; 0x246 <MIDI_Conversion+0xa2>
 1be:	0b c0       	rjmp	.+22     	; 0x1d6 <MIDI_Conversion+0x32>
 1c0:	80 32       	cpi	r24, 0x20	; 32
 1c2:	61 f1       	breq	.+88     	; 0x21c <MIDI_Conversion+0x78>
 1c4:	18 f4       	brcc	.+6      	; 0x1cc <MIDI_Conversion+0x28>
 1c6:	80 31       	cpi	r24, 0x10	; 16
 1c8:	11 f1       	breq	.+68     	; 0x20e <MIDI_Conversion+0x6a>
 1ca:	3d c0       	rjmp	.+122    	; 0x246 <MIDI_Conversion+0xa2>
 1cc:	80 34       	cpi	r24, 0x40	; 64
 1ce:	69 f1       	breq	.+90     	; 0x22a <MIDI_Conversion+0x86>
 1d0:	80 38       	cpi	r24, 0x80	; 128
 1d2:	91 f1       	breq	.+100    	; 0x238 <MIDI_Conversion+0x94>
 1d4:	38 c0       	rjmp	.+112    	; 0x246 <MIDI_Conversion+0xa2>
	{
		case 0x01:
		converted = 48 + 12 * pitch;
 1d6:	89 2f       	mov	r24, r25
 1d8:	88 0f       	add	r24, r24
 1da:	89 0f       	add	r24, r25
 1dc:	88 0f       	add	r24, r24
 1de:	88 0f       	add	r24, r24
 1e0:	80 5d       	subi	r24, 0xD0	; 208
		break;				// C4 = 48 or C5 = 60 or C6 = 72
 1e2:	08 95       	ret
		case 0x02:
		converted = 50 + 12 * pitch;
 1e4:	89 2f       	mov	r24, r25
 1e6:	88 0f       	add	r24, r24
 1e8:	89 0f       	add	r24, r25
 1ea:	88 0f       	add	r24, r24
 1ec:	88 0f       	add	r24, r24
 1ee:	8e 5c       	subi	r24, 0xCE	; 206
		break;				// D4 = 50 or D5 = 62 or D6 = 74
 1f0:	08 95       	ret
		case 0x04:
		converted = 52 + 12 * pitch;
 1f2:	89 2f       	mov	r24, r25
 1f4:	88 0f       	add	r24, r24
 1f6:	89 0f       	add	r24, r25
 1f8:	88 0f       	add	r24, r24
 1fa:	88 0f       	add	r24, r24
 1fc:	8c 5c       	subi	r24, 0xCC	; 204
		break;				// E4 = 52 or E5 = 64 or E6 = 76
 1fe:	08 95       	ret
		case 0x08:
		converted = 53 + 12 * pitch;
 200:	89 2f       	mov	r24, r25
 202:	88 0f       	add	r24, r24
 204:	89 0f       	add	r24, r25
 206:	88 0f       	add	r24, r24
 208:	88 0f       	add	r24, r24
 20a:	8b 5c       	subi	r24, 0xCB	; 203
		break;				// F4 = 53 or F5 = 65 or F6 = 77
 20c:	08 95       	ret
		case 0x10:
		converted = 55 + 12 * pitch;
 20e:	89 2f       	mov	r24, r25
 210:	88 0f       	add	r24, r24
 212:	89 0f       	add	r24, r25
 214:	88 0f       	add	r24, r24
 216:	88 0f       	add	r24, r24
 218:	89 5c       	subi	r24, 0xC9	; 201
		break;				// G4 = 55 or G5 = 67 or G6 = 79
 21a:	08 95       	ret
		case 0x20:
		converted = 57 + 12 * pitch;
 21c:	89 2f       	mov	r24, r25
 21e:	88 0f       	add	r24, r24
 220:	89 0f       	add	r24, r25
 222:	88 0f       	add	r24, r24
 224:	88 0f       	add	r24, r24
 226:	87 5c       	subi	r24, 0xC7	; 199
		break;				// A4 = 57 or A5 = 69 or A6 = 81
 228:	08 95       	ret
		case 0x40:
		converted = 59 + 12 * pitch;
 22a:	89 2f       	mov	r24, r25
 22c:	88 0f       	add	r24, r24
 22e:	89 0f       	add	r24, r25
 230:	88 0f       	add	r24, r24
 232:	88 0f       	add	r24, r24
 234:	85 5c       	subi	r24, 0xC5	; 197
		break;				// B4 = 59 or B5 = 71 or B6 = 83
 236:	08 95       	ret
		case 0x80:
		converted = 60 + 12 * pitch;
 238:	89 2f       	mov	r24, r25
 23a:	88 0f       	add	r24, r24
 23c:	89 0f       	add	r24, r25
 23e:	88 0f       	add	r24, r24
 240:	88 0f       	add	r24, r24
 242:	84 5c       	subi	r24, 0xC4	; 196
		break;				// C5 = 60 or C6 = 72 or C7 = 84
 244:	08 95       	ret
	// See Midi command table for exact bits to input.
}

uint8_t MIDI_Conversion(uint8_t pressed)
{
	uint8_t converted = 0;
 246:	80 e0       	ldi	r24, 0x00	; 0
		default:
		break;
	}
	
	return converted;
}
 248:	08 95       	ret

0000024a <init_adc>:

void init_adc(void)					// function for initializing ADC
{
	ADCSRA |= (1 << ADEN) | (1 << ADPS1) | (1 << ADIE) | (1<<ADSC);	// enable ADC, prescaler 4
 24a:	ea e7       	ldi	r30, 0x7A	; 122
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	8a 6c       	ori	r24, 0xCA	; 202
 252:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0) | (1 << ADLAR);	// internal 5V, 8 bits
 254:	ec e7       	ldi	r30, 0x7C	; 124
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	80 66       	ori	r24, 0x60	; 96
 25c:	80 83       	st	Z, r24
 25e:	08 95       	ret

00000260 <__vector_29>:
}

ISR(ADC_vect)						// read ADC using interrupt
{
 260:	1f 92       	push	r1
 262:	0f 92       	push	r0
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	0f 92       	push	r0
 268:	11 24       	eor	r1, r1
 26a:	0b b6       	in	r0, 0x3b	; 59
 26c:	0f 92       	push	r0
 26e:	8f 93       	push	r24
 270:	9f 93       	push	r25
 272:	ef 93       	push	r30
 274:	ff 93       	push	r31
	volume = ADCH;									// save 8 bits
 276:	80 91 79 00 	lds	r24, 0x0079
 27a:	80 93 04 02 	sts	0x0204, r24
	ADMUX = (ADMUX & 0xE0) | ((switches & 0x0C) >> 2);	// Mask and shift channel bits from switches
 27e:	ec e7       	ldi	r30, 0x7C	; 124
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	90 81       	ld	r25, Z
 284:	80 91 06 02 	lds	r24, 0x0206
 288:	8c 70       	andi	r24, 0x0C	; 12
 28a:	86 95       	lsr	r24
 28c:	86 95       	lsr	r24
 28e:	90 7e       	andi	r25, 0xE0	; 224
 290:	89 2b       	or	r24, r25
 292:	80 83       	st	Z, r24
}
 294:	ff 91       	pop	r31
 296:	ef 91       	pop	r30
 298:	9f 91       	pop	r25
 29a:	8f 91       	pop	r24
 29c:	0f 90       	pop	r0
 29e:	0b be       	out	0x3b, r0	; 59
 2a0:	0f 90       	pop	r0
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	0f 90       	pop	r0
 2a6:	1f 90       	pop	r1
 2a8:	18 95       	reti

000002aa <init_Timer0>:

void init_Timer0(void)
{
	TCCR0A = 0b00000000;			// normal mode
 2aa:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000101;			// prescaler 1024
 2ac:	85 e0       	ldi	r24, 0x05	; 5
 2ae:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;					// overflow, 255*1024/(8*10^6) = 32.6ms delay at max
 2b0:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1 << TOIE0);			// enable overflow interrupt enable
 2b2:	ee e6       	ldi	r30, 0x6E	; 110
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
 2b8:	81 60       	ori	r24, 0x01	; 1
 2ba:	80 83       	st	Z, r24
 2bc:	08 95       	ret

000002be <__vector_23>:
}

ISR(TIMER0_OVF_vect)
{
 2be:	1f 92       	push	r1
 2c0:	0f 92       	push	r0
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	0f 92       	push	r0
 2c6:	11 24       	eor	r1, r1
 2c8:	0b b6       	in	r0, 0x3b	; 59
 2ca:	0f 92       	push	r0
 2cc:	8f 93       	push	r24
 2ce:	ef 93       	push	r30
 2d0:	ff 93       	push	r31
	ADCSRA |= (1<<ADSC);
 2d2:	ea e7       	ldi	r30, 0x7A	; 122
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	80 64       	ori	r24, 0x40	; 64
 2da:	80 83       	st	Z, r24
	//TCNT0 = 0;					// reset the count TCNT0
 2dc:	ff 91       	pop	r31
 2de:	ef 91       	pop	r30
 2e0:	8f 91       	pop	r24
 2e2:	0f 90       	pop	r0
 2e4:	0b be       	out	0x3b, r0	; 59
 2e6:	0f 90       	pop	r0
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	0f 90       	pop	r0
 2ec:	1f 90       	pop	r1
 2ee:	18 95       	reti

000002f0 <init_Timer1>:
}

uint16_t TIME_read(void)
{
	return software_time;
}
 2f0:	10 92 80 00 	sts	0x0080, r1
 2f4:	82 e0       	ldi	r24, 0x02	; 2
 2f6:	80 93 6f 00 	sts	0x006F, r24
 2fa:	10 92 85 00 	sts	0x0085, r1
 2fe:	10 92 84 00 	sts	0x0084, r1
 302:	8d e7       	ldi	r24, 0x7D	; 125
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	90 93 89 00 	sts	0x0089, r25
 30a:	80 93 88 00 	sts	0x0088, r24
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	80 93 81 00 	sts	0x0081, r24
 314:	08 95       	ret

00000316 <REC_ISR>:

void REC_ISR(uint16_t time){
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
	if(PLAY){
 31a:	80 91 07 02 	lds	r24, 0x0207
 31e:	88 23       	and	r24, r24
 320:	c1 f1       	breq	.+112    	; 0x392 <REC_ISR+0x7c>
		MIDI_send(com[rec_index], tones[rec_index], vol[rec_index]);
 322:	80 91 09 02 	lds	r24, 0x0209
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	dc 01       	movw	r26, r24
 32a:	a4 5f       	subi	r26, 0xF4	; 244
 32c:	b9 4f       	sbci	r27, 0xF9	; 249
 32e:	fc 01       	movw	r30, r24
 330:	e4 5f       	subi	r30, 0xF4	; 244
 332:	fc 4f       	sbci	r31, 0xFC	; 252
 334:	ec 01       	movw	r28, r24
 336:	c4 5f       	subi	r28, 0xF4	; 244
 338:	dd 4f       	sbci	r29, 0xFD	; 253
 33a:	4c 91       	ld	r20, X
 33c:	60 81       	ld	r22, Z
 33e:	88 81       	ld	r24, Y
 340:	24 df       	rcall	.-440    	; 0x18a <MIDI_send>
		//PORTB = ~rec_index;
		
		// Last record will be of time zero
		// Restart the playback in that case
		if(com[rec_index] == 0){
 342:	80 91 09 02 	lds	r24, 0x0209
 346:	e8 2f       	mov	r30, r24
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	e4 5f       	subi	r30, 0xF4	; 244
 34c:	fd 4f       	sbci	r31, 0xFD	; 253
 34e:	90 81       	ld	r25, Z
 350:	91 11       	cpse	r25, r1
 352:	0f c0       	rjmp	.+30     	; 0x372 <REC_ISR+0x5c>
			MIDI_send(com[0], tones[0], vol[0]);
 354:	40 91 0c 06 	lds	r20, 0x060C
 358:	60 91 0c 03 	lds	r22, 0x030C
 35c:	80 91 0c 02 	lds	r24, 0x020C
 360:	14 df       	rcall	.-472    	; 0x18a <MIDI_send>
			
			rec_index = 1;
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	80 93 09 02 	sts	0x0209, r24
	software_comp = time;
}

void TIME_reset(void)
{
	software_time = 0;
 368:	10 92 0b 02 	sts	0x020B, r1
 36c:	10 92 0a 02 	sts	0x020A, r1
 370:	03 c0       	rjmp	.+6      	; 0x378 <REC_ISR+0x62>
			rec_index = 1;
			TIME_reset();
			
		}
		else{
			rec_index++;
 372:	8f 5f       	subi	r24, 0xFF	; 255
 374:	80 93 09 02 	sts	0x0209, r24
		}
		
		TIME_Set_ISR(rec_time[rec_index]);	
 378:	e0 91 09 02 	lds	r30, 0x0209
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	ee 0f       	add	r30, r30
 380:	ff 1f       	adc	r31, r31
 382:	e4 5f       	subi	r30, 0xF4	; 244
 384:	fb 4f       	sbci	r31, 0xFB	; 251
 386:	80 81       	ld	r24, Z
 388:	91 81       	ldd	r25, Z+1	; 0x01
	}
}

void TIME_Set_ISR(uint16_t time)
{
	software_comp = time;
 38a:	90 93 03 02 	sts	0x0203, r25
 38e:	80 93 02 02 	sts	0x0202, r24
		TIME_Set_ISR(rec_time[rec_index]);	
	
	}
	
	// There will be no new interrupt if PLAY == 0
}
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	08 95       	ret

00000398 <__vector_17>:
	// Start timer
	TCCR1B	= (1<<CS10); // Start, pre scaler 1
}

ISR(TIMER1_COMPA_vect)
{
 398:	1f 92       	push	r1
 39a:	0f 92       	push	r0
 39c:	0f b6       	in	r0, 0x3f	; 63
 39e:	0f 92       	push	r0
 3a0:	11 24       	eor	r1, r1
 3a2:	0b b6       	in	r0, 0x3b	; 59
 3a4:	0f 92       	push	r0
 3a6:	2f 93       	push	r18
 3a8:	3f 93       	push	r19
 3aa:	4f 93       	push	r20
 3ac:	5f 93       	push	r21
 3ae:	6f 93       	push	r22
 3b0:	7f 93       	push	r23
 3b2:	8f 93       	push	r24
 3b4:	9f 93       	push	r25
 3b6:	af 93       	push	r26
 3b8:	bf 93       	push	r27
 3ba:	ef 93       	push	r30
 3bc:	ff 93       	push	r31
	software_time++;
 3be:	80 91 0a 02 	lds	r24, 0x020A
 3c2:	90 91 0b 02 	lds	r25, 0x020B
 3c6:	01 96       	adiw	r24, 0x01	; 1
 3c8:	90 93 0b 02 	sts	0x020B, r25
 3cc:	80 93 0a 02 	sts	0x020A, r24
	PORTB = ~(rec_index >> 1); //((PLAY<<6) | (REC<<7) | rec_index);
 3d0:	80 91 09 02 	lds	r24, 0x0209
 3d4:	86 95       	lsr	r24
 3d6:	80 95       	com	r24
 3d8:	85 b9       	out	0x05, r24	; 5
	if(software_time == software_comp)
 3da:	20 91 0a 02 	lds	r18, 0x020A
 3de:	30 91 0b 02 	lds	r19, 0x020B
 3e2:	80 91 02 02 	lds	r24, 0x0202
 3e6:	90 91 03 02 	lds	r25, 0x0203
 3ea:	28 17       	cp	r18, r24
 3ec:	39 07       	cpc	r19, r25
 3ee:	29 f4       	brne	.+10     	; 0x3fa <__vector_17+0x62>
	{
		REC_ISR(software_time);
 3f0:	80 91 0a 02 	lds	r24, 0x020A
 3f4:	90 91 0b 02 	lds	r25, 0x020B
 3f8:	8e df       	rcall	.-228    	; 0x316 <REC_ISR>
	}
}
 3fa:	ff 91       	pop	r31
 3fc:	ef 91       	pop	r30
 3fe:	bf 91       	pop	r27
 400:	af 91       	pop	r26
 402:	9f 91       	pop	r25
 404:	8f 91       	pop	r24
 406:	7f 91       	pop	r23
 408:	6f 91       	pop	r22
 40a:	5f 91       	pop	r21
 40c:	4f 91       	pop	r20
 40e:	3f 91       	pop	r19
 410:	2f 91       	pop	r18
 412:	0f 90       	pop	r0
 414:	0b be       	out	0x3b, r0	; 59
 416:	0f 90       	pop	r0
 418:	0f be       	out	0x3f, r0	; 63
 41a:	0f 90       	pop	r0
 41c:	1f 90       	pop	r1
 41e:	18 95       	reti

00000420 <REC_start>:
		rec_index++;
	}
}

void REC_start(void){
	REC = 1;
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	80 93 08 02 	sts	0x0208, r24
	rec_index = 0;
 426:	10 92 09 02 	sts	0x0209, r1
	software_comp = time;
}

void TIME_reset(void)
{
	software_time = 0;
 42a:	10 92 0b 02 	sts	0x020B, r1
 42e:	10 92 0a 02 	sts	0x020A, r1
 432:	08 95       	ret

00000434 <REC_stop>:
	TIME_reset();
}

void REC_stop(void){
	// always record both on AND off commands = even number
	if(rec_index & 0x01){ // if not even
 434:	80 91 09 02 	lds	r24, 0x0209
 438:	80 ff       	sbrs	r24, 0
 43a:	11 c0       	rjmp	.+34     	; 0x45e <REC_stop+0x2a>
		REC_add((com[rec_index-1] & 0b11101111), tones[rec_index-1]);
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	01 97       	sbiw	r24, 0x01	; 1
 440:	fc 01       	movw	r30, r24
 442:	e4 5f       	subi	r30, 0xF4	; 244
 444:	fc 4f       	sbci	r31, 0xFC	; 252
 446:	dc 01       	movw	r26, r24
 448:	a4 5f       	subi	r26, 0xF4	; 244
 44a:	bd 4f       	sbci	r27, 0xFD	; 253
 44c:	8c 91       	ld	r24, X
 44e:	60 81       	ld	r22, Z
 450:	8f 7e       	andi	r24, 0xEF	; 239
 452:	22 d0       	rcall	.+68     	; 0x498 <REC_add>
		//com[rec_index]  = (com[rec_index-1] & 0b11101111); 
		//tones[rec_index] = tones[rec_index-1];
		//vol[rec_index] = volume;
		rec_index++;
 454:	80 91 09 02 	lds	r24, 0x0209
 458:	8f 5f       	subi	r24, 0xFF	; 255
 45a:	80 93 09 02 	sts	0x0209, r24
	}
	
	com[rec_index]  = 0;
 45e:	80 91 09 02 	lds	r24, 0x0209
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	fc 01       	movw	r30, r24
 466:	e4 5f       	subi	r30, 0xF4	; 244
 468:	fd 4f       	sbci	r31, 0xFD	; 253
 46a:	10 82       	st	Z, r1
	tones[rec_index] = 0;
 46c:	fc 01       	movw	r30, r24
 46e:	e4 5f       	subi	r30, 0xF4	; 244
 470:	fc 4f       	sbci	r31, 0xFC	; 252
 472:	10 82       	st	Z, r1
	vol[rec_index] = 0;
 474:	fc 01       	movw	r30, r24
 476:	e4 5f       	subi	r30, 0xF4	; 244
 478:	f9 4f       	sbci	r31, 0xF9	; 249
 47a:	10 82       	st	Z, r1
	software_time = 0;
}

uint16_t TIME_read(void)
{
	return software_time;
 47c:	20 91 0a 02 	lds	r18, 0x020A
 480:	30 91 0b 02 	lds	r19, 0x020B
	}
	
	com[rec_index]  = 0;
	tones[rec_index] = 0;
	vol[rec_index] = 0;
	rec_time[rec_index] = TIME_read();
 484:	fc 01       	movw	r30, r24
 486:	ee 0f       	add	r30, r30
 488:	ff 1f       	adc	r31, r31
 48a:	e4 5f       	subi	r30, 0xF4	; 244
 48c:	fb 4f       	sbci	r31, 0xFB	; 251
 48e:	31 83       	std	Z+1, r19	; 0x01
 490:	20 83       	st	Z, r18
	REC = 0;
 492:	10 92 08 02 	sts	0x0208, r1
 496:	08 95       	ret

00000498 <REC_add>:
	}
	
	// There will be no new interrupt if PLAY == 0
}

void REC_add(uint8_t command, uint8_t tone){
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	d8 2f       	mov	r29, r24
 49e:	c6 2f       	mov	r28, r22
	
	// Stop recording if overflows = reset and starts from clean
	if(rec_index == 254){
 4a0:	90 91 09 02 	lds	r25, 0x0209
 4a4:	9e 3f       	cpi	r25, 0xFE	; 254
 4a6:	09 f4       	brne	.+2      	; 0x4aa <REC_add+0x12>
		REC_stop();
 4a8:	c5 df       	rcall	.-118    	; 0x434 <REC_stop>
	}
	
	if(REC){ // Recording 
 4aa:	90 91 08 02 	lds	r25, 0x0208
 4ae:	99 23       	and	r25, r25
 4b0:	81 f1       	breq	.+96     	; 0x512 <REC_add+0x7a>
		com[rec_index]  = command;
 4b2:	90 91 09 02 	lds	r25, 0x0209
 4b6:	29 2f       	mov	r18, r25
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	f9 01       	movw	r30, r18
 4bc:	e4 5f       	subi	r30, 0xF4	; 244
 4be:	fd 4f       	sbci	r31, 0xFD	; 253
 4c0:	d0 83       	st	Z, r29
		tones[rec_index] = tone;
 4c2:	f9 01       	movw	r30, r18
 4c4:	e4 5f       	subi	r30, 0xF4	; 244
 4c6:	fc 4f       	sbci	r31, 0xFC	; 252
 4c8:	c0 83       	st	Z, r28
		vol[rec_index] = volume;
 4ca:	80 91 04 02 	lds	r24, 0x0204
 4ce:	f9 01       	movw	r30, r18
 4d0:	e4 5f       	subi	r30, 0xF4	; 244
 4d2:	f9 4f       	sbci	r31, 0xF9	; 249
 4d4:	80 83       	st	Z, r24
		
		// Recording starts on first tone, so set time = 0 and reset timer
		if(rec_index == 0){
 4d6:	91 11       	cpse	r25, r1
 4d8:	0c c0       	rjmp	.+24     	; 0x4f2 <REC_add+0x5a>
			rec_time[rec_index] = 0;
 4da:	f9 01       	movw	r30, r18
 4dc:	ee 0f       	add	r30, r30
 4de:	ff 1f       	adc	r31, r31
 4e0:	e4 5f       	subi	r30, 0xF4	; 244
 4e2:	fb 4f       	sbci	r31, 0xFB	; 251
 4e4:	11 82       	std	Z+1, r1	; 0x01
 4e6:	10 82       	st	Z, r1
	software_comp = time;
}

void TIME_reset(void)
{
	software_time = 0;
 4e8:	10 92 0b 02 	sts	0x020B, r1
 4ec:	10 92 0a 02 	sts	0x020A, r1
 4f0:	0b c0       	rjmp	.+22     	; 0x508 <REC_add+0x70>
}

uint16_t TIME_read(void)
{
	return software_time;
 4f2:	80 91 0a 02 	lds	r24, 0x020A
 4f6:	90 91 0b 02 	lds	r25, 0x020B
			
			
			
		}
		
		else { rec_time[rec_index] = TIME_read();}
 4fa:	f9 01       	movw	r30, r18
 4fc:	ee 0f       	add	r30, r30
 4fe:	ff 1f       	adc	r31, r31
 500:	e4 5f       	subi	r30, 0xF4	; 244
 502:	fb 4f       	sbci	r31, 0xFB	; 251
 504:	91 83       	std	Z+1, r25	; 0x01
 506:	80 83       	st	Z, r24
			
		rec_index++;
 508:	80 91 09 02 	lds	r24, 0x0209
 50c:	8f 5f       	subi	r24, 0xFF	; 255
 50e:	80 93 09 02 	sts	0x0209, r24
	}
}
 512:	df 91       	pop	r29
 514:	cf 91       	pop	r28
 516:	08 95       	ret

00000518 <REC_state>:
	REC = 0;
}

void REC_state(uint8_t switches)
// For starting the play. Always from the start
{
 518:	cf 93       	push	r28
 51a:	c8 2f       	mov	r28, r24
	if(switches & 0x40){
 51c:	86 ff       	sbrs	r24, 6
 51e:	11 c0       	rjmp	.+34     	; 0x542 <REC_state+0x2a>
		if(!PLAY){  // If play channel one is on
 520:	80 91 07 02 	lds	r24, 0x0207
 524:	81 11       	cpse	r24, r1
 526:	1a c0       	rjmp	.+52     	; 0x55c <REC_state+0x44>
			PLAY = 1;
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	80 93 07 02 	sts	0x0207, r24
			
			// First note is on time = 0 which doesn't exist in our approach,
			// Therefor call the ICR for the first tone and then reset timer.
			rec_index = 0;
 52e:	10 92 09 02 	sts	0x0209, r1
			REC_ISR(0);
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	ef de       	rcall	.-546    	; 0x316 <REC_ISR>
	software_comp = time;
}

void TIME_reset(void)
{
	software_time = 0;
 538:	10 92 0b 02 	sts	0x020B, r1
 53c:	10 92 0a 02 	sts	0x020A, r1
 540:	0d c0       	rjmp	.+26     	; 0x55c <REC_state+0x44>
			REC_ISR(0);
			TIME_reset();
		}
	}
	else{ // If should be off
		if(PLAY){ // Turn off if on
 542:	80 91 07 02 	lds	r24, 0x0207
 546:	88 23       	and	r24, r24
 548:	49 f0       	breq	.+18     	; 0x55c <REC_state+0x44>
			PLAY = 0;
 54a:	10 92 07 02 	sts	0x0207, r1
			
			// Make sure to end the last tone!
			if(rec_index & 0x01){
 54e:	80 91 09 02 	lds	r24, 0x0209
 552:	80 ff       	sbrs	r24, 0
 554:	03 c0       	rjmp	.+6      	; 0x55c <REC_state+0x44>
				REC_ISR(0);
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	dd de       	rcall	.-582    	; 0x316 <REC_ISR>
			}
		}
	}
	
	if(switches & 0x80){ // Recording?
 55c:	cc 23       	and	r28, r28
 55e:	34 f4       	brge	.+12     	; 0x56c <REC_state+0x54>
		if(REC == 0){	 // Change from before?
 560:	80 91 08 02 	lds	r24, 0x0208
 564:	81 11       	cpse	r24, r1
 566:	07 c0       	rjmp	.+14     	; 0x576 <REC_state+0x5e>
			REC_start();
 568:	5b df       	rcall	.-330    	; 0x420 <REC_start>
 56a:	05 c0       	rjmp	.+10     	; 0x576 <REC_state+0x5e>
		}
	}
	else{
		if(REC == 1){ // If rec on, but swithces not in that position, stop
 56c:	80 91 08 02 	lds	r24, 0x0208
 570:	81 30       	cpi	r24, 0x01	; 1
 572:	09 f4       	brne	.+2      	; 0x576 <REC_state+0x5e>
			REC_stop();
 574:	5f df       	rcall	.-322    	; 0x434 <REC_stop>
		}
	}
 576:	cf 91       	pop	r28
 578:	08 95       	ret

0000057a <main>:

#include "main.h"

int main(void)
{
	Init_ports();
 57a:	d4 dd       	rcall	.-1112   	; 0x124 <Init_ports>
	Init_UART0(9600);
 57c:	80 e8       	ldi	r24, 0x80	; 128
 57e:	95 e2       	ldi	r25, 0x25	; 37
 580:	d9 dd       	rcall	.-1102   	; 0x134 <Init_UART0>
	init_Timer1();
 582:	b6 de       	rcall	.-660    	; 0x2f0 <init_Timer1>
	init_Timer0();
 584:	92 de       	rcall	.-732    	; 0x2aa <init_Timer0>
	init_adc();
 586:	61 de       	rcall	.-830    	; 0x24a <init_adc>
	sei();
 588:	78 94       	sei
	
	// Pressed buttons
	uint8_t previus = 0x00;
 58a:	d0 e0       	ldi	r29, 0x00	; 0
 58c:	01 c0       	rjmp	.+2      	; 0x590 <main+0x16>
*/

#include "main.h"

int main(void)
{
 58e:	dc 2f       	mov	r29, r28
	
	while
	(1)
	{
		
		current = ~PIND;
 590:	c9 b1       	in	r28, 0x09	; 9
 592:	c0 95       	com	r28
		switches = ~PINC; // Update switches
 594:	86 b1       	in	r24, 0x06	; 6
 596:	80 95       	com	r24
 598:	80 93 06 02 	sts	0x0206, r24
		REC_state(switches);
 59c:	80 91 06 02 	lds	r24, 0x0206
 5a0:	bb df       	rcall	.-138    	; 0x518 <REC_state>
		//PORTB = ~switches; // rx_ch;
		
		change = current^previus;
 5a2:	9d 2f       	mov	r25, r29
 5a4:	9c 27       	eor	r25, r28
		
		if(current & change) // Note on
 5a6:	89 2f       	mov	r24, r25
 5a8:	8c 23       	and	r24, r28
 5aa:	89 f0       	breq	.+34     	; 0x5ce <main+0x54>
		{
			command = 0b10010000 | (switches & 0x0C) >> 2;
 5ac:	d0 91 06 02 	lds	r29, 0x0206
 5b0:	dc 70       	andi	r29, 0x0C	; 12
 5b2:	d6 95       	lsr	r29
 5b4:	d6 95       	lsr	r29
 5b6:	d0 69       	ori	r29, 0x90	; 144
			tone = MIDI_Conversion(current & change);
 5b8:	f5 dd       	rcall	.-1046   	; 0x1a4 <MIDI_Conversion>
 5ba:	18 2f       	mov	r17, r24
			
			REC_add(command, tone);
 5bc:	68 2f       	mov	r22, r24
 5be:	8d 2f       	mov	r24, r29
 5c0:	6b df       	rcall	.-298    	; 0x498 <REC_add>
			
			MIDI_send(command, tone, volume);
 5c2:	40 91 04 02 	lds	r20, 0x0204
 5c6:	61 2f       	mov	r22, r17
 5c8:	8d 2f       	mov	r24, r29
 5ca:	df dd       	rcall	.-1090   	; 0x18a <MIDI_send>
 5cc:	e0 cf       	rjmp	.-64     	; 0x58e <main+0x14>
			
			//UART_out(0b10010001); // Command
			//UART_out(MIDI_Conversion(current & change)); // Note 7bit
			//UART_out(80 ); //volume(switches & 0x03)); // Velocity 7 bit
		}
		else if(previus & change) // Note off
 5ce:	89 2f       	mov	r24, r25
 5d0:	8d 23       	and	r24, r29
 5d2:	e9 f2       	breq	.-70     	; 0x58e <main+0x14>
		{

			command = 0b10000000 | ((switches & 0x0C) >> 2);
 5d4:	10 91 06 02 	lds	r17, 0x0206
 5d8:	1c 70       	andi	r17, 0x0C	; 12
 5da:	16 95       	lsr	r17
 5dc:	16 95       	lsr	r17
 5de:	10 68       	ori	r17, 0x80	; 128
			
			tone = MIDI_Conversion(previus & change);
 5e0:	e1 dd       	rcall	.-1086   	; 0x1a4 <MIDI_Conversion>
 5e2:	d8 2f       	mov	r29, r24
						
			REC_add(command, tone);
 5e4:	68 2f       	mov	r22, r24
 5e6:	81 2f       	mov	r24, r17
 5e8:	57 df       	rcall	.-338    	; 0x498 <REC_add>
			MIDI_send(command, tone, volume);
 5ea:	40 91 04 02 	lds	r20, 0x0204
 5ee:	6d 2f       	mov	r22, r29
 5f0:	81 2f       	mov	r24, r17
 5f2:	cb dd       	rcall	.-1130   	; 0x18a <MIDI_send>
 5f4:	cc cf       	rjmp	.-104    	; 0x58e <main+0x14>

000005f6 <_exit>:
 5f6:	f8 94       	cli

000005f8 <__stop_program>:
 5f8:	ff cf       	rjmp	.-2      	; 0x5f8 <__stop_program>
