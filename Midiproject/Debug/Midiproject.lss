
Midiproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  000005b0  00000644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000506  00800206  00800206  0000064a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000064a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  0000067a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000890  00000000  00000000  0000076a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003e8  00000000  00000000  00000ffa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cb0  00000000  00000000  000013e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000240  00000000  00000000  00002094  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00008b7c  00000000  00000000  000022d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000684  00000000  00000000  0000ae50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  0000b4d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003870  00000000  00000000  0000b594  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	86 c1       	rjmp	.+780    	; 0x352 <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1b c1       	rjmp	.+566    	; 0x294 <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	75 c0       	rjmp	.+234    	; 0x150 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	ea c0       	rjmp	.+468    	; 0x24a <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 eb       	ldi	r30, 0xB0	; 176
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 30       	cpi	r26, 0x06	; 6
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	27 e0       	ldi	r18, 0x07	; 7
 110:	a6 e0       	ldi	r26, 0x06	; 6
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 30       	cpi	r26, 0x0C	; 12
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0a d2       	rcall	.+1044   	; 0x534 <main>
 120:	45 c2       	rjmp	.+1162   	; 0x5ac <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <Init_ports>:
void init_Timer0(void)
{
	TCCR0A = 0b00000000;			// normal mode
	TCCR0B = 0b00000101;			// prescaler 1024
	TCNT0 = 0;						// overflow, 255*1024/(8*10^6) = 32.6ms delay at max
	TIMSK0 |= (1 << TOIE0);			// enable overflow interrupt enable
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	84 b9       	out	0x04, r24	; 4
 128:	85 b9       	out	0x05, r24	; 5
 12a:	1a b8       	out	0x0a, r1	; 10
 12c:	8b b9       	out	0x0b, r24	; 11
 12e:	17 b8       	out	0x07, r1	; 7
 130:	88 b9       	out	0x08, r24	; 8
 132:	08 95       	ret

00000134 <Init_UART0>:
 134:	83 e3       	ldi	r24, 0x33	; 51
 136:	80 93 c4 00 	sts	0x00C4, r24
 13a:	10 92 c5 00 	sts	0x00C5, r1
 13e:	10 92 c0 00 	sts	0x00C0, r1
 142:	88 e9       	ldi	r24, 0x98	; 152
 144:	80 93 c1 00 	sts	0x00C1, r24
 148:	86 e0       	ldi	r24, 0x06	; 6
 14a:	80 93 c2 00 	sts	0x00C2, r24
 14e:	08 95       	ret

00000150 <__vector_25>:
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
 15e:	80 91 c6 00 	lds	r24, 0x00C6
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	90 93 01 02 	sts	0x0201, r25
 168:	80 93 00 02 	sts	0x0200, r24
 16c:	9f 91       	pop	r25
 16e:	8f 91       	pop	r24
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <UART_out>:
 17a:	e0 ec       	ldi	r30, 0xC0	; 192
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	90 81       	ld	r25, Z
 180:	95 ff       	sbrs	r25, 5
 182:	fd cf       	rjmp	.-6      	; 0x17e <UART_out+0x4>
 184:	80 93 c6 00 	sts	0x00C6, r24
 188:	08 95       	ret

0000018a <MIDI_send>:
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	d6 2f       	mov	r29, r22
 190:	c4 2f       	mov	r28, r20
 192:	f3 df       	rcall	.-26     	; 0x17a <UART_out>
 194:	8d 2f       	mov	r24, r29
 196:	f1 df       	rcall	.-30     	; 0x17a <UART_out>
 198:	8c 2f       	mov	r24, r28
 19a:	86 95       	lsr	r24
 19c:	ee df       	rcall	.-36     	; 0x17a <UART_out>
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <MIDI_Conversion>:
 1a4:	90 91 06 02 	lds	r25, 0x0206
 1a8:	93 70       	andi	r25, 0x03	; 3
 1aa:	88 30       	cpi	r24, 0x08	; 8
 1ac:	49 f1       	breq	.+82     	; 0x200 <MIDI_Conversion+0x5c>
 1ae:	40 f4       	brcc	.+16     	; 0x1c0 <MIDI_Conversion+0x1c>
 1b0:	82 30       	cpi	r24, 0x02	; 2
 1b2:	c1 f0       	breq	.+48     	; 0x1e4 <MIDI_Conversion+0x40>
 1b4:	84 30       	cpi	r24, 0x04	; 4
 1b6:	e9 f0       	breq	.+58     	; 0x1f2 <MIDI_Conversion+0x4e>
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	09 f0       	breq	.+2      	; 0x1be <MIDI_Conversion+0x1a>
 1bc:	44 c0       	rjmp	.+136    	; 0x246 <MIDI_Conversion+0xa2>
 1be:	0b c0       	rjmp	.+22     	; 0x1d6 <MIDI_Conversion+0x32>
 1c0:	80 32       	cpi	r24, 0x20	; 32
 1c2:	61 f1       	breq	.+88     	; 0x21c <MIDI_Conversion+0x78>
 1c4:	18 f4       	brcc	.+6      	; 0x1cc <MIDI_Conversion+0x28>
 1c6:	80 31       	cpi	r24, 0x10	; 16
 1c8:	11 f1       	breq	.+68     	; 0x20e <MIDI_Conversion+0x6a>
 1ca:	3d c0       	rjmp	.+122    	; 0x246 <MIDI_Conversion+0xa2>
 1cc:	80 34       	cpi	r24, 0x40	; 64
 1ce:	69 f1       	breq	.+90     	; 0x22a <MIDI_Conversion+0x86>
 1d0:	80 38       	cpi	r24, 0x80	; 128
 1d2:	91 f1       	breq	.+100    	; 0x238 <MIDI_Conversion+0x94>
 1d4:	38 c0       	rjmp	.+112    	; 0x246 <MIDI_Conversion+0xa2>
 1d6:	89 2f       	mov	r24, r25
 1d8:	88 0f       	add	r24, r24
 1da:	89 0f       	add	r24, r25
 1dc:	88 0f       	add	r24, r24
 1de:	88 0f       	add	r24, r24
 1e0:	80 5d       	subi	r24, 0xD0	; 208
 1e2:	08 95       	ret
 1e4:	89 2f       	mov	r24, r25
 1e6:	88 0f       	add	r24, r24
 1e8:	89 0f       	add	r24, r25
 1ea:	88 0f       	add	r24, r24
 1ec:	88 0f       	add	r24, r24
 1ee:	8e 5c       	subi	r24, 0xCE	; 206
 1f0:	08 95       	ret
 1f2:	89 2f       	mov	r24, r25
 1f4:	88 0f       	add	r24, r24
 1f6:	89 0f       	add	r24, r25
 1f8:	88 0f       	add	r24, r24
 1fa:	88 0f       	add	r24, r24
 1fc:	8c 5c       	subi	r24, 0xCC	; 204
 1fe:	08 95       	ret
 200:	89 2f       	mov	r24, r25
 202:	88 0f       	add	r24, r24
 204:	89 0f       	add	r24, r25
 206:	88 0f       	add	r24, r24
 208:	88 0f       	add	r24, r24
 20a:	8b 5c       	subi	r24, 0xCB	; 203
 20c:	08 95       	ret
 20e:	89 2f       	mov	r24, r25
 210:	88 0f       	add	r24, r24
 212:	89 0f       	add	r24, r25
 214:	88 0f       	add	r24, r24
 216:	88 0f       	add	r24, r24
 218:	89 5c       	subi	r24, 0xC9	; 201
 21a:	08 95       	ret
 21c:	89 2f       	mov	r24, r25
 21e:	88 0f       	add	r24, r24
 220:	89 0f       	add	r24, r25
 222:	88 0f       	add	r24, r24
 224:	88 0f       	add	r24, r24
 226:	87 5c       	subi	r24, 0xC7	; 199
 228:	08 95       	ret
 22a:	89 2f       	mov	r24, r25
 22c:	88 0f       	add	r24, r24
 22e:	89 0f       	add	r24, r25
 230:	88 0f       	add	r24, r24
 232:	88 0f       	add	r24, r24
 234:	85 5c       	subi	r24, 0xC5	; 197
 236:	08 95       	ret
 238:	89 2f       	mov	r24, r25
 23a:	88 0f       	add	r24, r24
 23c:	89 0f       	add	r24, r25
 23e:	88 0f       	add	r24, r24
 240:	88 0f       	add	r24, r24
 242:	84 5c       	subi	r24, 0xC4	; 196
 244:	08 95       	ret
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	08 95       	ret

0000024a <__vector_29>:
 24a:	1f 92       	push	r1
 24c:	0f 92       	push	r0
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	0b b6       	in	r0, 0x3b	; 59
 256:	0f 92       	push	r0
 258:	8f 93       	push	r24
 25a:	9f 93       	push	r25
 25c:	ef 93       	push	r30
 25e:	ff 93       	push	r31
 260:	80 91 79 00 	lds	r24, 0x0079
 264:	80 93 04 02 	sts	0x0204, r24
 268:	ec e7       	ldi	r30, 0x7C	; 124
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	90 81       	ld	r25, Z
 26e:	80 91 06 02 	lds	r24, 0x0206
 272:	8c 70       	andi	r24, 0x0C	; 12
 274:	86 95       	lsr	r24
 276:	86 95       	lsr	r24
 278:	90 7e       	andi	r25, 0xE0	; 224
 27a:	89 2b       	or	r24, r25
 27c:	80 83       	st	Z, r24
 27e:	ff 91       	pop	r31
 280:	ef 91       	pop	r30
 282:	9f 91       	pop	r25
 284:	8f 91       	pop	r24
 286:	0f 90       	pop	r0
 288:	0b be       	out	0x3b, r0	; 59
 28a:	0f 90       	pop	r0
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	0f 90       	pop	r0
 290:	1f 90       	pop	r1
 292:	18 95       	reti

00000294 <__vector_23>:
}

ISR(TIMER0_OVF_vect)
{
 294:	1f 92       	push	r1
 296:	0f 92       	push	r0
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	0f 92       	push	r0
 29c:	11 24       	eor	r1, r1
	TCNT0 = 0;						// reset the count TCNT0
 29e:	16 bc       	out	0x26, r1	; 38
 2a0:	0f 90       	pop	r0
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	0f 90       	pop	r0
 2a6:	1f 90       	pop	r1
 2a8:	18 95       	reti

000002aa <init_Timer1>:
}

uint16_t TIME_read(void)
{
	return software_time;
}
 2aa:	10 92 80 00 	sts	0x0080, r1
 2ae:	82 e0       	ldi	r24, 0x02	; 2
 2b0:	80 93 6f 00 	sts	0x006F, r24
 2b4:	10 92 85 00 	sts	0x0085, r1
 2b8:	10 92 84 00 	sts	0x0084, r1
 2bc:	8d e7       	ldi	r24, 0x7D	; 125
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	90 93 89 00 	sts	0x0089, r25
 2c4:	80 93 88 00 	sts	0x0088, r24
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	80 93 81 00 	sts	0x0081, r24
 2ce:	08 95       	ret

000002d0 <REC_ISR>:

void REC_ISR(uint16_t time){
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
	if(PLAY){
 2d4:	80 91 07 02 	lds	r24, 0x0207
 2d8:	88 23       	and	r24, r24
 2da:	c1 f1       	breq	.+112    	; 0x34c <REC_ISR+0x7c>
		MIDI_send(com[rec_index], tones[rec_index], vol[rec_index]);
 2dc:	80 91 09 02 	lds	r24, 0x0209
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	dc 01       	movw	r26, r24
 2e4:	a4 5f       	subi	r26, 0xF4	; 244
 2e6:	b9 4f       	sbci	r27, 0xF9	; 249
 2e8:	fc 01       	movw	r30, r24
 2ea:	e4 5f       	subi	r30, 0xF4	; 244
 2ec:	fc 4f       	sbci	r31, 0xFC	; 252
 2ee:	ec 01       	movw	r28, r24
 2f0:	c4 5f       	subi	r28, 0xF4	; 244
 2f2:	dd 4f       	sbci	r29, 0xFD	; 253
 2f4:	4c 91       	ld	r20, X
 2f6:	60 81       	ld	r22, Z
 2f8:	88 81       	ld	r24, Y
 2fa:	47 df       	rcall	.-370    	; 0x18a <MIDI_send>
		//PORTB = ~rec_index;
		
		// Last record will be of time zero
		// Restart the playback in that case
		if(com[rec_index] == 0){
 2fc:	80 91 09 02 	lds	r24, 0x0209
 300:	e8 2f       	mov	r30, r24
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	e4 5f       	subi	r30, 0xF4	; 244
 306:	fd 4f       	sbci	r31, 0xFD	; 253
 308:	90 81       	ld	r25, Z
 30a:	91 11       	cpse	r25, r1
 30c:	0f c0       	rjmp	.+30     	; 0x32c <REC_ISR+0x5c>
			MIDI_send(com[0], tones[0], vol[0]);
 30e:	40 91 0c 06 	lds	r20, 0x060C
 312:	60 91 0c 03 	lds	r22, 0x030C
 316:	80 91 0c 02 	lds	r24, 0x020C
 31a:	37 df       	rcall	.-402    	; 0x18a <MIDI_send>
			
			rec_index = 1;
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	80 93 09 02 	sts	0x0209, r24
	software_comp = time;
}

void TIME_reset(void)
{
	software_time = 0;
 322:	10 92 0b 02 	sts	0x020B, r1
 326:	10 92 0a 02 	sts	0x020A, r1
 32a:	03 c0       	rjmp	.+6      	; 0x332 <REC_ISR+0x62>
			rec_index = 1;
			TIME_reset();
			
		}
		else{
			rec_index++;
 32c:	8f 5f       	subi	r24, 0xFF	; 255
 32e:	80 93 09 02 	sts	0x0209, r24
		}
		
		TIME_Set_ISR(rec_time[rec_index]);	
 332:	e0 91 09 02 	lds	r30, 0x0209
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	ee 0f       	add	r30, r30
 33a:	ff 1f       	adc	r31, r31
 33c:	e4 5f       	subi	r30, 0xF4	; 244
 33e:	fb 4f       	sbci	r31, 0xFB	; 251
 340:	80 81       	ld	r24, Z
 342:	91 81       	ldd	r25, Z+1	; 0x01
	}
}

void TIME_Set_ISR(uint16_t time)
{
	software_comp = time;
 344:	90 93 03 02 	sts	0x0203, r25
 348:	80 93 02 02 	sts	0x0202, r24
		TIME_Set_ISR(rec_time[rec_index]);	
	
	}
	
	// There will be no new interrupt if PLAY == 0
}
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <__vector_17>:
	// Start timer
	TCCR1B	= (1<<CS10); // Start, pre scaler 1
}

ISR(TIMER1_COMPA_vect)
{
 352:	1f 92       	push	r1
 354:	0f 92       	push	r0
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	0f 92       	push	r0
 35a:	11 24       	eor	r1, r1
 35c:	0b b6       	in	r0, 0x3b	; 59
 35e:	0f 92       	push	r0
 360:	2f 93       	push	r18
 362:	3f 93       	push	r19
 364:	4f 93       	push	r20
 366:	5f 93       	push	r21
 368:	6f 93       	push	r22
 36a:	7f 93       	push	r23
 36c:	8f 93       	push	r24
 36e:	9f 93       	push	r25
 370:	af 93       	push	r26
 372:	bf 93       	push	r27
 374:	ef 93       	push	r30
 376:	ff 93       	push	r31
	software_time++;
 378:	80 91 0a 02 	lds	r24, 0x020A
 37c:	90 91 0b 02 	lds	r25, 0x020B
 380:	01 96       	adiw	r24, 0x01	; 1
 382:	90 93 0b 02 	sts	0x020B, r25
 386:	80 93 0a 02 	sts	0x020A, r24
	PORTB = ~(rec_index >> 1); //((PLAY<<6) | (REC<<7) | rec_index);
 38a:	80 91 09 02 	lds	r24, 0x0209
 38e:	86 95       	lsr	r24
 390:	80 95       	com	r24
 392:	85 b9       	out	0x05, r24	; 5
	if(software_time == software_comp)
 394:	20 91 0a 02 	lds	r18, 0x020A
 398:	30 91 0b 02 	lds	r19, 0x020B
 39c:	80 91 02 02 	lds	r24, 0x0202
 3a0:	90 91 03 02 	lds	r25, 0x0203
 3a4:	28 17       	cp	r18, r24
 3a6:	39 07       	cpc	r19, r25
 3a8:	29 f4       	brne	.+10     	; 0x3b4 <__vector_17+0x62>
	{
		REC_ISR(software_time);
 3aa:	80 91 0a 02 	lds	r24, 0x020A
 3ae:	90 91 0b 02 	lds	r25, 0x020B
 3b2:	8e df       	rcall	.-228    	; 0x2d0 <REC_ISR>
	}
}
 3b4:	ff 91       	pop	r31
 3b6:	ef 91       	pop	r30
 3b8:	bf 91       	pop	r27
 3ba:	af 91       	pop	r26
 3bc:	9f 91       	pop	r25
 3be:	8f 91       	pop	r24
 3c0:	7f 91       	pop	r23
 3c2:	6f 91       	pop	r22
 3c4:	5f 91       	pop	r21
 3c6:	4f 91       	pop	r20
 3c8:	3f 91       	pop	r19
 3ca:	2f 91       	pop	r18
 3cc:	0f 90       	pop	r0
 3ce:	0b be       	out	0x3b, r0	; 59
 3d0:	0f 90       	pop	r0
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	0f 90       	pop	r0
 3d6:	1f 90       	pop	r1
 3d8:	18 95       	reti

000003da <REC_start>:
		rec_index++;
	}
}

void REC_start(void){
	REC = 1;
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	80 93 08 02 	sts	0x0208, r24
	rec_index = 0;
 3e0:	10 92 09 02 	sts	0x0209, r1
	software_comp = time;
}

void TIME_reset(void)
{
	software_time = 0;
 3e4:	10 92 0b 02 	sts	0x020B, r1
 3e8:	10 92 0a 02 	sts	0x020A, r1
 3ec:	08 95       	ret

000003ee <REC_stop>:
	TIME_reset();
}

void REC_stop(void){
	// always record both on AND off commands = even number
	if(rec_index & 0x01){ // if not even
 3ee:	80 91 09 02 	lds	r24, 0x0209
 3f2:	80 ff       	sbrs	r24, 0
 3f4:	11 c0       	rjmp	.+34     	; 0x418 <REC_stop+0x2a>
		REC_add((com[rec_index-1] & 0b11101111), tones[rec_index-1]);
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	fc 01       	movw	r30, r24
 3fc:	e4 5f       	subi	r30, 0xF4	; 244
 3fe:	fc 4f       	sbci	r31, 0xFC	; 252
 400:	dc 01       	movw	r26, r24
 402:	a4 5f       	subi	r26, 0xF4	; 244
 404:	bd 4f       	sbci	r27, 0xFD	; 253
 406:	8c 91       	ld	r24, X
 408:	60 81       	ld	r22, Z
 40a:	8f 7e       	andi	r24, 0xEF	; 239
 40c:	22 d0       	rcall	.+68     	; 0x452 <REC_add>
		//com[rec_index]  = (com[rec_index-1] & 0b11101111); 
		//tones[rec_index] = tones[rec_index-1];
		//vol[rec_index] = volume;
		rec_index++;
 40e:	80 91 09 02 	lds	r24, 0x0209
 412:	8f 5f       	subi	r24, 0xFF	; 255
 414:	80 93 09 02 	sts	0x0209, r24
	}
	
	com[rec_index]  = 0;
 418:	80 91 09 02 	lds	r24, 0x0209
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	fc 01       	movw	r30, r24
 420:	e4 5f       	subi	r30, 0xF4	; 244
 422:	fd 4f       	sbci	r31, 0xFD	; 253
 424:	10 82       	st	Z, r1
	tones[rec_index] = 0;
 426:	fc 01       	movw	r30, r24
 428:	e4 5f       	subi	r30, 0xF4	; 244
 42a:	fc 4f       	sbci	r31, 0xFC	; 252
 42c:	10 82       	st	Z, r1
	vol[rec_index] = 0;
 42e:	fc 01       	movw	r30, r24
 430:	e4 5f       	subi	r30, 0xF4	; 244
 432:	f9 4f       	sbci	r31, 0xF9	; 249
 434:	10 82       	st	Z, r1
	software_time = 0;
}

uint16_t TIME_read(void)
{
	return software_time;
 436:	20 91 0a 02 	lds	r18, 0x020A
 43a:	30 91 0b 02 	lds	r19, 0x020B
	}
	
	com[rec_index]  = 0;
	tones[rec_index] = 0;
	vol[rec_index] = 0;
	rec_time[rec_index] = TIME_read();
 43e:	fc 01       	movw	r30, r24
 440:	ee 0f       	add	r30, r30
 442:	ff 1f       	adc	r31, r31
 444:	e4 5f       	subi	r30, 0xF4	; 244
 446:	fb 4f       	sbci	r31, 0xFB	; 251
 448:	31 83       	std	Z+1, r19	; 0x01
 44a:	20 83       	st	Z, r18
	REC = 0;
 44c:	10 92 08 02 	sts	0x0208, r1
 450:	08 95       	ret

00000452 <REC_add>:
	}
	
	// There will be no new interrupt if PLAY == 0
}

void REC_add(uint8_t command, uint8_t tone){
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	d8 2f       	mov	r29, r24
 458:	c6 2f       	mov	r28, r22
	
	// Stop recording if overflows = reset and starts from clean
	if(rec_index == 254){
 45a:	90 91 09 02 	lds	r25, 0x0209
 45e:	9e 3f       	cpi	r25, 0xFE	; 254
 460:	09 f4       	brne	.+2      	; 0x464 <REC_add+0x12>
		REC_stop();
 462:	c5 df       	rcall	.-118    	; 0x3ee <REC_stop>
	}
	
	if(REC){ // Recording 
 464:	90 91 08 02 	lds	r25, 0x0208
 468:	99 23       	and	r25, r25
 46a:	81 f1       	breq	.+96     	; 0x4cc <REC_add+0x7a>
		com[rec_index]  = command;
 46c:	90 91 09 02 	lds	r25, 0x0209
 470:	29 2f       	mov	r18, r25
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	f9 01       	movw	r30, r18
 476:	e4 5f       	subi	r30, 0xF4	; 244
 478:	fd 4f       	sbci	r31, 0xFD	; 253
 47a:	d0 83       	st	Z, r29
		tones[rec_index] = tone;
 47c:	f9 01       	movw	r30, r18
 47e:	e4 5f       	subi	r30, 0xF4	; 244
 480:	fc 4f       	sbci	r31, 0xFC	; 252
 482:	c0 83       	st	Z, r28
		vol[rec_index] = volume;
 484:	80 91 04 02 	lds	r24, 0x0204
 488:	f9 01       	movw	r30, r18
 48a:	e4 5f       	subi	r30, 0xF4	; 244
 48c:	f9 4f       	sbci	r31, 0xF9	; 249
 48e:	80 83       	st	Z, r24
		
		// Recording starts on first tone, so set time = 0 and reset timer
		if(rec_index == 0){
 490:	91 11       	cpse	r25, r1
 492:	0c c0       	rjmp	.+24     	; 0x4ac <REC_add+0x5a>
			rec_time[rec_index] = 0;
 494:	f9 01       	movw	r30, r18
 496:	ee 0f       	add	r30, r30
 498:	ff 1f       	adc	r31, r31
 49a:	e4 5f       	subi	r30, 0xF4	; 244
 49c:	fb 4f       	sbci	r31, 0xFB	; 251
 49e:	11 82       	std	Z+1, r1	; 0x01
 4a0:	10 82       	st	Z, r1
	software_comp = time;
}

void TIME_reset(void)
{
	software_time = 0;
 4a2:	10 92 0b 02 	sts	0x020B, r1
 4a6:	10 92 0a 02 	sts	0x020A, r1
 4aa:	0b c0       	rjmp	.+22     	; 0x4c2 <REC_add+0x70>
}

uint16_t TIME_read(void)
{
	return software_time;
 4ac:	80 91 0a 02 	lds	r24, 0x020A
 4b0:	90 91 0b 02 	lds	r25, 0x020B
			
			
			
		}
		
		else { rec_time[rec_index] = TIME_read();}
 4b4:	f9 01       	movw	r30, r18
 4b6:	ee 0f       	add	r30, r30
 4b8:	ff 1f       	adc	r31, r31
 4ba:	e4 5f       	subi	r30, 0xF4	; 244
 4bc:	fb 4f       	sbci	r31, 0xFB	; 251
 4be:	91 83       	std	Z+1, r25	; 0x01
 4c0:	80 83       	st	Z, r24
			
		rec_index++;
 4c2:	80 91 09 02 	lds	r24, 0x0209
 4c6:	8f 5f       	subi	r24, 0xFF	; 255
 4c8:	80 93 09 02 	sts	0x0209, r24
	}
}
 4cc:	df 91       	pop	r29
 4ce:	cf 91       	pop	r28
 4d0:	08 95       	ret

000004d2 <REC_state>:
	REC = 0;
}

void REC_state(uint8_t switches)
// For starting the play. Always from the start
{
 4d2:	cf 93       	push	r28
 4d4:	c8 2f       	mov	r28, r24
	if(switches & 0x40){
 4d6:	86 ff       	sbrs	r24, 6
 4d8:	11 c0       	rjmp	.+34     	; 0x4fc <REC_state+0x2a>
		if(!PLAY){  // If play channel one is on
 4da:	80 91 07 02 	lds	r24, 0x0207
 4de:	81 11       	cpse	r24, r1
 4e0:	1a c0       	rjmp	.+52     	; 0x516 <REC_state+0x44>
			PLAY = 1;
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	80 93 07 02 	sts	0x0207, r24
			
			// First note is on time = 0 which doesn't exist in our approach,
			// Therefor call the ICR for the first tone and then reset timer.
			rec_index = 0;
 4e8:	10 92 09 02 	sts	0x0209, r1
			REC_ISR(0);
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	ef de       	rcall	.-546    	; 0x2d0 <REC_ISR>
	software_comp = time;
}

void TIME_reset(void)
{
	software_time = 0;
 4f2:	10 92 0b 02 	sts	0x020B, r1
 4f6:	10 92 0a 02 	sts	0x020A, r1
 4fa:	0d c0       	rjmp	.+26     	; 0x516 <REC_state+0x44>
			REC_ISR(0);
			TIME_reset();
		}
	}
	else{ // If should be off
		if(PLAY){ // Turn off if on
 4fc:	80 91 07 02 	lds	r24, 0x0207
 500:	88 23       	and	r24, r24
 502:	49 f0       	breq	.+18     	; 0x516 <REC_state+0x44>
			PLAY = 0;
 504:	10 92 07 02 	sts	0x0207, r1
			
			// Make sure to end the last tone!
			if(rec_index & 0x01){
 508:	80 91 09 02 	lds	r24, 0x0209
 50c:	80 ff       	sbrs	r24, 0
 50e:	03 c0       	rjmp	.+6      	; 0x516 <REC_state+0x44>
				REC_ISR(0);
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	dd de       	rcall	.-582    	; 0x2d0 <REC_ISR>
			}
		}
	}
	
	if(switches & 0x80){ // Recording?
 516:	cc 23       	and	r28, r28
 518:	34 f4       	brge	.+12     	; 0x526 <REC_state+0x54>
		if(REC == 0){	 // Change from before?
 51a:	80 91 08 02 	lds	r24, 0x0208
 51e:	81 11       	cpse	r24, r1
 520:	07 c0       	rjmp	.+14     	; 0x530 <REC_state+0x5e>
			REC_start();
 522:	5b df       	rcall	.-330    	; 0x3da <REC_start>
 524:	05 c0       	rjmp	.+10     	; 0x530 <REC_state+0x5e>
		}
	}
	else{
		if(REC == 1){ // If rec on, but swithces not in that position, stop
 526:	80 91 08 02 	lds	r24, 0x0208
 52a:	81 30       	cpi	r24, 0x01	; 1
 52c:	09 f4       	brne	.+2      	; 0x530 <REC_state+0x5e>
			REC_stop();
 52e:	5f df       	rcall	.-322    	; 0x3ee <REC_stop>
		}
	}
 530:	cf 91       	pop	r28
 532:	08 95       	ret

00000534 <main>:

#include "main.h"

int main(void)
{
	Init_ports();
 534:	f7 dd       	rcall	.-1042   	; 0x124 <Init_ports>
	Init_UART0(9600);
 536:	80 e8       	ldi	r24, 0x80	; 128
 538:	95 e2       	ldi	r25, 0x25	; 37
 53a:	fc dd       	rcall	.-1032   	; 0x134 <Init_UART0>
	init_Timer1();
 53c:	b6 de       	rcall	.-660    	; 0x2aa <init_Timer1>
	sei();
 53e:	78 94       	sei
	
	// Pressed buttons
	uint8_t previus = 0x00;
 540:	d0 e0       	ldi	r29, 0x00	; 0
 542:	01 c0       	rjmp	.+2      	; 0x546 <main+0x12>
*/

#include "main.h"

int main(void)
{
 544:	dc 2f       	mov	r29, r28
	
	while
	(1)
	{
		
		current = ~PIND;
 546:	c9 b1       	in	r28, 0x09	; 9
 548:	c0 95       	com	r28
		switches = ~PINC; // Update switches
 54a:	86 b1       	in	r24, 0x06	; 6
 54c:	80 95       	com	r24
 54e:	80 93 06 02 	sts	0x0206, r24
		REC_state(switches);
 552:	80 91 06 02 	lds	r24, 0x0206
 556:	bd df       	rcall	.-134    	; 0x4d2 <REC_state>
		//PORTB = ~switches; // rx_ch;
		
		change = current^previus;
 558:	9d 2f       	mov	r25, r29
 55a:	9c 27       	eor	r25, r28
		
		if(current & change) // Note on
 55c:	89 2f       	mov	r24, r25
 55e:	8c 23       	and	r24, r28
 560:	89 f0       	breq	.+34     	; 0x584 <main+0x50>
		{
			command = 0b10010000 | (switches & 0x0C) >> 2;
 562:	d0 91 06 02 	lds	r29, 0x0206
 566:	dc 70       	andi	r29, 0x0C	; 12
 568:	d6 95       	lsr	r29
 56a:	d6 95       	lsr	r29
 56c:	d0 69       	ori	r29, 0x90	; 144
			tone = MIDI_Conversion(current & change);
 56e:	1a de       	rcall	.-972    	; 0x1a4 <MIDI_Conversion>
 570:	18 2f       	mov	r17, r24
			
			REC_add(command, tone);
 572:	68 2f       	mov	r22, r24
 574:	8d 2f       	mov	r24, r29
 576:	6d df       	rcall	.-294    	; 0x452 <REC_add>
			
			MIDI_send(command, tone, volume);
 578:	40 91 04 02 	lds	r20, 0x0204
 57c:	61 2f       	mov	r22, r17
 57e:	8d 2f       	mov	r24, r29
 580:	04 de       	rcall	.-1016   	; 0x18a <MIDI_send>
 582:	e0 cf       	rjmp	.-64     	; 0x544 <main+0x10>
			
			//UART_out(0b10010001); // Command
			//UART_out(MIDI_Conversion(current & change)); // Note 7bit
			//UART_out(80 ); //volume(switches & 0x03)); // Velocity 7 bit
		}
		else if(previus & change) // Note off
 584:	89 2f       	mov	r24, r25
 586:	8d 23       	and	r24, r29
 588:	e9 f2       	breq	.-70     	; 0x544 <main+0x10>
		{

			command = 0b10000000 | ((switches & 0x0C) >> 2);
 58a:	10 91 06 02 	lds	r17, 0x0206
 58e:	1c 70       	andi	r17, 0x0C	; 12
 590:	16 95       	lsr	r17
 592:	16 95       	lsr	r17
 594:	10 68       	ori	r17, 0x80	; 128
			
			tone = MIDI_Conversion(previus & change);
 596:	06 de       	rcall	.-1012   	; 0x1a4 <MIDI_Conversion>
 598:	d8 2f       	mov	r29, r24
						
			REC_add(command, tone);
 59a:	68 2f       	mov	r22, r24
 59c:	81 2f       	mov	r24, r17
 59e:	59 df       	rcall	.-334    	; 0x452 <REC_add>
			MIDI_send(command, tone, volume);
 5a0:	40 91 04 02 	lds	r20, 0x0204
 5a4:	6d 2f       	mov	r22, r29
 5a6:	81 2f       	mov	r24, r17
 5a8:	f0 dd       	rcall	.-1056   	; 0x18a <MIDI_send>
 5aa:	cc cf       	rjmp	.-104    	; 0x544 <main+0x10>

000005ac <_exit>:
 5ac:	f8 94       	cli

000005ae <__stop_program>:
 5ae:	ff cf       	rjmp	.-2      	; 0x5ae <__stop_program>
